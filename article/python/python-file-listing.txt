= link:python.html[Python] / link:python-file.html[Files] / Listing =
:title: [Python] 查看目錄的內容，並過濾出符合條件的檔案清單

要知道某個目錄底下有哪些檔案或目錄，最簡單的方式就是用 `os.listdir()`。

--------------------------------------------------------------------------------
$ pwd; tree -aNF
/tmp/dir
.
|-- file.txt
|-- .hidden.txt
|-- subdir/
|   |-- file.png
|   |-- file.txt
|   |-- .hidden.txt
|   |-- subdir2-1/
|   |   |-- file.png
|   |   |-- file.txt
|   |   `-- .hidden.txt
|   |-- subdir2-2/
|   `-- subdir2-3/
`-- 子目錄/
    |-- a.png
    |-- b.png
    |-- c.png
    `-- 檔案.txt
$
$ python
>>> import os
>>> files = os.listdir('/tmp/dir') <1>
>>> print files
['.hidden.txt', 'subdir', '\xe5\xad\x90\xe7\x9b\xae\xe9\x8c\x84', 'file.txt']
>>> for file in files: print file,
... 
.hidden.txt subdir 子目錄 file.txt
>>>
>>> print os.getcwd(), os.listdir('subdir') <2>
/tmp/dir ['subdir2-2', 'subdir2-1', '.hidden.txt', 'file.png', 'subdir2-3', 'file.txt']
>>>
>>> files = os.listdir('/tmp/dir/\xe5\xad\x90\xe7\x9b\xae\xe9\x8c\x84'.decode('utf-8')) <3>
>>> print files
[u'a.png', u'c.png', u'\u6a94\u6848.txt', u'b.png']
>>> for file in files: print file,
... 
a.png c.png 檔案.txt b.png
--------------------------------------------------------------------------------
<1> `listdir(path)` 可以列出 'path' 底下的檔案跟子目錄（包括隱藏檔，但不包含 `.` 跟 `..` 這兩個項目）。
<2> `listdir(path)` 的 'path' 也可以是相對於 link:python-file-cwd.html[CWD] 的路徑。
<3> `listdir()` 回傳的結果並沒有排序過，而且回傳結果的字串型態（`str` 或 `unicode`）會跟著 'path' 走。

如果要過濾路徑名稱符合某些條件的檔案，改用 `glob.glob()` 可以省掉一些工。

--------------------------------------------------------------------------------
>>> import glob
>>> glob.glob('/tmp/dir/*') <1>
['/tmp/dir/subdir', '/tmp/dir/\xe5\xad\x90\xe7\x9b\xae\xe9\x8c\x84', '/tmp/dir/file.txt']
>>> print os.getcwd(), glob.glob(u'*')
/tmp/dir [u'subdir', u'\u5b50\u76ee\u9304', u'file.txt']
>>>
>>> for entry in glob.iglob(u'*'): print repr(entry), <2>
... 
u'subdir' u'\u5b50\u76ee\u9304' u'file.txt'
>>>
>>> glob.glob('.*.txt') <3>
['.hidden.txt']
>>>
>>> glob.glob(u'*/*.txt') <4>
[u'subdir/file.txt', u'\u5b50\u76ee\u9304/\u6a94\u6848.txt']
>>> glob.glob(u'**/*.txt')
[u'subdir/file.txt', u'\u5b50\u76ee\u9304/\u6a94\u6848.txt']
>>>
>>>
--------------------------------------------------------------------------------
<1> `glob(pathname)` 會列出符合 'pathname' 這個 pattern 的檔案或目錄（但不包含隱藏檔）。
+
--
由於 `glob()` 背後也是呼叫 `listdir()`，回傳結果的字串型態（`str` 或 `unicode`）會跟著 'pathname' 走。

'pathname' 也可以是相對於 link:python-file-cwd.html[CWD] 的路徑，但注意結果也變成相對路徑了。也就是說結果是用絕對路徑或相對路徑來表示，跟 'pathname' 的表示法有關。另外 'pathname' 支援 shell-style wildcards 的用法，包括 `*`、`?` 以及 `[]`，更多的細節可以參考 http://docs.python.org/library/fnmatch.html[`fnmatch` 模組]。
--
+
<2> `iglob()` 跟 `glob()` 一樣，只是回傳 iterator 而已，適用目錄下的檔案數很多時。
<3> 在 pattern 前面明確加上 `.` 可以列出隱藏檔，但這麼一來非隱藏檔就都被濾除了。
<4> `glob()` 支援 `*/*` 的用法，但也僅限於該層目錄，並不會自動往下鑽（改成 `**/*` 的寫法也沒用）。

如果搜尋的範圍是整個樹狀結構（directory tree）而非單個目錄，`os.walk()` 會更為適用。

 walk(top, topdown=True, onerror=None, followlinks=False)

--------------------------------------------------------------------------------
>>> for dirpath, dirnames, filenames in os.walk('/tmp/dir/subdir'): <1>
...     print dirpath
...     print '    sub directories:', dirnames
...     print '    files:', filenames
... 
/tmp/dir/subdir
    sub directories: ['subdir2-2', 'subdir2-1', 'subdir2-3']
    files: ['.hidden.txt', 'file.png', 'file.txt']
/tmp/dir/subdir/subdir2-2
    sub directories: []
    files: []
/tmp/dir/subdir/subdir2-1
    sub directories: []
    files: ['.hidden.txt', 'file.png', 'file.txt']
/tmp/dir/subdir/subdir2-3
    sub directories: []
    files: []
>>>
>>> for dirpath, dirnames, filenames in os.walk(u'subdir', topdown=False): <2>
...     print dirpath
...     print '    sub directories:', dirnames
...     print '    files:', filenames
... 
subdir/subdir2-2
    sub directories: []
    files: []
subdir/subdir2-1
    sub directories: []
    files: [u'.hidden.txt', u'file.png', u'file.txt']
subdir/subdir2-3
    sub directories: []
    files: []
subdir
    sub directories: [u'subdir2-2', u'subdir2-1', u'subdir2-3']
    files: [u'.hidden.txt', u'file.png', u'file.txt']
--------------------------------------------------------------------------------
<1> `walk()` 會鑽進樹狀結構，傳回每一層目錄的內容（3-tuple `(dirpath, dirnames, filenames)`）。其中 'dirpath' 是某一層目錄的路徑名稱，至於是用絕對路徑或相對路徑來表示，則跟一開始傳入的 'top' 有關。'dirnames' 是 'dirpath' 底下零或多個子目錄的清單，至於檔案的清單則在 'filenames'。
<2> 改用 `topdown=False` 後，目錄處理的順序變成由下而上（bottom-up; `subdir/subdir2-*` -> `subdir`），跟預設 `topdown=True` 的由上而下（top-down; `subdir` -> `subdir/subdir2-*`）不同。

使用 `walk()` 時，最關鍵的就是瞭解 top-down 跟 bottom-up 的差異，因為這將關係到能否在過程中對 'dirnames' 動手腳，進而影響 `walk()` 接下來處理子目錄的順序，甚至選擇性地只處理某些目錄。

觀察上面的例子，處理到 `/tmp/dir/subdir` 時，子目錄的處理順序是 `subdir2-2` -> `subdir2-1` -> `subdir2-3`。如果想讓處理的順序變成 `subdir2-1` -> `subdir2-2` -> `subdir2-3`，就必須在處理到 `/tmp/dir/subdir` 時，對 `dirnames` 動點手腳：

--------------------------------------------------------------------------------
>>> for dirpath, dirnames, filenames in os.walk('/tmp/dir/subdir'):
...     dirnames.sort() <1>
...     print dirpath
...     print '    sub directories:', dirnames
...     print '    files:', filenames
...
/tmp/dir/subdir
    sub directories: ['subdir2-1', 'subdir2-2', 'subdir2-3']
    files: ['.hidden.txt', 'file.png', 'file.txt']
/tmp/dir/subdir/subdir2-1
    sub directories: []
    files: ['.hidden.txt', 'file.png', 'file.txt']
/tmp/dir/subdir/subdir2-2
    sub directories: []
    files: []
/tmp/dir/subdir/subdir2-3
    sub directories: []
    files: []
>>>
>>> for dirpath, dirnames, filenames in os.walk('/tmp/dir/subdir', topdown=False): <2>
...     dirnames.sort()
...     print dirpath
...     print '    sub directories:', dirnames
...     print '    files:', filenames
... 
/tmp/dir/subdir/subdir2-2
    sub directories: []
    files: []
/tmp/dir/subdir/subdir2-1
    sub directories: []
    files: ['.hidden.txt', 'file.png', 'file.txt']
/tmp/dir/subdir/subdir2-3
    sub directories: []
    files: []
/tmp/dir/subdir
    sub directories: ['subdir2-1', 'subdir2-2', 'subdir2-3']
    files: ['.hidden.txt', 'file.png', 'file.txt']
--------------------------------------------------------------------------------
<1> 對 `dirnames` 做 in-place 的排序，就可以影響 "接下來" 處理子目錄的順序。
<2> 同樣的動作在 bottom-up 時起不了作用，因為處理到 `/tmp/dir/subdir` 之前，`walk()` 早已走過底下的子目錄。

== 參考資料 ==

.文件
--
 * http://docs.python.org/library/os.html#files-and-directories[os — Miscellaneous operating system interfaces > Files and Directories]
 * http://docs.python.org/library/glob.html[glob — Unix style pathname pattern expansion]
 * http://docs.python.org/library/fnmatch.html[fnmatch — Unix filename pattern matching]
--

