= link:selenium.html[Selenium] / link:selenium-rc.html[RC] / JavaScript =
:title: [Selenium][RC] JavaScript

Selenium 提供有一些 API 可以用 link:../javascript/javascript.html[JavaScript] 程式碼直接跟 link:../dom/dom.html[DOM] 互動，彌補 link:selenium-rc-api.html[RC API] 的不足。

首先來看 `get_eval()`，它可以執行一或多行 JavaScript 程式碼，然後傳回最後一行的執行結果。

  get_eval(script)

--------------------------------------------------------------------------------
>>> sel.get_eval('doRefresh()')
...
Exception: ERROR: Threw an exception: doRefresh is not defined
>>> sel.get_eval('this.doRefresh()') <1>
u'null'
>>> sel.get_eval("this.doOpen('http://www.google.com'); true") <2>
u'true'
>>> sel.get_eval("window.document.title") <3>
u'Google'
>>> sel.get_eval("document.title")
u'Selenium Remote Control v2.24.1'
--------------------------------------------------------------------------------
<1> 這段程式碼執行的 link:../javascript/javascript-context.html[context] 是 selenium 本身。
+
--
.http://code.google.com/p/selenium/source/browse/trunk/common/src/js/core/scripts/selenium-api.js?r=8162[`selenium-api.js`]
--------------------------------------------------------------------------------
Selenium.prototype.doRefresh = function() {
    /** ... */
    this.browserbot.refresh();
};
--------------------------------------------------------------------------------

CAUTION: 也可以改寫成 `sel.get_eval('this.browserbot.refresh()')` 直接呼叫 `browserbot`，但 `selenium-api.js` 開頭就寫著 "stop navigating this.browserbot.document() ... it breaks encapsulation"，建議還是不要這樣用。
--
+
<2> 多行程式可以用 `;` 或 `\n` 隔開，但只會傳回最後一行的執行結果。
<3> 透過 `window` 可以存取到 AUT 的視窗，進一步操作 DOM。

如果要操作的對象沒有 ID，要如何讓方便的 element locator 幫上忙呢？答案是 `assign_id()`：

 assign_id(locator, identifier)

它可以 "暫時" 將 'locator' 所代表 element 的 `id` 設定成 'identifier'，之後就可以透過 ID 更快地存取到該 element，也方便從 JavaScript 裡參照。

下面示範將 `//*[@id='tsf']/div[2]/div[3]/center/input[2]` 這個按鈕的 `id` 設成 `lucky_button`（故意選用複雜的 locator），之後在 JavaScript 裡就可以直接透過 ID 存取到該按鈕。

--------------------------------------------------------------------------------
>>> sel.get_eval('this.getTitle()')
u'Google'
>>>
>>> print sel.get_value('name=btnI')
好手氣
>>> sel.assign_id("//*[@id='tsf']/div[2]/div[3]/center/input[2]", 'lucky_button')
>>> print sel.get_eval("window.document.getElementById('lucky_button').value")
好手氣
--------------------------------------------------------------------------------

這裡會稱做 "暫時"，是因為這樣的改變在 page reload 後就會消失了。

--------------------------------------------------------------------------------
>>> sel.refresh()
>>> sel.get_eval("window.document.getElementById('lucky_button').value")
...
Exception: ERROR: Threw an exception: window.document.getElementById("lucky_button") is null
--------------------------------------------------------------------------------

== 參考資料 ==

.文件
--
 * http://code.google.com/p/selenium/source/browse/trunk/common/src/js/core/scripts/selenium-api.js?r=8162[selenium-api.js]
 * http://code.google.com/p/selenium/source/browse/trunk/common/src/js/core/scripts/selenium-browserbot.js?r=8162[selenium-browserbot.js]
 * http://selenium.googlecode.com/svn/trunk/docs/api/py/selenium/selenium.selenium.html[selenium.selenium — Selenium 2.0 documentation]
--

////////////////////////////////////////////////////////////////////////////////

 * assign_id(locator, identifier)
 * get_eval(script)
 * get_expression(expression)
 * wait_for_condition(script, timeout)

 * run_script(script)
 * add_script(scriptContent, scriptTagId)
 * remove_script(scriptTagId)
 * setExtensionJs(extensionJs)

////////////////////////////////////////////////////////////////////////////////

