= link:ms-uia.html[UIA] / Microsoft Active Accessibility (MSAA) =
:title: [UIA] Microsoft Active Accessibility (MSAA)

== 參考資料 ==

.Websites
--
 * http://msdn.microsoft.com/en-us/library/ms697707.aspx[Microsoft Active Accessibility Version 2.0]
--

.Documents
--
 * http://en.wikipedia.org/wiki/Microsoft_Active_Accessibility[Microsoft Active Accessibility - Wikipedia, the free encyclopedia]

////////////////////////////////////////////////////////////////////////////////
** Microsoft Active Accessibility (MSAA) is an Application Programming Interface (API) for user interface accessibility. MSAA was introduced as a platform add-on to Microsoft Windows 95 in 1997. 沒想到這東西已存在這麼久了
** MSAA is designed to help Assistive Technology (AT) products interact with standard and custom user interface (UI) elements of an application (or the operating system), as well as to access, identify, and manipulate an application's UI elements. MSAA can also be used for automated testing tools. 下面有提到,確實有很多商用工具將它應用在 test automation
** Since Windows 98 and Windows NT 4.0 Service Pack 4, MSAA has been built-into all versions of the Windows platform, and has received periodic upgrades and patches over time. 直到 Windows 8 沒了??
** Programmatic exposure for assistive technology applications on Windows has historically been provided through MSAA. However newer applications are now using Microsoft UI Automation (UIA), which was introduced in Windows Vista and the .NET Framework 3.0. 新的 UIA 保有對 MSAA client 的支援??
** 2.0 First major revision of MSAA, adding support for Dynamic Annotation and MSAA Text. This version was integrated into Windows XP.
** 3.0 The framework has become part of the Windows Automation API 3.0, which is integrated into the Windows platform accessibility API set by MSAA and UI Automation (UIA). Windows Automation API is included in Windows 7 and available for Windows Vista and XP (2009) 所以 Windows Automation API = MSAA + UIA,而且向下支援 Vista 跟 XP??
** The motivating factor behind the development of MSAA was to allow an available and seamless communication mechanism between the underlying operating system or applications and assistive technology products.
** The programmatic goal of MSAA is to allow Windows controls to expose basic information, such as name, location on screen, or type of control, and state information such as visibility, enabled, or selected.
** Applications (e.g., word processor) are called Servers in MSAA because they provide, or serve, information about their user interfaces (UI). Accessibility tools (e.g., screen readers) are called Clients in MSAA because they consume and interact with UI information from an application. 這種 client/server 的說法還滿直覺的
** The accessible object is the central interface of MSAA, and is represented by an `IAccessible` COM interface and an integer `ChildId`. It allows applications to expose a tree structure that represents the structure of the UI. Each element of this tree exposes a set of properties and methods that allow the corresponding UI element to be manipulated. MSAA clients can access the programmatic UI information through a standard API.
** MSAA communicates information by sending small chunks of information about elements of a program to the assistive technology object (AT). The four critical pieces of information on which the AT relies to help users interact with applications are an element's role, name, value, and state:
   *** Role: Conveys to users via AT what type of object a control is, such as a button or a table. 很特別的概念,把 component type 給抽象化了
   *** Name: Provides a label for an element, such as Next on a button that moves users to the next page, or First Name for an edit box.
   *** Value: Provides the value of the specified object such as the value on a slider bar, or the information in an editable text box. Not all objects have a value.
   *** State: Identifies the current condition of the control, such as checked for a checkbox. State advises whether a control can be selected, focused, and/or other types of changeable functionality.
** Microsoft designed the Active Accessibility object model during and after the release of Windows 95. The model is based on roles, each role representing a type of a user interface element. These roles are limited to user interface elements in common use at the time. For example, there is no text object model to help assistive technologies deal split buttons which combine multiple UI elements into one. 真遇到這種狀況,UIA 可以處理嗎??
** MSAA was initially available as an add-on to Windows 95. It has been integrated with all subsequent Windows versions, up to and including Windows 7. 這裡 "up to Win 7" 的說法,意指 win 8 沒有 MSAA 了??
** Microsoft UI Automation (UIA): The successor to MSAA was User Interface Automation (UIA).
** However, since there are still MSAA based applications in existence, bridges are used to allow communication between UI Automation and MSAA applications. So information can be shared between the two APIs, an MSAA-to-UI Automation Proxy and UI Automation-to-MSAA Bridge were developed. The former is a component that consumes MSAA information and makes it available through the UI Automation client API. The latter enables client applications using MSAA access applications that implement UI Automation. 聽起來 MSAA client 也可以用在 UIA application, 但比較好的方式是用 UIA client 去跟 MSAA application/server 互動,將來繼續支援 Win8 才不會有問題??
** Windows Automation API: Starting with Windows 7, Microsoft is packaging its accessibility technologies under a framework called Windows Automation API. MSAA will be part of this framework. 看起來 MSAA 在 Win8 還是存在,只是被包在 Windows Automation API 而已??
** the technology has been used by Test automation software, such as QuickTest Pro, Functional Tester, and SilkTest. 都是要錢的,免費的有嗎?? 除了 White??
////////////////////////////////////////////////////////////////////////////////
--

