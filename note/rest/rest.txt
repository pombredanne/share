= REST (REpresentational State Transfer) =

== 延伸閱讀 ==

 * link:security.html[REST Security]
 * link:sessions.html[Sessions]

== 參考資料 ==

.網站
--
 * http://rest.elkstein.org/[Learn REST: A Tutorial]
--

.文件
--
 * https://en.wikipedia.org/wiki/Representational_state_transfer[Representational state transfer - Wikipedia, the free encyclopedia] ^https://diigo.com/0xyb1[閱讀]^
 * https://en.wikipedia.org/wiki/Restful_Objects[Restful Objects - Wikipedia, the free encyclopedia]
 * https://en.wikipedia.org/wiki/Clean_URL[Clean URL - Wikipedia, the free encyclopedia]
 * http://www.infoq.com/articles/subbu-allamaraju-rest[Describing RESTful Applications] (2008-12-16)
 * http://www.ibm.com/developerworks/webservices/library/ws-restful/[RESTful Web services: The basics] (2008-11-06)
--

.其他文件
--
 * http://stackoverflow.com/questions/6068113/do-sessions-really-violate-restfulness[rest - Do sessions really violate RESTfulness? - Stack Overflow] (2011-05-20)
 * http://appsandsecurity.blogspot.tw/2011/04/rest-and-stateless-session-ids.html[Apps and Security: REST and Stateless Session IDs] (2011-04-09)
 * http://stackoverflow.com/questions/1568834/whats-the-difference-between-rest-restful[architecture - What's the difference between REST & RESTful - Stack Overflow] ^https://diigo.com/0xydg[閱讀]^ (2009-10-14)
--

////////////////////////////////////////////////////////////////////////////////

 * REST and RESTful
   ** RESTful is just used as an adjective describing something that respects the REST constraints.
   ** One can characterise applications conforming to the REST constraints as "RESTful"
   ** Representational state transfer (REST) is a style of software architecture. RESTful is typically used to refer to web services implementing such an architecture. 
 * REST architectural style
   ** Representational State Transfer (REST) is a style of software architecture for distributed systems such as the World Wide Web.
   ** The World Wide Web represents the largest implementation of a system conforming to the REST architectural style. Representational State Transfer is intended to evoke (喚起) an image of how a well-designed Web application behaves: presented with a network of Web pages (a virtual state-machine), the user progresses through an application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.
   ** REST lets intermediate processing by constraining messages be self-descriptive: interaction is stateless between requests, standard methods and media types are used to indicate semantics and exchange information, and responses explicitly indicate cacheability.
 * REST-style architectures consist of clients and servers.
   ** Clients initiate requests to servers; servers process requests and return appropriate responses.
   ** A resource can be essentially any coherent and meaningful concept that may be addressed.
   ** Requests and responses are built around the "transfer of representations of resources". A representation of a resource is typically a document that captures the current or intended state of a resource.
   ** The client begins sending requests when it is ready to make the transition to a new state. While one or more requests are outstanding (未完成的?), the client is considered "in transition". The representation of each application state contains "links" that may be used the next time the client chooses to initiate a new state-transition??
   ** REST's client–server separation of concerns simplifies component implementation, reduces the complexity of connector semantics, improves the effectiveness of performance tuning, and increases the scalability of pure server components.
 * REST facilitates the transaction between web servers by allowing "loose coupling" between different services.
   ** The REST language uses nouns and verbs, and has an emphasis on readability.
   ** REST is less strongly typed than its counterpart, SOAP. Unlike SOAP, REST does not require XML parsing and does not require a message header to and from a service provider. This ultimately uses less bandwidth.
 * The REST architectural style describes the following six constraints applied to the architecture, while leaving the implementation of the individual components free to design:
   ** Client-server - A uniform interface separates clients from servers. This separation of concerns means that, for example, clients are not concerned with data storage, which remains internal to each server, so that the portability of client code is improved. Servers are not concerned with the user interface or user state, so that servers can be simpler and more scalable. Servers and clients may also be replaced and developed independently, as long as the interface between them is not altered. (幾乎含括了剩下的五點)
   ** Stateless - The client–server communication is further constrained by no client context being stored on the server between requests. Each request from any client contains all of the information necessary to service the request, and any session state is held in the client. 在 server-side 建立 sessions，算是違背了 REST??
   ** Cacheable - As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some client–server interactions, further improving scalability and performance.
   ** Layered system - A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling load-balancing and by providing shared caches. They may also enforce security policies.
   ** Code on demand (optional) - Servers can temporarily extend or customize the functionality of a client by the transfer of executable code. Examples of this may include compiled components such as Java applets and client-side scripts such as JavaScript. 很少見...
   ** Uniform interface - The uniform interface between clients and servers simplifies and decouples the architecture, which enables each part to evolve independently.
 * RESTful applications maximize the use of the existing, well-defined interface and other built-in capabilities provided by the chosen network protocol, and minimize the addition of new application-specific features on top of it.
   ** REST was initially described in the context of HTTP, but it is not limited to that protocol??
   ** HTTP has a vocabulary of operations called request methods, most notably: GET, POST, PUT, DELETE. REST uses these operations and other existing features of the HTTP protocol.
   ** SOAP RPC over HTTP, on the other hand, encourages each application designer to define new, application specific operations that supplant HTTP operations. This additive, "re-invention of the wheel" vocabulary — defined on the spot and subject to individual judgment or preference — disregards many of HTTP's existing capabilities, such as authentication, caching, and content-type negotiation.
 * The uniform interface that any REST interface must provide is considered fundamental to the design of any REST service.
   ** Identification of resources - Individual resources are identified in requests, for example using URIs in web-based REST systems. The resources themselves are conceptually separate from the representations that are returned to the client. For example, the server does not send its database, but rather, perhaps, some HTML, XML or JSON that represents some database records expressed, for instance, in Swahili and encoded in UTF-8, depending on the details of the request and the server implementation.
   ** Manipulation of resources through these representations - When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource on the server, provided it has permission to do so.
   ** Self-descriptive messages - Each message includes enough information to describe how to process the message. For example, which parser to invoke may be specified by an Internet media type (previously known as a MIME type). Responses also explicitly indicate their cacheability.
 * Resources & Representations
   ** An important concept in REST is the existence of resources (sources of specific information), each of which is referenced with a global identifier (e.g., a URI in HTTP). In order to manipulate these resources, components of the network (user agents and origin servers) communicate via a standardized interface (e.g., HTTP) and exchange representations of these resources (the actual documents conveying the information).
   ** For example, a resource that represents a circle (as a logical object) may accept and return a representation that specifies a center point and radius, formatted in SVG, but may also accept and return a representation that specifies any three distinct points along the curve (since this also uniquely identifies a circle) as a comma-separated list. 同一個 resource (circle) 可以有不同的 representations。
   ** An application can interact with a resource by knowing two things: the identifier of the resource and the action required—it does not need to know whether there are caches, proxies, gateways, firewalls, tunnels, or anything else between it and the server actually holding the information. The application does, however, need to understand the format of the information (representation) returned, which is typically an HTML, XML, or JSON document of some kind, although it may be an image, plain text, or any other content.


////////////////////////////////////////////////////////////////////////////////

