= Gearman =

 * link:protocol.html[Protocol]

== 參考資料 ==

.網站
--
 * http://gearman.org/[Gearman] ^https://diigo.com/0ywmz[閱讀]^

////////////////////////////////////////////////////////////////////////////////
** Gearman provides a generic application framework to farm out work to other machines or processes that are better suited to do the work. It allows you to do work in parallel, to load balance processing, and to call functions between languages. In other words, it is the nervous (神經) system for how distributed processing communicates. 能跨語言還滿酷的!!
** Multi-language - There are interfaces for a number of languages, and this list is growing. You also have the option to write heterogeneous applications with clients submitting work in one language and workers performing that work in another.
** Flexible - You are not tied to any specific design pattern. You can quickly put together distributed applications using any model you choose, one of those options being Map/Reduce.
** No single point of failure - Gearman can not only help scale systems, but can do it in a fault tolerant way.
** A Gearman powered application consists of three parts: a client, a worker, and a job server. The client is responsible for creating a job to be run and sending it to a job server. The job server will find a suitable worker that can run the job and forwards the job on. The worker performs the work requested by the client and sends a response to the client through the job server. 官網的圖提到 worker 會跟 job server (gearmand) 註冊它能處理什麼 function，其他 client 再跟 job server 說它要執行哪個 function。這裡的 function 跟 language 無關。當有很多 worker 註冊上來時，就可以達到分散處理的效果。
** Gearman provides client and worker APIs that your applications call to talk with the Gearman job server (also known as gearmand) so you don't need to deal with networking or mapping of jobs. Internally, the gearman client and worker APIs communicate with the job server using TCP sockets.
** It does this by using the Gearman client API to send some data associated with a function name, in this case the function “reverse”. This code initializes a client class, configures it to use a job server with add_server (no arguments means use 127.0.0.1 with the default port), and then tells the client API to run the “reverse” function with the workload “Hello world!”.
** At this point the Gearman client API will package up the job into a Gearman protocol packet and send it to the job server to find an appropriate worker that can run the “reverse” function. It is used by a worker object to register a function named “reverse” after it is setup to connect to the same local job server as the client.
** When the job server receives the job to be run, it looks at the list of workers who have registered the function name “reverse” and forwards the job on to one of the free workers. The Gearman worker API then takes this request, runs the function “my_reverse_function”, and sends the result of that function back through the job server to the client. 其中 worker 送結果回 job server 的這一段，似乎也沒用到 worker API??
** As you can see, the client and worker APIs (along with the job server) deal with the job management and network communication so you can focus on the application parts. There a few different ways you can run jobs in Gearman, including background for asynchronous processing and prioritized jobs.
////////////////////////////////////////////////////////////////////////////////
 * https://groups.google.com/forum/?fromgroups#!forum/gearman[Gearman - Google Groups]
--

.文件
--
 * http://en.wikipedia.org/wiki/Gearman[Gearman - Wikipedia, the free encyclopedia]
--

