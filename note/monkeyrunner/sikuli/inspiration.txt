= SIKULI and Android Testing =

== android-robot ==

SIKULI 有個 extension 叫 https://github.com/sikuli/sikuli/tree/develop/extensions/android-robot[android-robot]，不過距現在 (2012-04-14) 已經 7 個月沒有進 code，用起來像https://github.com/sikuli/sikuli/blob/develop/extensions/android-robot/example/android-example.sikuli/android-example.py[這個樣子]：

--------------------------------------------------------------------------------
from org.sikuli.script.android import AndroidScreen

scr = AndroidScreen(10000, ".*") # compatiable with Sikuli Screen/Region
dev = scr.getRobot().getDevice() # Android Monkey device

if not scr.exists("lock.png"):
   dev.press('KEYCODE_POWER', 'DOWN_AND_UP')
scr.dragDrop("lock.png", "speaker.png")
scr.click("google.png")
--------------------------------------------------------------------------------

不過 `android-robot-<version>.jar` 必須要自行編譯才能取得，而且跟最新的 SDK 不搭，出現許多https://answers.launchpad.net/sikuli/+question/177331[套件找不到的情形]。

https://answers.launchpad.net/sikuli/+question/169859[這裡提到] "The Android support is already in the latest build, so it would be in the RC3 as well. Mac accessibility will come later than RC3."，但在 daily build 也找不到。

要等官方直接支援 Android 嗎? 還是想辦法把 monkeyrunner 整進來?? 或是要花時間改 android-robot，好處是不用把手機的畫面投到螢幕上。

android-robot 示範了兩種整合方式：

.`example/run-sikuli-monkey.sh` (從 SIKULI 整合 monkeyrunner)
--------------------------------------------------------------------------------
#!/bin/sh
SIKULI_SCRIPT_JAR=sikuli-script.jar
ANDROID_ROBOT_JAR=android-robot-0.3.jar
ANDROID_SDK=/opt/android-sdk-mac_x86

CLASSPATH=$SIKULI_SCRIPT_JAR:$ANDROID_ROBOT_JAR

java -cp $CLASSPATH \
     -Dandroid.path=$ANDROID_SDK \
     org.sikuli.script.SikuliScript $*
--------------------------------------------------------------------------------

.`exp/run-sikuli-monkey.sh` (從 monkeyrunner 整合 SIKULI)
--------------------------------------------------------------------------------
#!/bin/sh
SIKULI_SCRIPT_JAR=sikuli-script.jar
ANDROID_SDK=/opt/android-sdk-mac_x86
java -cp $SIKULI_SCRIPT_JAR:$ANDROID_SDK/tools/lib/monkeyrunner.jar -Djava.ext.dirs=$ANDROID_SDK/tools/lib -Djava.library.path=$ANDROID_SDK/tools/lib -Dcom.android.monkeyrunner.bindir=$ANDROID_SDK/tools -Dpython.path=$SIKULI_SCRIPT_JAR com.android.monkeyrunner.MonkeyRunnerStarter $*
--------------------------------------------------------------------------------

 * 從 SIKULI 整合 monkeyrunner
   ** 搭配 Sikuli IDE 寫 script 才會直覺，不過這會跟 monkeyrunner 內部的實作細節產生相依，很容易造成只能搭配某個版本 SDK 一起運作的結果。
 * 從 monkeyrunner 整合 SIKULI
   ** 相對簡單，但 Sikuli IDE 裡的 Run (in slow motion) 就不能直接使用。

讓事情變得單純一點，同時操作 desktop 跟 Android 的這件事，交給 Robot Framework 來負責。像 `AndroidScreen` 跟 `MonkeyDevice` 等都應該要可以直接使用。這部份應該可以透過 monkeyrunner 的 plugin 機制餵進去，所以 `from sikuli.Sikuli import *` 要有其他的東西可以替代

基本上 `IRobot` 不適合用在觸控螢幕上，要針對 tap, pinch, swipe, long press 等重新包裝過。


如果要進一步將 SIKULI 的執行環境也整合進來，就會變成這樣子：

--------------------------------------------------------------------------------
$ java -Xmx128M -cp $JYTHON_HOME/jython.jar:$SIKULI_HOME/sikuli-script.jar:$ANDROID_HOME/tools/lib/monkeyrunner.jar:$ANDROID_HOME/tools/lib/guavalib.jar:$ANDROID_HOME/tools/lib/sdklib.jar:$ANDROID_HOME/tools/lib/ddmlib.jar:$ANDROID_HOME/tools/lib/chimpchat.jar -Djava.library.path=$ANDROID_HOME/tools/lib -Dcom.android.monkeyrunner.bindir=$ANDROID_HOME/tools -Dpython.path=$SIKULI_HOME/sikuli-script.jar/Lib com.android.monkeyrunner.MonkeyRunnerStarter
Jython 2.5.2 (Release_2_5_2:7206, Mar 2 2011, 23:12:06) 
[OpenJDK 64-Bit Server VM (Sun Microsystems Inc.)] on java1.6.0_20
>>> from sikuli.Sikuli import *
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named sikuli <1>
>>> 
>>> import sys; sys.path.insert(0, '/home/jeremy/dev/sikuli/sikuli-script.jar/Lib') <2>
>>> from sikuli.Sikuli import *
[info] Sikuli vision engine loaded.
[info] VDictProxy loaded.
>>> 
--------------------------------------------------------------------------------
<1> 顯然 `-Dpython.path` 的設定並沒有被吃進去。
<2> 只要把 `sikuli-script.jar/Lib` 手動加到 `JYTHONPATH` 就可以了。

[NOTE]
.參考資料
================================================================================
 * https://github.com/sikuli/sikuli/tree/develop/extensions/android-robot[sikuli/extensions/android-robot]
================================================================================

== 從 monkeyrunner 整合 SIKULI ==

 * 除非把 `monkeyrunner` 裡面 `-jar` 的用法改掉，否則就得要把 `sikuli-script.jar` 放到 `$ANDROID_SDK/tools/lib` 底下才行。
 * 在 Linux/Mac/Windows 實驗確認，monkeyrunner 確實不吃 `JYTHONPATH` 的設定。怪的是 Linux 下不用額外把 `slikuli-script.jar` 裡面的 `/Lib` 解開放到 `$ANDROID_SDK/tools/lib/Lib` 下，但 Mac/Windows 下如果不放的話，會出現 "ImportError: No module named sikuli" 的錯誤，即便做了 `sys.path.append(os.environ['JYTHONPATH'])` 的動作也沒用。

--------------------------------------------------------------------------------
C:\>monkeyrunner -plugin C:\tmp\monkeyrunner-sikuli.jar C:\tmp\test.sikuli\test.py
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions] Plugin Main through an exception.
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]Traceback (most recent call last):
  File "<string>", line 34, in <module>
  File "<string>", line 6, in _init
ImportError: No module named sikuli <1>

120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.Py.ImportError(Py.java:264)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.imp.import_logic(imp.java:692)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.imp.import_name(imp.java:746)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.imp.importName(imp.java:791)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.ImportFunction.__call__(__builtin__.java:1236)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.PyObject.__call__(PyObject.java:367)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.__builtin__.__import__(__builtin__.java:1207)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.imp.importFromAs(imp.java:869)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.imp.importFrom(imp.java:845)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.pycode._pyx0._init$1(<string>:32)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.pycode._pyx0.call_function(<string>)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.PyTableCode.call(PyTableCode.java:165)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.PyBaseCode.call(PyBaseCode.java:117)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.PyFunction.__call__(PyFunction.java:307)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.pycode._pyx0.f$0(<string>:34)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.pycode._pyx0.call_function(<string>)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.PyTableCode.call(PyTableCode.java:165)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.PyCode.call(PyCode.java:18)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.Py.runCode(Py.java:1197)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.core.Py.exec(Py.java:1241)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.python.util.PythonInterpreter.exec(PythonInterpreter.java:138)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.sikuli.script.android.MonkeyPlugin.apply(Unknown Source)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at org.sikuli.script.android.MonkeyPlugin.apply(Unknown Source)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at com.android.monkeyrunner.ScriptRunner.run(ScriptRunner.java:100)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at com.android.monkeyrunner.MonkeyRunnerStarter.run(MonkeyRunnerStarter.java:77)
120508 16:00:54.813:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]at com.android.monkeyrunner.MonkeyRunnerStarter.main(MonkeyRunnerStarter.java:189)
120508 16:00:54.825:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions] Script terminated due to an exception
--------------------------------------------------------------------------------
<1> 不知道為什麼在 Windows 下會特別去存取 `sikuli` module，這個情形在 Linux/Mac 下是沒有的。

--------------------------------------------------------------------------------
$ monkeyrunner -plugin target/monkeyrunner-sikuli.jar test.sikuli/test.py
Init MonkeyRunner/Sikuli Env. PYTHONPATH = ['/Users/wfbss/dev/android-sdk/tools/lib/monkeyrunner.jar', '/Users/wfbss/dev/workspace/monkeyrunner-sikuli/test.sikuli', '/Users/wfbss/dev/workspace/monkeyrunner-sikuli/target/monkeyrunner-sikuli.jar', '/Users/wfbss/dev/android-sdk/tools/lib/Lib', '/Users/wfbss/dev/android-sdk/tools/lib/jython.jar/Lib', '__classpath__', '__pyclasspath__/']
120509 11:03:41.885:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions] Plugin Main through an exception.
120509 11:03:41.885:S [main] [com.android.monkeyrunner.MonkeyRunnerOptions]Traceback (most recent call last):
  File "<string>", line 34, in <module>
  File "<string>", line 6, in _init
ImportError: No module named sikuli
--------------------------------------------------------------------------------

後來發現 "ImportError: No module named sikuli"，是因為 `initenv.py` 裡的這行程式造成的：

 from org.sikuli.script.android import AndroidScreen

原因是因為 `org.sikuli.script.android.AndroidScreen` 已經更名為 `com.android.monkeyrunner.sikuli.AndroidScreen`。這裡會報錯 `sikuli` 而且又說 module，很容易造成誤解... XD!!

但後來 Windows 下的問題真的是要把 monkeyrunner-plugin 也一併放到 `%ANDROID_HOME%/tools/lib` 底下才行。這一點跟 Unix-like 不同，但相同的是 `sikuli-script.jar/Lib` 不用特別解到 `$ANDROID_HOME/tools/lib/Lib` 底下，應該是 class loader 的關係吧？

環境內同時有 JRE 6/7 時，由於 `monkeyrunner.bat` 好像不會看 `PATH` 來找 `java.exe`，只好對 `monkeyrunner-sikuli.bat` 跟 `monkeyrunner.bat` 動手腳。

`monkeyrunner-sikuli.bat`:

 if defined PROGRAMFILES(X86) set SIKULI_JAVA_EXE="C:\Program Files (x86)\Java\jre6\bin\java.exe"

`monkeyrunner.bat`:
 
 if defined SIKULI_JAVA_EXE set java_exe="C:\Program Files (x86)\Java\jre6\bin\java.exe"

== 怎麼在 RIDE 與 Sikuli/MonkeyRunner 間交換資料 ==

 * Run Monkeyrunner Script 要能接受 keyword arguments。資料交換用 JSON 避開 environment variable 可能不吃 Unicode 的問題
 * 轉成 JSON 寫到 invars 後，再從 monkeyrunner 讀出來，讀出來後從 Sikuli script 裡要怎麼存取? rfvars[key] 嗎?
 * 同樣的，有回傳值也可以寫回 outvars，用 rfreturn()

== 參考資料 ==

 * http://dtmilano.blogspot.com/2012/01/automated-android-testing-using-sikuli.html[Diego Torres Milano's blog: Automated Android testing using Sikuli] (2012-01-21) - 展示 SIKULI 解 emulator 上的 pattern lock。
 * http://i-miss-erin.blogspot.com/2010/01/automated-test-in-android-by-sikuli.html[Reading, Writing and Arithmetic: Automated test in Android by Sikuli] (2010-01-25) - 0xlab 的 Erin Yueh 展示用 SIKULI 搭配 androidscreencast 做測試；官網http://sikuli.org/blog/2010/02/04/sikuli-is-on-android/[另一篇文章]也引用了這個做法。
 * http://www.51testing.com/?uid-49689-action-viewspace-itemid-213806[如何保存Sikuli執行結果 - Quality Trackers] (2010-05-12)

== 學習筆記 ==

 * 不走 instrumentation，在 Android code 外圍控制 emulator/device。包括安裝 app、送 touch/press event、拍 screenshot 等。
 * android-robot 不是抓投射到桌面的畫面，這可以避開高解析度設備無法一次顯示在桌面的問題，而且也不較不會受到桌面其他應用程式的干擾。
 * 目前走圖像比對的方式有一點 performance issue，首先是 SIKULI 比對圖像的速度，但更花時間的是從 emulator/device 取出畫面的這個動作，通常要花 2 ~ 3 秒左右。
 * Automation 的價值是 regression 找出 side effect，手動測試過程中將每個畫面都拍下來（每台手機都要走一次）。只要圖檔命名得當，每一台設備都有一組圖像，之後只要帶不同的 device 參數進去就可以走完相同的測試。
 * 螢幕大小不同的測試，更是要 visual 的圖像比對。
 * 有圖跟文字時，儘量抓圖就好，除了因為字可能會被翻譯之外，另外的考量是圖跟文字的 "相對位置" 可能會因螢幕大小而異。
 * Sikuli 似乎不支援https://bugs.launchpad.net/sikuli/+bug/673995[去背]的比對，目前的解法就是圖不要抓滿，儘量不要沾到有背景的地方。沾到一點點沒關係。
 * 各家手機的介面設計不同，就算是走 rooted/component-based，能夠一體適用的機會還是很小。況且有很多東西是控制不到的，因為沒有特定的 app 可以 instrument。
 * Image-based 要重用在 L10N 比較有困難？只要定位的基準儘量不拍圖即可。基本上 L10N 不 verify function，但會拍下過程中所有的畫面。
 * SIKULI 原本有太多 global functions 不適合用在 touchable device，考慮只引入（外加）下面幾個基本的操作：
   ** `exists(screenshot)`
   ** `find(screenshot)`
   ** `findAll(screenshot)`
   ** `wait(screenshot)`
   ** `waitVanish(screenshot)`
   ** `dragDrop(screenshot1, screenshot2)`
   ** `type(text)`
   ** `type(screenshot, text)`
   ** `tap(screenshot)`
   ** `longPress(screenshot)`
   ** `press(key)`
   ** `shell(command)`
   ** `takeSnapshot()`

