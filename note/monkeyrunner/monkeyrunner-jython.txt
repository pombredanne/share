= [monkeyrunner] Jython 執行環境 =

--------------------------------------------------------------------------------
$ pwd; ls
/tmp/mr
dummy.py
$ monkeyrunner
[OpenJDK 64-Bit Server VM (Sun Microsystems Inc.)] on java1.6.0_20
>>> import sys
>>> sys.path
['/path/to/android_home/tools/lib/monkeyrunner.jar', '/path/to/android_home/tools/lib/Lib', '/path/to/android_home/tools/lib/jython.jar/Lib', '__classpath__', '__pyclasspath__/'] <1>
>>>
>>> import dummy
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named dummy
>>>
>>> sys.path.append(os.getcwd()) <2>
>>> import dummy 
>>> dummy.__file__
'/tmp/mr/dummy.py'
--------------------------------------------------------------------------------
<1> 預設的 module search path 並不包含 current working directory。把 CWD 加到 `sys.path` 就可以了。

== 從 Jython 帶出 monkeyrunner 的執行環境 ==

觀察 `monkeyrunner` 的寫法：

--------------------------------------------------------------------------------
...
# need to use "java.ext.dirs" because "-jar" causes classpath to be ignored
# might need more memory, e.g. -Xmx128M
exec java -Xmx128M $os_opts $java_debug -Djava.ext.dirs="$frameworkdir:$swtpath" -Djava.library.path="$libdir" -Dcom.android.monkeyrunner.bindir="$progdir" -jar "$jarpath" "$@"
--------------------------------------------------------------------------------

執行結果：

--------------------------------------------------------------------------------
$ java -Xmx128M -Djava.ext.dirs=$ANDROID_HOME/tools/lib:$ANDROID_HOME/tools/lib/x86_64 -Djava.library.path=$ANDROID_HOME/tools/lib -Dcom.android.monkeyrunner.bindir=$ANDROID_HOME/tools -jar $ANDROID_HOME/tools/lib/monkeyrunner.jar
Jython 2.5.0 (Release_2_5_0:6476, Jun 16 2009, 13:33:26) <1>
[OpenJDK 64-Bit Server VM (Sun Microsystems Inc.)] on java1.6.0_20
>>> from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
>>> device = MonkeyRunner.waitForConnection()
>>> 
--------------------------------------------------------------------------------
<1> monkeyrunner 預設搭配 SDK 內附的 Jython 2.5.0。

其中 `monkeyrunner.jar/META-INF/MANIFEST.MF` 的內容如下：

--------------------------------------------------------------------------------
Manifest-Version: 1.0
Created-By: 1.6.0_26 (Sun Microsystems Inc.)
Main-Class: com.android.monkeyrunner.MonkeyRunnerStarter
--------------------------------------------------------------------------------

把 `-jar monkeyrunner.jar` 換成 `org.python.util.jython`，沒有先跑過 http://www.java2s.com/Open-Source/Android/android-core/platform-sdk/com/android/monkeyrunner/MonkeyRunnerStarter.java.htm[`MonkeyRunnerStarter`]，就會遇到 `NullPointerError`；但只要執行過 `MonkeyRunnerStarter` 就可以了：

--------------------------------------------------------------------------------
$ java -Xmx128M -Djava.ext.dirs=$ANDROID_HOME/tools/lib:$ANDROID_HOME/tools/lib/x86_64 -Djava.library.path=$ANDROID_HOME/tools/lib -Dcom.android.monkeyrunner.bindir=$ANDROID_HOME/tools org.python.util.jython
Jython 2.5.0 (Release_2_5_0:6476, Jun 16 2009, 13:33:26) 
[OpenJDK 64-Bit Server VM (Sun Microsystems Inc.)] on java1.6.0_20
Type "help", "copyright", "credits" or "license" for more information.
>>> from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
>>> device = MonkeyRunner.waitForConnection()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
	at com.android.monkeyrunner.MonkeyRunner.waitForConnection(MonkeyRunner.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)

java.lang.NullPointerException: java.lang.NullPointerException
>>> 
>>> from com.android.monkeyrunner import MonkeyRunnerStarter
>>> MonkeyRunnerStarter.main([])  
Jython 2.5.0 (Release_2_5_0:6476, Jun 16 2009, 13:33:26) <1>
[OpenJDK 64-Bit Server VM (Sun Microsystems Inc.)] on java1.6.0_20
>>> from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
>>> device = MonkeyRunner.waitForConnection()
>>> 
--------------------------------------------------------------------------------
<1> `MonkeyRunnerStart` 執行過後會自動帶出 Jython Interpreter。

直接拿 `MonkeyRunnerStarter` 來當 main class，換上標準的 Jython，只引入必要的 Jar 檔：（按 https://github.com/sikuli/sikuli/blob/develop/extensions/android-robot/src/main/java/org/sikuli/script/android/AndroidScreen.java[android-robot] 的做法，monkeyrunner 只用到 4 個 `.jar` 檔 - `guavalib.jar`、`sdklib.jar`、`ddmlib.jar` 還有 `chimpchat.jar`）

--------------------------------------------------------------------------------
$ java -Xmx128M -cp $JYTHON_HOME/jython.jar:$ANDROID_HOME/tools/lib/monkeyrunner.jar:$ANDROID_HOME/tools/lib/guavalib.jar:$ANDROID_HOME/tools/lib/sdklib.jar:$ANDROID_HOME/tools/lib/ddmlib.jar:$ANDROID_HOME/tools/lib/chimpchat.jar -Djava.library.path=$ANDROID_HOME/tools/lib -Dcom.android.monkeyrunner.bindir=$ANDROID_HOME/tools com.android.monkeyrunner.MonkeyRunnerStarter
Jython 2.5.2 (Release_2_5_2:7206, Mar 2 2011, 23:12:06) <1>
[OpenJDK 64-Bit Server VM (Sun Microsystems Inc.)] on java1.6.0_20
>>> from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
>>> device = MonkeyRunner.waitForConnection()
>>>
--------------------------------------------------------------------------------
<1> 叫用到標準的 Jython Interpreter，版本是 2.5.2。這個時候可以吃 `JYTHONPATH` 或 `-Dpython.path` 的設定嗎?

To get access to monkeyrunner's runtime environment, the startup class can implement com.google.common.base.Predicate<PythonInterpreter>.

== 延伸閱讀 ==

 * link:../jython/jython.html[Jython]

== 參考資料 ==

 * http://blog.csdn.net/robinzhou/article/details/6790098[monkeyrunner學習淺析-與python的關係 - robinzhou的專欄] (2011-09-19)
 * http://article.yeeyan.org/view/37503/164523[譯言網 | Monkeyrunner 使用說明] (2011-01-09)

