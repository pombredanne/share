= link:ios.html[iOS] / Getting Started =
:title: [iOS] 新手上路

 * http://www.apress.com/9781430236054[Apress - Beginning iOS 5 Development] (2011.12)
 * http://www.apress.com/9781430241881[Apress - Learn Objective-C on the Mac, 2nd Edition] (2012.07)

== 參考資料 ==

 * http://forums.macrumors.com/showthread.php?t=1464493[iOS development: which book to start with? - MacRumors Forums] (2012-10-08) - 每年 WWDC 的 "What's new in Objective-C" 場次，可以看 Objective-C 的演進。
 * http://m.techrepublic.com/blog/ios-app-builder/five-books-that-every-apple-ios-developer-should-own/153[Five books that every Apple iOS developer should own | TechRepublic] (2012-08-16) - Programming in Objective-C (Stephen Kochan) 跟 iOS Programming: The Big Nerd Ranch Guide 依然榜上有名。
 * http://www.quora.com/Book-Recommendations/What-is-the-best-book-for-starting-iOS-5-development-from-the-ground-up-with-minimal-code-knowledge[Book Recommendations: What is the best book for starting iOS 5 development from the ground up, with minimal code knowledge? - Quora] (2011-10-22) - Big Nerd Ranch 跟 Aaron Hillegass 的書，另外 WWDC 也不能錯過。
 * http://stackoverflow.com/questions/3403049/best-book-resources-for-learning-ios-programming[iphone - Best book / resources for learning iOS programming? - Stack Overflow] (2010-10-29) - 推薦 Programming in Objective-C 2.0 (Stephen Kochan) 跟 Beginning iPhone Development (Dave Mark, Jeff LaMarche)
 * http://www.markj.net/iphone-development-books-learning-ios-programming/[iPhone Development Books 1: Learning iOS Programming] (2010-12-04) - 推薦 Beginning iPhone N Development（Dave Mark, Jeff LaMarche；入門）、iPhone Programming: The Big Nerd Ranch Guide（偏 HowTo）、The iPhone Developer's Cookbook（Erica Sadun；參考手冊），至於 Objective-C 則推薦 Learn Objective-C on the Mac（入門） 及 Programming in Objective-C (Steve Kochan；參考手冊)

////////////////////////////////////////////////////////////////////////////////

== Class 1 ==

Mick Tsai, Joey Ku (iTeam/Consumer), Zi, Simon
TableView 很強
Objective-C 2.0
`.m`, mix C++ (.mm) and Objective-C (.m), header file (.h)
NSLog - output to debug console
@interface - define interface
ID - void*, non-strong type??
NS Object - top object, 
call method = send message, 可以 compile
[receiver message:parameter]
Int nHP = [myMage getHP];
[theMonster takeDamage:[myMage calculateDPS]]
(BOOL) writeToFile: (NSString*) _path andAutomatically: (BOOL) _useAuxliaryFile
                                      ^^^^^^^^^^^^^^^^ 可省略，說明 _useAuxliaryFile 的作用
id aObj = nil, 可以送 message 給 nil，因為送一個 message 給 nil 不會有事情發生。compile 會過，而且 runtime 也沒事
-(int) methodName - instance member
+(int) methodName - class member
Objective-C 不支援 default value，跟 Java 一樣
method 都是 public，沒有 private 的概念。可以 hide 到 .m 裡讓 caller 看不到??
pointer...
C struct...
習慣用 YES (true), NO (false), 例如 if (flag == YES)
-id init; // constructor, 可以有多個
-(void) dealloc; // destructor
data member 都是 private，可以透過 @property 跟 @synthesize，產生 getter/setter

@interface Weapon: NSObject {
  int _shootingRange;
  NSString *nameOfWeapon;
}

@property {nonatomic) int ShootingRange:
...
@end

#include "Weapon.h"


@implementation Weapon

@systhesize ShootingRange = _nShootingRange;
@systhesize nameOfWeapon;

-(void) setShootingRange:(int)ShootingRange
{
 ...
}
-(int) ShootingRange {
}

.h - interface, .m - implementation

ARC = string (copy) / weak (retain), 避免舊有 retain cycle 的問題
不是 garbage collection，但有 auto release
delegate = callback
protocol = interface

learn Objective-C from Java...

Objective-C 基本上不支援多重繼承

selector 跟 callback 很類似，可以用來操作 main thread 的 UI
NS stands for??

self = [super init]; --> super()
introspection - 一些 runtime 檢查型態的 syntax 而已，isKindOfClass, respondsToSelector...

NSString, NSMutableString, NSDate, NSNumber, NSValue, NSArrary, NSMutableArray, NSDictionary, NSOrderedSet, ... 全部都冠上 NS
NSxxx 是 framework 最頂層，id 則是跟 framework 無關...


Enumeratoin

== Class 2 ==

 * Interface Builder
 * Storyboard - iOS 5 用來設計 UI 的東西. .xib (UI, 以及跟 view controller 的關係) nib??
   ** 可以看出 view 間的關係
   ** navigation controller 就是程式上方藍色的 bar，有 <上一步] 的功能等
 * Universal App - 可以同時跑在 iPhone/iPad 上
 * Outlet - IBOutlet and IBAction (IB = Interface Builder)
 * UITableView 幾乎所有非 game 的程式都會用到
 * Use Automatic Reference Counting (ARC)
 * main.m - entry point, 產生 UIApplicationMain, xxx-info.plist 有設定 main storyboard (initial view controller)
 * Control 拖拉到 .h 選 Action 會產生 method, 選 Outlet 會產生 property，之後就可以從 self.xxx 裡直接操作 xxx 這個元件。
 * Objective-C 的 function 後面固定要加 :，就算是沒有參數也一樣，例如 `sayHello:`。
 * iOS Provisioning 
 * Keychain -> 我的憑證. 發 CSR (Certificate Signing Request) 產生 Development Certicate 存入 Keychain。Provisioning Profile 裡包含 development certificate 透過 XCode Organizer 送到 device 上。
 * Organizer 會要求登入 Apple ID, 直接按 Submit Request -> Use for Development
 * XCode -> Build Settings > Code Sigining
 * development/distribution certificate，後者會用來上架.
 * AppDelegate.m 可以在 status transition 時安插對應的動作。

#define IBAction void
#define IBOutlet

== Class 3 ==

 * Manual retain-release (MRR)
 * Automatic reference counting (ARC)
 * GC 只有 Mac 支援，但 iOS 沒有。
 * 記憶體管理這麼複雜，真不䁱得寫 Objective-C 的人是怎麼寫出遊戲的??
 * aut

== Class 4 ==

 * AddressViewController extends ViewController (with XIB)
 * self.window.rootViewController = [[AddressViewController alloc] init]

# pragma mark - UIAlertViewController

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField
{
  [UIView beginAnimations:@"showKeyboard" context:nil];
  [UIView setAnimationBeginsFromCurrentState:YES];
  [UIView setAnimationDuration:0.3];
  CGRect frame = self.view.frame;
  frame.origin.y -=82;
  self.view.frame = frame; // 因為 assignment 是 by value??

  [UIView commitAnimations];
  return YES;
}
   
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
  [UIView beginAnimations:@"showKeyboard" context:nil];
  [UIView setAnimationBeginsFromCurrentState:YES];
  [UIView setAnimationDuration:0.3];
  CGRect frame = self.view.frame;
  frame.origin.y +=82;
  self.view.frame = frame;

  [UIView commitAnimations];
  [textField resignFirstResponder]; // 讓 textField 失去 focus

  NSString * msg = [NSString stringWithFormat: @"Are you ready to go to %@ ?", textField.text]
  UIAlertView * alert = [[UIAlertView alloc] initWithTitle:@"Browser"
                        message:msg delegate:self cancelButtonTitle:@"No" otherButtonTitle:@"Yes", nil]
  [alert show]

  return YES;
}

#pragma mark - UIAlertViewDelegate

- (void)alertView:(UIAlertView *)alertView ...
{


@interface 

- (void)openURL:(
{
    NSLog(@"open url: %@", url);
    UIViewerController * vcWeb = [[WebViewController alloc] init];
    [self.vc
}

 * File's owner

////////////////////////////////////////////////////////////////////////////////

