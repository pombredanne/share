= IoC (Inverse of Control) =
<<TableOfContents>>

== Overview ==

請在這裡陳述主題的概要

== Practices ==

 * IoC 是一種概念, 可以用 DI Pattern 來實現

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==

 * IoC在容器的角度，可以用這麼一句好萊塢名言來代表："Don't call me, I'll call you." 以程式的術語來說的話，就是「不要向容器要求您所需要的（物件）資源，容器會自動將這些物件給您！」。IoC要求的是容器不侵入應用程式本身，應用程式本身提供好介面，容器可以透過這些介面將所需的資源注至程式中，應用程式不向容器主動要求資源，故而不會依賴於容器的元件，應用程式本身不會意識到正被容器使用，可以隨時從容器中脫離轉移而不用作任何的修改，而這個特性正是一些業務邏輯中間件最需要的。
 * Lightweight IoC 是非常必要的, 就拿 `FileUtil.saveInputStreamAsMd5File()` 來看, 在程式裡頭用到它就會變得難以測試, 把它放到 constructor 也是怪怪的, 如果可以直接注入 private setter, 就很完美...

