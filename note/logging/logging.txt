= Logging =

[quote,'http://logging.apache.org/log4j/1.2/[Apache Log4j]']
________________________________________________________________________________
Inserting log statements into your code is a 'low-tech' method for debugging it. It may also be 'the only way' because debuggers are not always available or applicable. This is often the case for distributed applications.

Logging equips the developer with detailed 'context' for application failures. On the other hand, testing provides quality assurance and confidence in the application. Logging and testing should not be confused. They are 'complementary'. When logging is wisely used, it can prove to be an essential tool.
________________________________________________________________________________

不同語言實作 logging 的方式不同：

 * link:../java/development/logging.html[Java]
 * link:../python/development/logging.html[Python]

== 參考資料 ==

////////////////////////////////////////////////////////////////////////////////

 * 儘可能測，但真的發生問題時, logging 可以縮短事後 debugging 的時間。所以有了 UT 後，logging 還是不能省。
 * 一個 class 除了我們常用與 class 同名的 logger 之外, 事實上還可以有其他 logger, 例如 !HttpClient 將 logging 區分為 context logging 與 wire logging, 前者以 class 為名, 每個 class 都有一個. 至於 wire logging 只有 `httpclient.wire.content` 與 `httpclient.wire.header` 兩個 logger. 最具體的應用就是另外增設一個 audit logger, 如此就可以透過 auditLogger.debug() 來記載存取 __'''(採用 debug 而非 info 的原因是, 保留 info 給真正重要的訊息 (例如總結, 成功或失敗等...), 因此平常即使沒有針對 auditLogger 做開啟, 我們還是可以看到訊息)'''__...
 * 可以利用前置的空白, 製造成縮排的效果
 * 想要安插 ">>>>>>>>" 類似的符號去偵測有沒有執行到某個點時, 最好用 debugging 或 logging 的方式來取代. (通常使用者測試完畢後不會將 ">>>>>>" 這些輸出拿掉)

////////////////////////////////////////////////////////////////////////////////

