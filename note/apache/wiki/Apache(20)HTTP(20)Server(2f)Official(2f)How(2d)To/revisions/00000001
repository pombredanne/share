= Apache HTTP Server 2.2 How-To / Tutorials =
<<TableOfContents>>

== Authentication, Authorization and Access Control ==
http://httpd.apache.org/docs/2.2/howto/auth.html @2009/02/21

__'''Authentication is any process by which you verify that someone is who they claim they are. Authorization is any process by which someone is allowed to be where they want to go, or to have information that they want to have.'''__

=== Related Modules and Directives ===

There are three types of modules involved in the authentication and authorization process. __You will usually need to choose at least one module from each group.__

 * Authentication type (see the `AuthType` directive)
   * `mod_auth_basic`
   * `mod_auth_digest`
 * Authentication provider
   * `mod_authn_alias`
   * `mod_authn_anon`
   * `mod_authn_dbd`
   * `mod_authn_dbm`
   * `mod_authn_default`
   * `mod_authn_file`
   * `mod_authnz_ldap`
 * Authorization (see the `Require` directive)
   * `mod_authnz_ldap`
   * `mod_authz_dbm`
   * `mod_authz_default`
   * `mod_authz_groupfile`
   * `mod_authz_owner`
   * `mod_authz_user`

__The module `mod_authnz_ldap` is both an authentication and authorization provider. The module `mod_authn_alias` is not an authentication provider in itself, but allows other authentication providers to be configured in a flexible manner.__

__'''The module http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html[mod_authz_host] provides authorization and access control based on hostname, IP address or characteristics of the request, but is not part of the authentication provider system.'''__

You probably also want to take a look at the http://httpd.apache.org/docs/2.2/howto/access.html[Access Control] howto, which discusses the various ways to control access to your server.

=== Introduction ===

If you have information on your web site that is sensitive or intended for only a small group of people, the techniques in this article will help you make sure that the people that see those pages are the people that you wanted to see them.

This article covers the "standard" way of protecting parts of your web site that most of you are going to use.

__'''Note: If your data really needs to be secure, consider using `mod_ssl` in addition to any authentication.'''__

=== The Prerequisites ===

The directives discussed in this article will need to go either in your main server configuration file (typically in a `<Directory>` section), or in per-directory configuration files (`.htaccess` files).

If you plan to use `.htaccess` files, you will need to have a server configuration that permits putting authentication directives in these files. __This is done with the `AllowOverride` directive, which specifies which directives, if any, may be put in per-directory configuration files.__

Since we're talking here about authentication, you will need an `AllowOverride` directive like the following:

 {{{
AllowOverride AuthConfig
 }}}

Or, if you are just going to put the directives directly in your main server configuration file, you will of course need to have write permission to that file.

And you'll need to know a little bit about the directory structure of your server, in order to know where some files are kept. This should not be terribly difficult, and I'll try to make this clear when we come to that point.

=== Getting it working ===

Here's the basics of password protecting a directory on your server.

First, you need to create a password file. Exactly how you do this will vary depending on what authentication provider you have chosen. More on that later. To start with, we'll use a text password file.

__This file should be placed somewhere not accessible from the web. This is so that folks cannot download the password file.__ For example, if your documents are served out of `/usr/local/apache/htdocs` you might want to put the password file(s) in `/usr/local/apache/passwd`.

__To create the file, use the `htpasswd` utility that came with Apache.__ This will be located in the `bin` directory of wherever you installed Apache. If you have installed Apache from a third-party package, it may be in your execution path.

To create the file, type:

 {{{
htpasswd -c /usr/local/apache/passwd/passwords rbowen
 }}}
 
htpasswd will ask you for the password, and then ask you to type it again to confirm it:

 {{{
# htpasswd -c /usr/local/apache/passwd/passwords rbowen <-- 其中 "-c" 不能重複使用, 否則舊資料會被洗掉
New password: mypassword
Re-type new password: mypassword
Adding password for user rbowen
 }}}

If `htpasswd` is not in your path, of course you'll have to type the full path to the file to get it to run. With a default installation, it's located at `/usr/local/apache2/bin/htpasswd`

Next, you'll need to configure the server to request a password and tell the server which users are allowed access. You can do this either by editing the `httpd.conf` file or using an `.htaccess` file. For example, if you wish to protect the directory `/usr/local/apache/htdocs/secret`, you can use the following directives, either placed in the file `/usr/local/apache/htdocs/secret/.htaccess`, or placed in `httpd.conf` inside a `<Directory /usr/local/apache/apache/htdocs/secret>` (針對實體路徑做設定) section.

 {{{
AuthType Basic
AuthName "Restricted Files"
# (Following line optional)
AuthBasicProvider file <-- 無論是 file 或下面的 dbm, 都有 "不能在多台機器間分享" 的限制
AuthUserFile /usr/local/apache/passwd/passwords
Require user rbowen <-- 特定使用者
 }}}

Let's examine each of those directives individually. __The `AuthType` directive selects that method that is used to authenticate the user. The most common method is `Basic`, and this is the method implemented by `mod_auth_basic`. It is important to be aware, however, that '''Basic authentication sends the password from the client to the server unencrypted. This method should therefore not be used for highly sensitive data, unless accompanied by `mod_ssl`. (下面 Possible problems 一節會說明 Basic 驗證方式的問題, 但嚴格來說那並不是 是 Basic 本身的錯, "資料加密" 與 "身份驗證" 本來就是兩個不同的工作)''' Apache supports one other authentication method: `AuthType Digest`. This method is implemented by `mod_auth_digest` and is much more secure. Most recent browsers support Digest authentication.__

__按 http://en.wikipedia.org/wiki/Basic_access_authentication[Wikipedia] 的說法與實驗的結果, 確實 client 端會不斷地重送帳號與密碼. 例如以帳號/密碼 `admin/admin` 登入之後, 之後每個 request 都會有個 `Authorization = "Basic YWRtaW46YWRtaW4="` 的 header, 這裡的 "YWRtaW46YWRtaW4=" 用 Base64 反解後正是 "admin:admin"!! '''不過在沒有搭配 SSL 運作的狀況下, Basic 真的比自訂表單驗證的方式還糟, 至少帳號/密碼只送出一次, 之後就只交換 session id 了, 雖然 session id 也可能被竊取, 但 session 具有時效性, 總比 Basic 將整個帳號/密碼全都漏出來好多了...'''__

__'''突然想到 https + Basic 驗證的組合, 很適合拿來跟 Google Chrome 之類的瀏覽器做搭配, 使用者在第一次開啟應用程式時才需要登入, 之後也不會有 session timeout 的問題[...] @2009/03/25'''__

__The `AuthName` directive sets the ''Realm'' to be used in the authentication. '''The realm serves two major functions. First, the client often presents this information to the user as part of the password dialog box. Second, it is used by the client to determine what password to send for a given ''authenticated area''.'''__

__So, for example, once a client has authenticated in the "Restricted Files" area, '''it will automatically retry the same password for any area on the ''same server'' that is marked with the "Restricted Files" Realm. (參考下面 Possible problems 一節, client 真的會不斷地重送帳號密碼)''' Therefore, you can prevent a user from being prompted more than once for a password by letting multiple restricted areas share the same realm.__ Of course, for security reasons, the client will always need to ask again for the password whenever the hostname of the server changes.

__'''由於 HTTP Basic 的支援度比較廣 (不見得每個應用程式都支援 HTTP Digest, 例如 MantisBT 就沒有), 將所有服務安排在同一個 URL space 下, 再搭配 SSL 傳輸, 就可以達成不同應用程式間的 SSO 了. @2009/03/13'''__

The `AuthBasicProvider` is, in this case, optional, since `file` is the default value for this directive. You'll need to use this directive if you are choosing a different source for authentication, such as `mod_authn_dbm` or `mod_authn_dbd`.

The `AuthUserFile` directive sets the path to the password file that we just created with `htpasswd`. If you have a large number of users, it can be quite slow to search through a plain text file to authenticate the user on each request. __Apache also has the ability to store user information in fast database files. The `mod_authn_dbm` module provides the `AuthDBMUserFile` directive. These files can be created and manipulated with the `dbmmanage` program.__ Many other types of authentication options are available from third party modules in the Apache Modules Database.

Finally, the `Require` directive provides the authorization part of the process by setting the user that is allowed to access this region of the server. In the next section, we discuss various ways to use the `Require` directive.

=== Letting more than one person in ===

The directives above only let one person (specifically someone with a username of `rbowen`) into the directory. In most cases, you'll want to let more than one person in. This is where the `AuthGroupFile` comes in.

If you want to let more than one person in, you'll need to create a group file that associates group names with a list of users in that group. The format of this file is pretty simple, and you can create it with your favorite editor. The contents of the file will look like this:

 {{{
GroupName: rbowen dpitts sungo rshersey
 }}}

That's just a list of the members of the group in a long line separated by spaces.

To add a user to your already existing password file, type:

 {{{
htpasswd /usr/local/apache/passwd/passwords dpitts
 }}}

You'll get the same response as before, but it will be appended to the existing file, rather than creating a new file. (It's the `-c` that makes it create a new password file).

Now, you need to modify your `.htaccess` file to look like the following:

 {{{
AuthType Basic
AuthName "By Invitation Only"
# Optional line:
AuthBasicProvider file
AuthUserFile /usr/local/apache/passwd/passwords
AuthGroupFile /usr/local/apache/passwd/groups
Require group GroupName
 }}}

Now, anyone that is listed in the group `GroupName`, and has an entry in the password file, will be let in, if they type the correct password.

There's another way to let multiple users in that is less specific. Rather than creating a group file, you can just use the following directive:

 {{{
Require valid-user
 }}}

Using that rather than the `Require user rbowen` line will allow anyone in that is listed in the password file, and who correctly enters their password. You can even emulate(效法) the group behavior here, by just keeping a separate password file for each group. (意指 `AuthUserFile` 可以下達多次[?]) The advantage of this approach is that Apache only has to check one file, rather than two. The disadvantage is that you have to maintain a bunch of password files, and remember to reference the right one in the `AuthUserFile` directive.

=== Possible problems ===

__Because of the way that Basic authentication is specified, '''your username and password must be verified every time you request a document from the server. This is even if you're reloading the same page, and for every image on the page (if they come from a protected directory; 雖然說 client 會不斷地送出帳號與密碼, 但 server 端卻也跟著不斷地重複做驗證, 這個機制也未免太陽春了吧? 唯一的好處是密碼修改之後會立即生效. 難道 LDAP 就能應付這種頻繁地查詢嗎[?])'''.__ As you can imagine, this slows things down a little. The amount that it slows things down is proportional to the size of the password file, because it has to open up that file, and go down the list of users until it gets to your name. And it has to do this every time a page is loaded.

A consequence of this is that there's a practical limit to how many users you can put in one password file. This limit will vary depending on the performance of your particular server machine, but you can expect to see slowdowns once you get above a few hundred entries, and may wish to consider a different authentication method at that time.

=== Alternate password storage ===

Because storing passwords in plain text files has the above problems, you may wish to store your passwords somewhere else, such as in a database.

`mod_authn_dbm` and `mod_authn_dbd` are two modules which make this possible. Rather than selecting `AuthBasicProvider` file, instead you can choose `dbm` or `dbd` as your ''storage format''.

To select a dbd file rather than a text file, for example:

 {{{
<Directory /www/docs/private>
AuthName "Private"
AuthType Basic
AuthBasicProvider dbm
AuthDBMUserFile /www/passwords/passwd.dbm
Require valid-user </Directory>
 }}}

Other options are available. Consult the `mod_authn_dbm` documentation for more details.

=== More information ===

You should also read the documentation for `mod_auth_basic` and `mod_authz_host` which contain some more information about how this all works. `mod_authn_alias` can also help in simplifying certain authentication configurations.

The various ciphers supported by Apache for authentication data are explained in http://httpd.apache.org/docs/2.2/misc/password_encryptions.html[Password Encryptions].

And you may want to look at the http://httpd.apache.org/docs/2.2/howto/access.html[Access Control] howto, which discusses a number of related topics.

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==
