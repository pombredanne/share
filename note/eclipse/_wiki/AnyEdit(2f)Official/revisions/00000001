= AnyEdit / Official =
<<TableOfContents>>

== Home ==
http://andrei.gmxhome.de/anyedit/index.html @2009/10/29

!AnyEdit plugin adds several new tools to the context menu of text-based Eclipse editors, to output consoles, to Eclipse main menu and editor toolbar. !AnyEdit contributes also Import/Export working sets wizards.

 * http://andrei.gmxhome.de/anyedit/features.html[What can AnyEdit do for you?]
 * http://andrei.gmxhome.de/anyedit/examples.html[AnyEdit examples]
 * http://andrei.gmxhome.de/anyedit/preferences.html[AnyEdit preferences]
 * http://andrei.gmxhome.de/anyedit/examples2.html[AnyEdit in action]

!AnyEdit can show the withespace (tabs vs spaces) in editors and may use custom project settings for tab<->spaces auto-convert-on-save feature.

!AnyEdit can perform tabs <-> spaces convert on multiple files or ''entire directories'' and supports also file exclusion filter for tabs <-> spaces action.

!AnyEdit allows you automatically remove trailing whitespaces and/or perform tabs<->spaces conversion on a "save" action in all text- based Eclipse editors. __It can automatically create a new line at the end of the file if the last line was not terminated by new line.__

!AnyEdit adds "Save All", "Open File" and "Show whitespace in editor" buttons to the global Eclipse toolbar and can remove "Print" button from it (because it is completely useless on Linux; 現在已經很少人會將程式碼印出來了...).

!AnyEdit adds "Open File", "Open Type" and "Save to file..." actions to supported output consoles and "Save to file..." toolbar button to the Console view.

!AnyEdit adds four new context menu actions to "Compare With" and "Replace With" menus in both editors and files.

Overview about *visible* contributions provided by !AnyEdit tools: (原來 !AnyEdit 不只有去尾的功能而已!!)

 * Open File under Cursor (Editors, Console views, http://andrei.gmxhome.de/bytecode/index.html[Bytecode Outline View]) - Useful by many include's in jsp's, C/C++ files, file names in the console output etc. __Can jump to the right line! Works with run/debug and Ant console too, support "jump to line"!__

 * Open Type under Cursor (Editors, Console views, Bytecode Outline View) - __Useful for all xml's, tld's, jsp's etc files with referenced Java types.__ Works with run/debug and Ant console too!

 * Save to file... (Most of the Console views, Bytecode Outline View) - Allows to save the console/view content and quickly reopen it in an editor. Works with most of the existing consoles! 

 * Edit > Show Witespace ("Edit" menu, main toolbar) - Allows to show tabs and spaces colored in the text editor. Has to be enabled once for the desired perspective via Window -> Customize Perspective -> Commands -> Whitespace 

 * File Import / Export > Working Sets ("File" menu) - __Allows you to store working set definitions to the file and apply them to the another workspace by importing them.__

 * File > Convert Tabs <-> Spaces ("File" menu) - Enabled only if more then one file/folder is selected in Navigator or Project Explorer

 * Convert > Tabs to Spaces, Spaces to Tabs (Editors) - Trailing whitespace will be removed automatically

 * Convert > Chars to Html entities, Html Entities to Chars (Editors) - Useful if working in bilingual(雙語的) team to convert é's, ô's, ä's etc between html and other sources ;) __'''(這對 Javadoc 裡 `<pre />` 區段的撰寫工作有很大的幫助!! 編修改程式後可以轉換成 HTML Entities, 日後又要再編修時可以再轉回原來的文字...)'''__

 * Convert > Camel <-> Underscores (Editors) - Auto-convert variable names from/to "camel" notation, like `thisIsMyFieldName` <-> `this_is_my_field_name` (應用在什麼地方?)

 * Convert > Capitalize (Editors) - Only text selection in editor will be changed

 * Convert > Invert Case (Editors) - Only text selection in editor will be changed

 * Convert > To Upper Case, To Lower Case (Editors) - Only text selection in editor will be changed

 * Convert > To Unicode Notation, From Unicode Notation (Editors) - Only text selection in editor will be changed

 * Convert > To Base64, From Base64 (Editors) - Only text selection in editor will be changed

 * Compare / Replace with Clipboard (Editors, Navigator, Project Explorer) - __If some text is selected in editor, then only this selection will be compared, otherwise entire editor__

 * Compare / Replace with Workspace File... (Editors, Navigator, Project Explorer) - If some text is selected in editor, then only this selection will be compared, otherwise entire editor

 * Compare / Replace with External File... (Editors, Navigator, Project Explorer) - If some text is selected in editor, then only this selection will be compared, otherwise entire editor

 * Compare / Replace with Opened Editor... (Editors, Navigator, Project Explorer) - If some text is selected in editor, then only this selection will be compared, otherwise entire editor

This programm is free, see http://andrei.gmxhome.de/anyedit/copyright.html[copyright]

=== Users about AnyEdit ===

Plugin page at http://www.eclipseplugincentral.com/Web_Links-index-req-viewlink-cid-123.html[Eclipse plugin central]

=== Installation ===

Please use Eclipse update manager to install this plugin.

 * Eclipse 3.3 - 3.4: Go to "Help -> Software Updates -> Find and Install... -> Search for new features to install -> Next -> New Remote Site..."

 * Eclipse 3.5: Go to "Help -> Install new Software... -> Work with:"

and use the http://andrei.gmxhome.de/eclipse/ as url.

Please also read the http://andrei.gmxhome.de/anyedit/faq.html[FAQ]!

=== Manual download ===

 * http://andrei.gmxhome.de/anyedit/links.html[Here]
 * http://code.google.com/p/anyedittools/source/checkout[Browse source code]

=== Why AnyEdit ===

"Open file" acton was inspired by refactoring of one big J2EE project that heavily used "included" JSP files. Some times it was necessary to traverse 5 nested includes to find a field declaration, thus 5 times open package explorer and search for the next file, brrr. __With "Open file under cursor" this is a single click action. This works from Eclipse debug/Ant console too - moreover, if ''line information'' is included, then the right source line will be selected in editor!__

"Open type" acton was inspired by working with http://web.xml/weblogic.xml/*.tld/*.jsp[web.xml/weblogic.xml/*.tld/*.jsp] files. You can now simply change from XML to the Java editor if you want to see the declaring Java class, without typing the Java class name in the "Open type" dialog. This works from the Eclipse Ant/debug console too!

"Convert Spaces/Tabs" action set was inspired by Rahul Kuchhal's whitespace plugin and good old !UltraEdit. The main difference is that my plugin doesn't change line ends while performing "spaces" operations. E.g. if you edit a Unix text file on Windows PC, Rahul's plugin automatically convert all line ends into DOS format (from "\n" to "\r\n") and vice versa. The same is for Mac/Unix, Mac/DOS text files too. __This is angry for version control systems, diff tools etc. The trailing whitespace and/or tabs<->spaces conversion could be performed automatically on "save" action in nearly all text editors, '''even in editors which are not directly supported by !AnyEdit context menu actions.'''__

And the rest is now just history :o)

This program is free, see copyright.

=== Editor / Console integration ===

For almost of Eclipse text editors this is done automatically. It works with default Eclipse Java and Text editors, with http://www.eclipse.org/webtools/index.html[Web Tools] from IBM, http://www.myeclipseide.com/[MyEclipse], !SolarEclipse and Loboz JSP editors, !JavaScript editor form Harish Kataria, http://www.eclipse-plugins.info/eclipse/plugin_details.jsp?id=266[EclipseColorer], http://www.eclipse-plugins.info/eclipse/plugin_details.jsp?id=178[ColorEditor], http://www.phpeclipse.de/[PHPEClipse], http://cfeclipse.org/index.html[CFEclipse], CDT editors, http://e-p-i-c.sourceforge.net/[EPIC] (Perl), Zend http://www.eclipse.org/php/[PHP], http://pydev.sourceforge.net/[PyDev] (Python development environment), http://www.trex.informatik.uni-goettingen.de/trac[TRex TTCN3], http://www.adobe.com/products/flex/[Adobe Flex], http://www.aptana.com/products/[Aptana Studio] and I think with almost anyone text editor too.

Console integration for "Save to file:" Ant, Java run / debug / stack trace, External tools, CVS, CDT make etc.

Please do not hesitate(猶豫) to contact me if your editor/view/console is not supported.

Please also read the http://andrei.gmxhome.de/anyedit/faq.html[FAQ]!

=== Usage ===

For "Convert Tabs<->Spaces" actions on a single file you can right-click anywhere in current editor and then select preferred action to run. Whole editor buffer will be changed, trailing whitespace will be removed automatically.

For "Convert Tabs<->Spaces" on a number of files, just select these files or directories in Navigator view and use "File->Convert Tabs<->Spaces" window menu. All selected text files and all text files in selected directory hierarchy would be checked out and "Tabs<->Spaces" would be executed on each file. __This operation could not be undone without version control system, so be careful by using it.__ You may exclude files per project/global settings from this operation, using !AnyEdit preferences.

For "Convert Chars/Html/Case" actions you must select some text, then right-click on current selection and then select preferred action to run. Only the selected text will be changed.

For "Open" actions place cursor into file/java type string and select preferred action to run. You can also select a part of file/type and then click on "Open" action. In both cases !AnyEdit will try to determine right file/type, and if it is found, will open file/type in associated Eclipse editor.

"Convert Tabs<->Spaces" actions uses tab width from !AnyEdit Preference page to replace tabs with spaces/vice versa (except Java editor, which formatter preferences could be used instead).

Note: As default, trailing whitespace will be removed automatically on save and while "Convert spaces/tabs" actons, but you can turn this behavoir off in !AnyEdit preferences.

"Open File" action uses special characters from !AnyEdit Preference page to guess file name/path under cursor. It uses the simply string search for a continuous character sequence with allowed/required in path characters. Found character sequence can be the full file path or only one part of them, therefore plugin will search for this character sequence first relative to current document and if nothing found, in entire project/workspace and then on local file system.

Import/Export working sets wizards allows you to store working set definitions to the file and apply them to the another workspace by importing them. This is especially useful when working on big workspaces containing same set of projects (each workspace represents just different product version or branch). Please first import projects into the workspace, and then working sets, otherwise working sets would be imported but empty.

Note: only working set descriptions would be imported/exported, and not the resources included in the working sets.

Please also read the http://andrei.gmxhome.de/anyedit/faq.html[FAQ], http://andrei.gmxhome.de/anyedit/examples.html[examples], http://andrei.gmxhome.de/anyedit/preferences.html[preferences] and http://andrei.gmxhome.de/anyedit/examples2.html[AnyEdit in action]!

== Features ==
http://andrei.gmxhome.de/anyedit/features.html @2009/10/29

__One question which is very often asked by the !AnyEdit users is: "why is THIS particular feature is not a part of the Eclipse platform"? (反倒是 Eclipse 跟著 !AnyEdit 的腳步在走...)__ Interestingly, many of the features previously offered by !AnyEdit was integrated into the last Eclipse releases (like "show invisible characters"), or will be integrated ("compare with external file" will go into 3.5) but still basic Eclipse is missing the full set of features offered by !AnyEdit.

In most cases !AnyEdit is incredibly useful because it saves time and additionally prevent you get mad by long, boring and error prone editing tasks.

Here is a dozen of most popular solutions provided by !AnyEdit for common programming tasks...

=== Problem 1 ===

Consider you have two big pieces of code in the same editor which looks pretty similar, and you wish to compare them. There is no build-in solution for such basic task in Eclipse.

Solution: __With !AnyEdit you can just select one of the pieces, "Ctrl+C" (clipboard), then select the next one and choose "Compare With -> Clipboard" and get the Eclipse compare editor up. It allows you even patch you selected text from the compare editor!__

=== Problem 2 ===

Have you ever tried to compare any two opened editors together? It works fine if you have a small project with one folder and 10 files. Ok, in this case you do not need to know what is !AnyEdit good for :-) But if you have 30+ projects in different working sets, it gets worser - you have navigate first to the first file, select this one, hold Ctrl key, navigate to the second file, select it too and then open a context menu to compare both. __Usually you have also to unset some filters or enable/disable selected working sets etc, so it will never be done with less then 5-10 clicks.__

Solution: With !AnyEdit, just right click inside the editor, select Compare With/Opened Editor -> done! Now you can compare ANY opened text editor with any other with just 3 clicks! The new feature is a real time saver - and it is even possible to compare/patch two external editors together!

=== Problem 3 ===

Have you ever tried to compare external file editor or class file editor with other files/editors? Just try it :-) There is NO way... Eclipse just don't provide any chance to do it by default. If you can't select editor's file in some kind of navigator, then you will never able to compare it in Eclipse => __you have either run external diff tool or somehow import your external file into the workspace.__

Solution: With !AnyEdit, just right click inside the editor, select Compare With/ and choose one from four possible actions provided by !AnyEdit: Compare/Replace With: Clipboard/Workspace file.../External file.../Opened Editor...

=== Problem 3 ===

Large codebase with different projects which uses different coding tabs<->spaces styles. If you try to read/change such code, you preferred editor would not be able to display/maintain the existing style properly without !AnyEdit across all this projects/files. __You can even violate the project code guidelines by using different white space.__

Solution: With !AnyEdit you just set your preferred way of maintaining tabs<->settings and it will automatically take care of it. __If the !AnyEdit settings are checked in together with the project code, no one will ever get in conflict with code style rules.__

=== Problem 5 ===

Convert many files/directories at once to a proper tabs<->spaces style.

Solution: Select the folder in Navigator and click "File->Convert tabs<->spaces".

=== Problem 6 ===

__While jsp/html editing, you often need to enter html entities for special characters or, taken such html coded text, convert it back to the usual characters and paste it to the database table/sql editor.__ Usually you need to learn/type it all by the hand (not a problem if you have enough time, of course). Doing this with a large text or all the days is just a pain without !AnyEdit, because usually you do not have much time and you made mistakes.

Solution: !AnyEdit does this in a seconds with no mistakes at all. Even more, !AnyEdit can convert from/to special Unicode escape sequences and from/to Base64.

=== Problem 7 ===

Navigate from the editor of your choice to any file or Java type, referenced in the text. For Java types it works fine but in Java editor only. For files there is no general solution at all. But what if you have `struts xml` file with referenced Java classes and included jsp's? __Without !AnyEdit you must ctrl+c the long path/type name, open the "Open type/Open resource" dialog box, ctrl+v the text to it, scroll editor down by searching for the right line.__ Sometimes you do not like to use clipboard because it contains important code snippet, so you must re-type the path/class name in dialog. How many keyboard/mouse interaction you need for this? Now multiply this by 10 if you are trying to navigate in a large JSP/Java codebase from one included file to another file.

Solution: With !AnyEdit it is just a right click on the path/type and go. It would even jump to the right line in the opened editor, if the line information is provided in the text!

=== Problem 8 ===

Your web/J2EE server or Ant build or custom script writes some logs/stack traces in the Eclipse debug console, and you would like to jump to the referenced file/class or line. Again, as described above, it requires too much user keyboard/mouse clicks to achieve this.

Solution: With !AnyEdit it is just right click on the path/type and go.

=== Problem 9 ===

You want to save the console content to file? You can do it by selecting the right part of the code, copy to clipboard, create and open the desired file, paste and save it. 20 clicks or more? Sure! Even worser: sometimes you can't even use copy&paste because output is too big for the clipboard!

Solution: Relax - !AnyEdit allows you to save entire console content (or only the selected text) to the file with 4 clicks! It also automatically open the file in the editor (but only if you like!).

=== Problem 10 ===

__You must see if source code contains tabs or spaces, because it is important for some programming languages or make files. It could break your code if you do not use the right type of white space.__ In this case you must use another (not Eclipse based editor) for such files, because there is no way to see the difference in Eclipse 3.1-3.2 (3.3 have it finally).

Solution: With !AnyEdit it is just a click on toolbar button and you see the differently highlighted or colored white space in your preferred Eclipse editor.

=== Problem 11 ===

You have a huge number of projects organized with working sets and you are not using CVS/SVN, but other version control system. You want to switch to another product version, so you usually creates a new workspace. In this workspace, you have manually sort and organize you projects by same working sets... (不太瞭解這個應用?)

Solution: !Anyedit adds File->Import/Export->Working Sets" wizards. This feature is similar to the new hidden gem in Eclipse 3.3 (switch workspace dialog has now an option to copy existing working sets). Import/Export working sets wizards allows you to store working set definitions to the file and apply them to the another workspace by importing them, by just few clicks!

=== Problem 12 ===

On Linux printing is not (or not well) supported by SWT (only for newer GTK versions), but on the main toolbar there is always a grayed "print" button which takes your screen space. It is not possible to remove it, and it is completely unusable.

Solution: !AnyEdit allows to remove this button or replace it with a hidden "save all" button, which is much more useful on the main toolbar.

=== Problem 13 ===

__Some compiler requires that each file has to end with a new line character. Because it is invisible, it is hard to keep track of this especially if merging files.__

Solution: !Anyedit can automatically (on save) add a new line at the end of the file.

