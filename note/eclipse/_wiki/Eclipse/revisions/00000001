= Eclipse =
<<TableOfContents>>

== Using Scrapbook Pages (2006/01/08) ==
http://www.eclipsezone.com/eclipse/forums/t61137.html @2009/02/26

__One of the most undervalued(低估) and forgotten features of Eclipse is the scrapbook page, which allows to execute Java expressions without having to create a new Java program. This is a neat(很棒的) way to quickly test an existing class or evaluate a code snippet.__

To create a scrapbook page choose File -> New -> Other -> Java -> Java Run/Debug -> Scrapbook Page, choose a name and destination folder and that's it. (副檔名為 `.jpage`) Now there's an empty page where regular Java expressions can be written and evaluated, to do so just select the expression and choose one of the available operations (either in the toolbar now available or the context menu; 要先選取要執行的部份, 特定的功能才能使用).

Try this: write `new java.util.Date()`, select the text and click Display or Inspect. (其中 Inspect 則會開一個小視窗, 方便檢視該回傳物件的各項細節)

__Display will evaluate the expression and print the result directly on the scrapbook, basically the return of a `toString()` applied to that object or the return value of the selected Java method. (為什麼要設計成直接印在 Scrapbook 上, 而不輸出到 Console?)__

If the information displayed is not enough, there's the Inspect feature (see below) which shows an debug window with all the details of the selected object, and all this happens without executing any code or switching to the Debug perspective.

{{attachment:inspect.png}}

__To evaluate code snippets there's the Execute feature, this will execute a block of code, just like in a regular java program.__ A quick way to try this is to send something to the standard output: just write `System.out.println("Scrapbook example")`, select the text and hit Run, this should print something on the Console window (see below; 但為什麼程式不會自動中斷?).

__'''Because it's created within a Java project a scrapbook page, all the classpath libraries and projects references can be used here;''' another nice feature is having code assist, just like in a regular Java editor page. In a scrapbook page the class names fully qualified, there's no, this isn't much of a problem because the code completion handles this nicely, but if you're working with unusually large class names you can check the Set Imports option, this will open new window where all the import expressions can be inserted (just the import section of a regular class file).__

A scrapbook page is not as fully featured as the Java editor, there's no outline and the code assist is somehow limited, but is not meant to be like that; the idea is working with just a few lines, and this where the scrapbook page can be useful: __to quickly test Java expressions and code blocks present in a project in this kind of ''sandbox''.__















== Overview ==

== Callisto(木衛四) ==

Callisto is about improving the productivity of the developers working on top of Eclipse frameworks(注意不是 "Eclipse SDK, 所以對開發 Eclipse 週邊專案的人影響較大) by providing a more transparent and predictable(可預料的) development cycle. By releasing 10 projects at the same time, the goal is to eliminate uncertainty(不確定) about version compatibility and make it easier to incorporate multiple projects into your environment.

While Callisto is about the simultaneous(同時的) release of ten projects, it is not a unification(統一) of the projects - each project remains a separate open source project operating with its own project leadership, its own committers, and its own project plan.

Callisto 計畫其實包含了十個 Eclipse 平台的專案, 這十個專案原本是各自釋出, 因此開發人員必須各自安裝、更新, 而且原本各自獨立的十個專案還可能有相關的使用問題. 但現在 Eclipse 基金會合併了這些專案的釋出與安裝, 對開發人員來說, 就不需各自安裝, 而且各自的專案也經過了整合測試.

Callisto 計畫所包含的十個專案分別是:

 * Business Intelligence and Reporting Tools (BIRT) Project: 這是 Eclipse 平台的商業智慧報表系統, 可以整合到程式, 並產生出 HTML 和 PDF 格式的報表. BIRT 提供報表畫面的配置、資料存取, 以及腳本程式控制的功能.
 * C/C++ IDE (CDT): CDT 是 Eclipse 平台的 C/C++ IDE 套件, 能讓 Eclipse 具備 C/C++ 的開發、除錯能力.
 * Data Tools Platform (DTP): 這是 Eclipse 平台的資料管理工具, 包括連接資料來源, 並瀏覽、編修資料.
 * Eclipse Modeling Framework (EMF): EMF 是塑模應用框架(framework), 而且也能為建置工具和其他結構化資料模組程式產生程式碼.
 * Graphical Editing Framework (GEF): 圖形編輯應用框架能讓開發人員從既有的應用程式模組產生圖形編輯器.
 * Graphical Modeling Framework (GMF): 這能為圖形編輯器的開發, 提供元件及執行階段的必備功能.
 * Eclipse Project: 這是 Eclipse 平台的專案管理功能.
 * Eclipse Test and Performance Tools Platform Project (TPTP): 這是 Eclipse 平台的測試及效能評測工具.
 * Eclipse Web Tools Platform Project (WTP): 這是 Eclipse 平台的 J2EE Web 程式開發工具, WTP 專案包括了 HTML、!JavaScript、CSS、JSP、SQL、XML、DTD、XSD、WSDL 等原始碼編輯器, XSD、WSDL 等圖形化編輯器, 以及 J2EE 建置工具、Web services 精靈與瀏覽器、WS-I 測試工具、資料存取、查詢工具.
 * Visual Editor (VE): 這是 Swing 和 SWT/RCP 等 GUI 的視覺編輯器.

這是 Eclipse 對 plugin 煩雜的外掛程式和本版相容性問題, 終於提供一個解決方式. 試用的過程中不難感受到是一種像 Firefox 的擴充套件管理, 事實上 Eclipse 的這個方法, 在以前使用 jEdit 的經驗中早已見識過了, 對編輯器有興趣的人可以去下載來使用.

jEdit 是 Java-based 的文字編輯器, 相當於好用的 !UltraEdit一樣；不同的是他是免費的, 且具有龐大的外掛支援著各種功能. 它的 plugin 之多不比 Eclipse 少, 並且你可以任意擴充成你想寫的程式環境, 最重要的是他的 plugin 可以透過管理功能直接查閱清單, 並點選下載. 也可以看到你已安裝的 plugin, 就像你的 Firefox 一樣. 現在的 Callisto 就有點這個味道, 不過 Callisto 主要提供了十種官方進行中的專案讓你下載, 我想這是 Eclipse 想一統煩雜 plugin 的目的, 因為他就像提供官方的外掛程式一樣, 也就是 Callisto 清單了. 將 Eclipse 更新選項改成 Callisto list 就可以連到那邊進行下載更新. 不過看似像 jEdit 方便 , 但無法像 jEdit 自由的安裝官方以外的外掛程式.

這難免讓我又想到 !EasyEclipse 的出現, 就是為了擺脫 Eclipse 煩雜外掛安裝和版本相容問題. 對於Callisto , !EasyEclipse 是另一個不錯的選擇, 它幫助各種開發者測試了很多常用的外掛程式和版本相容性, 相信會更多人使用.

Eclipse 遇到的 plugin 問題, 比較像是管理的問題, 不像是技術上的問題. 簡單說雖然 Eclipse 有個 plugin central 網站, 但是開發者要使用還是得點到該 plugin 所在的原址去下載, 所以 Eclipse Plugin Central 並沒有統一的下載中心, 不像 Firefox 有擴充程式的下載中心, 作者可以自己放上去. 原因可能是外掛程式原作者的版權宣告不一致都相同, 有些是商業的有些是免費的關係吧.
主程式藉由更新單一的網址清單可以方便的下載擴充和管理, 但是每個 plugin 下載分散再各個原作者網址就很難做到統一的更新清單
所以 Callisto List 油然而生想提供個方便, 並主控十個主要擴充專案. 這也難怪 plugin central 只有熱門投票, 沒有熱門下載排行, 若開發者想使用類似 Callisto List 的方式來下載其他 plugin 也就沒辦法, 除非自己手動加入一些外掛的更新清單, 那也要有一個網站提供很多外掛的下載清單才行...

== Tasks View ==

The Tasks view displays all the tasks in the Workbench. The view displays tasks associated with specific files (=associated tasks), specific lines in specific files, as well as ''generic tasks'' (=unassociated tasks, 可以在 tasks view 裡直接新增) that are not associated with any specific file.

By default, the Tasks view is included in the Resource perspective. To add it to the current perspective, click Window > Show View > Other... > General > Tasks. The following markers can appear in the Tasks view:

|| Icon || Description ||
|| {{attachment:ref-21.png}} || High priority task ||
|| (No icon) || Normal priority task ||
|| {{attachment:ref-23.png}} || Low priority task ||
|| {{attachment:ref-25.png}} || Completed task ||

''Task tags'' can be configured on the Java > Compiler > Task Tags preference page. When the tag list is not empty, the compiler will issue a ''task marker'' whenever it encounters one of the corresponding tag inside any comment in Java source code. __(注意這裡由 task tag 轉換成 task marker 的對應關係; 僅限於 Java source 或 Javadoc 中使用, 可以寫在單行, 多行的註解. '''因為 interface 沒有 body, 因此在規劃 interface 的時期, 或是跟實作無關的想法, 都可以寫在 Javadoc 裡, 因此 "先建構框架, 再補細節" 的做法也可以套用在 Javadoc 上''') Generated task messages will include the tag, range until the next line separator, comment ending or non-empty tag(例如 "TODO FIXME 運算效能很差", 其中 TODO 為 empty tag, 而 FIXME 則為 non-empty tag), and will be trimmed. If the same line of code carries ''multiple tags'', they will be reported separately.__

__'''@2008/09/25 發現 Eclipse 3.4 JEE 也支援在 XML 檔案裡標記 task tag, 但預設沒有開啟這項功能.''' 可以從 General > Editors > Structured Text Editors > Task Tags 的設定下手.__

 {{{
/* TODO FIXME 運算效能很差 */
/**
 * @param input TODO 說明 input 的用法
 */
1. TODO 運算效能很差
2. FIXME 運算效能很差
3. TODO 說明 input 的用法

// TODO: 這裡要修一下 FIXME: 運算效能很差
1. TODO: 這裡要修一下
2. FIXME: 運算效能很差
 }}}

內建有三個標準的 task tags (區分大小寫):

 * __FIXME (High): In the code, there are several places, you may take short cuts knowing fully well that it needs to be fixed later. In such cases, you can use FIXME to denote that activity. We mark the code with a FIXME because we don't have time to fix it at the moment. '''While TODO denotes unfinished activity, FIXME denotes code that needs fixing later on. (在實務上應該以 issue tracking 平台的問題反應為主, 而 FIXME 的標記為輔, 或者乾脆不要用...)'''__
 * __TODO (Normal): It is used to identify something incomplete that needs to be done, which should be used where something hasn't been implemented in the first place. (這跟 Eclipse 在自動產生的程式碼後面標註 TODO 的用意是一致的, '''注意這裡 "in the first place" 的說法, 別把 FIXME, HACK 適用的場合誤用為 TODO''').__
 * XXX (Normal) : An XXX demands attention and is not intended to stay in the code long. (標註可疑的地方, 待有時間時再判定) We may later decide that no problem exists, or we may need to document unexpected behavior.
 * __'''HACK (Low) :建議增加一個 HACK (有 refactoring 的意味; 專案開發期間, 如果發現某些已完成的部份可以改寫成更好的寫法, 別急著花時間去研究, 善用 HACK 標記, 等有時間再來做...; 在工作告一段落之後, 可以透過 code review 的動作, 加入這個標記...)''' - Use it to note ugly code or a block of code that most likely has a much more elegant solution available.__ (雖然在 Equinox 專案有這麼一段[建議 http://www.eclipse.org/equinox/documents/coding.php] - Do not add your own as this is unecessary and requires everyone  on the team to change their compiler settings in order to see these tasks)

___在 [Code Conventions for the JavaTM Programming Language http://java.sun.com/docs/codeconv/html/CodeConventions.doc9.html#395] 裡有這麼一段話 - '''Use XXX in a comment to flag something that is bogus(似是而非的) but works. Use FIXME to flag something that is bogus and broken.''' 但裡頭完全沒有提到 TODO 的使用, 或許是因為 TODO 根本不該被簽進 repository 的關係 (參考下面的說法)__

__'''I really don't like to see the TODO tag in code. It's a sign that the code does less than it promises.''' More often, I've seen a TODO used to justify not completing code at the time it is first written. I've seen whole methods left unimplemented with only a TODO comment as a place holder. Such a TODO postpones(延遲) part of the project into the indefinite(不確定的) future, when the issues are no longer clear, and perhaps after the original developer is doing something else. Most of these TODO's never go away. '''(因此 TODO 最好在簽進 repository 前就全部清除, 或者在版本發行之前所有的 TODO 都要被完成; 否則應該被視為 enhancement 並納入 issue tracking 系統做管理才是...)'''__

You can sort and filter line items in the tasks view, to view only high-priority tasks or tasks associated with a particular resource or group of resources. (建議將 filter 調整為 "On selected element and its children", 可以達成類似 Mylyn focus 的效果...)

__多人共同維護一份程式碼時, 可以透過 filter 裡 "Description contains/doesn't contain..." 的設定, 排除或過濾出特定的 task tags, 例如每個人存標示 TODO 時, 都記得加上 "[username]" 的字樣, 只要設定一下 filter 的過濾條件, 就可以互不干擾. (可以從 code templates 下手)__

__Does the Mylar Task List view replace the Eclipse Tasks view? '''In contrast to Mylar's Task List view, the Eclipse SDK's Tasks view is used for showing markers such as 'todo' tags which indicate a local problem with a resource, similar to a compiler warning. As such, these 'tasks' are at a much lower level of granularity than Mylyn's tasks, and one task could involve cleaning up multiple todos.''' Because the Tasks view quickly becomes overloaded, using the focused mode can be convenient when doing a precommit cleanup. The Apply Mylyn filter is available for both the Problems and the Tasks views.__

__上述 associated tasks 可以透過 line-based editor 的 marker bar's context menu -> Add Task... 功能來新增. 也可以用在程式碼裡頭標記 task tags 的方式來新增. 雖然前一個方式不受限於 java source, 但沒有辦法分享 (即使是同一個人在兩台電腦上工作). 而後者雖然可以透過 repository 分享, 但卻受限於只能用在 java soruce. '''按上面 "...indicate a local problem with a resource" 的說法, marker 原先的設計就不適合用來分享, 想要透過 task tags 來達成分享的念頭就顯得有些不恰當. 如果系統開發過程有搭配 issue tracking 平台, 就應該少用 task tags, 或者以 issue tracking 平台為主, task tags 為輔, 尤其是 FIXME, 當然 HACK 也要小心使用...'''__

目前我的用法如下:

 * __TODO: 在釋出之前一定要完成的部份; '''善用 TODO, 把方法之間串聯的架構規劃出來(先求廣度), 再補上方法的細節. (先寫介面, 再補實作)'''__
 * __XXX: 可能是排定在未來要開發的項目, 或暫時讓程式可以跑 (仍不符合需求), '''要小心這部份可能不斷地累積, 因此每一階段的開發之前, 都要重新檢視所有的 XXX, 看哪些需要在這個階段實現, 將它轉成 TODO...'''__
 * HACK: 已符合需求, 但內部仍有改進的空間 (比較低層次的 enhancement)

== Classpath Variables ==

The build path for a Java project can include source code files, other Java projects, and JAR files. JAR files can be specified using file system paths, or by using variables that refer to locations on the network.

Classpath variables can be used in a Java Build Path to avoid a reference to the local file system. Using a variable entry, the classpath only contains a variable (可以指向 file 或 folder). In this way, you can share build paths across teams and define the variables to refer to the correct location for your particular computer. The value of such variables is configured on the Java > Build Path > Classpath Variables preference page.

Certain class path variables are set internally and can not be changed in the Classpath variables preferences:

 * `JRE_LIB`: The archive with the runtime JAR file for the currently used JRE.
 * `JRE_SRC`: The source archive for the currently used JRE. (這意謂著 source attachment configuration 也可以使用 classpath variable!!)
 * `JRE_SRCROOT`: The root path in the source archive for the currently used JRE.

__Source attachments for variable entries are defined by variable paths. The first segment of such a path describes a variable name, the rest is an optional path extension. (實驗發現, 想要用變數來設定 source 的位置, library 本身必須也是用變數指定的才行)__

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

 * http://www.eclipse.org/[Eclipse 官方網站]

=== Search ===

== Scratch ==


