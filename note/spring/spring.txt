= Spring =

 * link:framework/framework.html[Spring Framework]
 * Spring Tool Suite (STS)

== 延伸閱讀 ==

 * link:../java/modularization/modularization.html[Java 模組化]

== 參考資料 ==

.網站
--
 * http://www.springsource.org/[SpringSource.org]
--

.社群
--
 * http://forum.springsource.org/forum.php[Spring Community Forums]
--

.學習資源
--
 * http://www.springsource.org/documentation[Documentation | SpringSource.org]
 * http://www.springsource.org/tutorials[Tutorials | SpringSource.org]
 * http://www.springsource.org/samples[Code Samples | SpringSource.org]
 * http://www.youtube.com/user/SpringSourceDev[SpringSource Developer Channel - YouTube]
--

.書籍
--
 * http://shop.oreilly.com/product/0636920018056.do[O'Reilly - Programming Spring] (2013-11 est.)
 * http://www.apress.com/9781430248187[Apress - Pro Spring Security] (2013-03 est.)
 * http://shop.oreilly.com/product/9780596801946.do[O'Reilly - Spring in a Nutshell] (2013-03 est.)
 * http://www.packtpub.com/spring-security-3-1/book[Packt - Spring Security 3.1] (2012-12)
 * http://www.packtpub.com/spring-data/book[Packt - Spring Data] (2012-11)
 * http://shop.oreilly.com/product/0636920024767.do[O'Reilly - Spring Data] (2012.10)
 * http://www.manning.com/fisher/[Manning - Spring Integration in Action] (2012-09)
 * http://www.apress.com/9781430241553[Apress - Pro Spring MVC: With Web Flow] (2012.06)
 * http://shop.oreilly.com/product/0636920025405.do[O'Reilly - Just Spring Data Access] (2012.06)
 * http://www.manning.com/rimple/[Manning - Spring Roo in Action] (2012-04)
 * http://www.apress.com/9781430241072[Apress - Pro Spring 3] (2012.04)
 * http://shop.oreilly.com/product/0636920022671.do[O'Reilly - Just Spring Integration] (2012-04)
 * http://www.packtpub.com/spring-web-services-cookbook/book[Packt - Spring Web Services 2 Cookbook] (2012-02)
 * http://www.manning.com/templier/[Manning - Spring Batch in Action] (2011-10)
 * http://www.packtpub.com/spring-roo-1-1-cookbook/book[Packt - Spring Roo 1.1 Cookbook] (2011-09)
 * http://shop.oreilly.com/product/0636920020981.do[O'Reilly - Getting Started with Roo] (2011-08)
 * http://shop.oreilly.com/product/0636920020394.do[O'Reilly - Just Spring] (2011-07)
 * http://www.apress.com/9781430234524[Apress - Pro Spring Batch] (2011-07)
 * http://www.manning.com/walls4/[Manning - Spring in Action, Third Edition] (2011-06)
 * http://www.apress.com/9781430233459[Apress - Pro Spring Integration] (2011-03)
 * http://www.apress.com/9781430226321[Apress - Spring Persistence with Hibernate] (2010-11)
 * http://www.manning.com/cogoluegnes/[Manning - Spring Dynamic Modules in Action] (2010-09)
 * http://www.apress.com/9781430224990[Apress - Spring Recipes, 2nd Edition] (2010-09)
 * http://www.packtpub.com/spring-security-3/book[Packt - Spring Security 3] (2010-05)
 * http://www.packtpub.com/create-powerful-versatile-spring-python-1-1-applications/book[Packt - Spring Python 1.1] (2010-05)
 * http://www.apress.com/9781430224976[Apress - Spring Enterprise Recipes] (2009-12)
 * http://www.packtpub.com/spring-persistence-hibernate/book[Packt - Spring Persistence with Hibernate] (2009-11)
 * http://www.apress.com/9781430216407[Apress - Pro SpringSource dm Server] (2009-09)
 * http://pragprog.com/book/cwosg/modular-java[Pragmatic - Modular Java] (2009-07)
 * http://www.packtpub.com/spring-web-flow-2-web-development/book[Packt - Spring Web Flow 2 Web Development] (2009-03)
 * http://www.apress.com/9781430218357[Apress - Pro Flex on Spring] (2009-03)
 * http://www.packtpub.com/spring-25-aspect-oriented-programming/book[Packt - Spring 2.5 Aspect Oriented Programming] (2009-02)
 * http://www.apress.com/9781430218777[Apress - Spring Persistence -- A Running Start] (2009-02)
 * http://www.apress.com/9781430216124[Apress - Pro Spring Dynamic Modules for OSGi Service Platforms] (2009-02)
 * http://www.apress.com/9781430216247[Apress - The Definitive Guide to Spring Web Flow] (2008-10)
 * http://www.manning.com/wheeler/[Manning - Spring in Practice] (2008-09)
 * http://www.apress.com/9781590599211[Apress - Pro Spring 2.5] (2008-08)
 * http://www.apress.com/9781430210092[Apress - Pro Java EE Spring Patterns] (2008-08)
 * http://www.apress.com/9781590599792[Apress - Spring Recipes] (2008-06)
 * http://www.apress.com/9781590596852[Apress - Beginning Spring 2] (2007-12)
 * http://www.wrox.com/WileyCDA/WroxTitle/Beginning-Spring-Framework-2.productCd-047010161X.html[Wrox - Beginning Spring Framework 2] (2007-12)
 * http://www.manning.com/walls3/[Manning - Spring in Action, Second Edition] (2007-08)
 * http://www.apress.com/9781590599181[Apress - Building Spring 2 Enterprise Applications] (2007-08)
 * http://www.apress.com/9781590595848[Apress - Expert Spring MVC and Web Flow] (2006-02)
 * http://www.wrox.com/WileyCDA/WroxTitle/Professional-Java-Development-with-the-Spring-Framework.productCd-0764574833.html[Wrox - Professional Java Development with the Spring Framework] (2005-07)
 * http://shop.oreilly.com/product/9780596009106.do[O'Reilly - Spring: A Developer's Notebook] (2005-04)
 * http://www.apress.com/9781590594612[Apress - Pro Spring] (2005-02)
 * http://www.manning.com/walls2/[Manning - Spring in Action] (2004-12)
--

////////////////////////////////////////////////////////////////////////////////

 * SpringSource, a division of VMware (acquired in 2009)
   ** application development framework for enterprise Java
   ** mission statement = "portability and innovation in the service of productivity", bring simplicity to java development
   ** ambition, replace J2EE. J2EE 6 started in 2005, and only 2 implementations exist so far.
   ** testable (both unit tests and integration tests), reusable
 * cross platforms
   ** bring you to the cloud - partnerships with SalesForce, Google ... (VMForce, Google App Engine, Amazon Web Services)
   ** without unnecessary ties to specific deployment environments.
   ** first-class citizen on major cloud platforms with Java support, Heroku, Google App Engine, Amazon Elastic Beanstalk, VMware's Cloud Foundry.
   ** lightweight - Tomcat, Jetty
   ** traditional - Webphere, JBoss AS, WebLogic
 * components, modular design -> allow incremental adoption
   ** Spring Core (跟 Spring Framework 的關係是什麼？)
      *** fundataion, includes Spring RESTful MVC
      *** comprehensive infrastructure, deal with the plumbing -> you can focus on domain problems or application-level business logic
      *** simple object (POJO?) + dependency injection + aspect-oriented programming + enterprise service abstractions (Java EE specs, like JDBC, JPA, JTA, JMS...)
   ** Spring Security - authentication and authorization
   ** Spring Webflow != Spring MVC - for building multi-page flows
   ** Spring Web Services - contract-first, document-centric SOAP and XML web services (service endpoints)
   ** Spring Batch - batch processing
   ** Spring Integration - enterprise integration patterns?
   ** Spring BlazeDS - Adobe BlazeDS
   ** Spring AMQP - AMQP message brokers?, like RabbitMQ
   ** Spring Data - data access / NoSQL / Big Data (HBase, MongoDB, Redis, Rlak, CouchDB, Neo4J, ...)
   ** Spring Social - integrate Twitter, Facebook, Tripit, MySpace, LinkedIn, ...
   ** Spring Hadoop - POJO-centric approach to building Hadoop applications
   ** Spring Mobile, Spring Android - first-class support for service creation and consumption? for iPhone and Android
   ** Spring GemFire - GemFire enterprise data grid
 * POJO
   ** Spring has only one type of components, a POJO
   ** domain objects
 * beans
 * ApplicationContext
   ** Spring manages the beans you tell it to manage (no more), in ONE ApplicationContext
   ** configuration model - lots of collaborating objects -> dependency injection
   ** `ApplicationContext ctx = new GenericAnnotationApplicationContext("com.foo.ar.my.package")` - Java SE application
   ** `com.springframework.web.servlet.DispatcherServlet` in web.xml
 * bean configurations styles
   ** tells the ApplicationContext how to manage your beans.
   ** declarative transactions, caching, validation, formatting?
   ** bean configurations via annotations or XML?
      *** XML to enable certain features like declarative transaction management.
      *** annotations to configure your business components - codee that's part of your project services and web controllers
   ** annotations -> infer the structure and requirements of your beans -> automatically contribute the definition to the context
+
--------------------------------------------------------------------------------
@Component --> a bean?
public class MyService {
    @Autowired private javax.sql.DataSource dataSource;
}
--------------------------------------------------------------------------------
+
   ** Configuration class, explicitly construct the object and wire together the collaborating objects.
+
--------------------------------------------------------------------------------
@Configuration -> 
public class MyServiceConfiguration {
    @Bean
    public MyService myService() {
        MyService myService = new MyService();
        myService.setDataSource(dataSource());
        return myService;
    }

    @Bean
    public javax.sql.DataSource dataSource() { ... } -> if called more than once?
}
--------------------------------------------------------------------------------
+
   ** XML Configuration, before Java 5
 * AOP - proxy-based, AspectJ-based
////////////////////////////////////////////////////////////////////////////////

