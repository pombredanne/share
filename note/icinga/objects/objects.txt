= link:../icinga.html[Icinga] / Objects =
:title: [Icinga] Objects

////////////////////////////////////////////////////////////////////////////////
 * object definitions (`*.cfg`)
 * template format
 * object inheritance
 * host.check_command -> command (host check)
 * 
////////////////////////////////////////////////////////////////////////////////

["graphviz","objects/objects.png"]
--------------------------------------------------------------------------------
digraph {
  node [ shape = box ]
  Host [ label = "Host\n(Group)" ]
  Service [ label = "Service\n(Group)" ]
  Contact [ label = "Contact\n(Group)" ]
  Command
  "Time Period"

  subgraph { rank = same; Service; Host }
  Host -> Command [ label = "host check" color = blue fontcolor = blue ]
  Service -> Host [ label = "associated with" ]
  Service -> Command [ label = "service check" color = blue fontcolor = blue ]
  Command -> Contact [ label = "notify\n(state change)" color = red fontcolor = red ]
}
--------------------------------------------------------------------------------

[graphviz]
--------------------------------------------------------------------------------
digraph {
  node [ shape = box ]

  Host -> Host [ label = "parents" ]
  Host -> "Host Group" [ label = "hostgroups" ]
  "Host Group" -> Host [ label = "members", style = dashed ]
  Host -> Command [ label = "check_command" ]
  Host -> Command [ label = "event_handler" ]
  Host -> Contact [ label = "contacts" ]
  Host -> "Contact Group" [ label = "contact_groups" ]
  "Host Group" -> "Host Group" [ label = "hostgroup_members" ]
  Service -> Host [ label = "host_name" ]
  Service -> "Host Group" [ label = "hostgroup_name" ]
  Service -> "Service Group" [ label = "servicegroups" ]
  "Service Group" -> Service [ label = "members", style = dashed ]
  Service -> Command [ label = "check_command" ]
  Service -> Command [ label = "event_handler" ]
  Service -> Contact [ label = "contacts" ]
  Service -> "Contact Group" [ label = "contact_groups" ]
  "Service Group" -> "Service Group" [ label = "servicegroup_members" ]
  Contact -> "Contact Group" [ label = "contactgroups" ]
  Contact -> Command [ label = "host_notification_commands" ]
  Contact -> Command [ label = "service_notification_commands" ]
  "Contact Group" -> Contact [ label = "members", style = dashed ]
  "Contact Group" -> "Contact Group" [ label = "contactgroup_members" ]
}
--------------------------------------------------------------------------------

== 參考資料 ==

 * http://docs.icinga.org/latest/en/configobject.html[3.3. Object Configuration Overview]

////////////////////////////////////////////////////////////////////////////////
** Objects are all the elements that are involved in the monitoring and notification logic. Types of objects include: Services, Service Groups, Hosts, Host Groups, Contacts, Contact Groups, Commands, Time Periods, Notification Escalations, Notification and Execution Dependencies??
** Objects can be defined in one or more configuration files and/or directories that you specify using the `cfg_file` and/or `cfg_dir` directives in the main configuration file.
** An object definition file can include other object definition files with the use of the `include_file=<file_name>` and `include_dir=<directory_name>` directives. The former includes the single file specified, the latter will process all files ending in the `.cfg` extension in the directory specified. These directives may be repeated to include multiple files/directories.
** The directives are not allowed within the actual definition of an object, and should appear before, after, or in between any object definitions. They are closely related to the `cfg_file=` and `cfg_dir=` directives in the main configuration file.
** Objects are defined in a flexible template format, which can make it much easier to manage your Icinga configuration in the long term. 這裡的 "template format" 指的是搭配 macros 使用
** Once you get familiar with the basics of how to define objects, you should read up on object inheritance, as it will make your configuration more robust for the future.
////////////////////////////////////////////////////////////////////////////////

 * http://docs.icinga.org/latest/en/objectdefinitions.html[3.4. Object Definitions]

////////////////////////////////////////////////////////////////////////////////
** One of the features of Icingas object configuration format is that you can create object definitions that inherit properties from other object definitions.
** Lines that start with a '#' character are taken to be comments and are not processed Directive names are case-sensitive
** Characters that appear after a semicolon (;) in configuration lines are treated as comments and are not processed 這是 object definition 跟 main configuration 不同的地方
** It is important to point out that several directives in host, service, and contact definitions may not be picked up by Icinga when you change them in your configuration files. Object directives that can exhibit this behaviour are marked with an asterisk (`*`). The reason for this behaviour is due to the fact that Icinga chooses to honour values stored in the "state retention file" over values found in the config files, assuming you have state retention enabled on a program-wide basis and the value of the directive is changed during runtime with an external command. One way to get around this problem is to disable the retention of non-status information using the `retain_nonstatus_information` directive in the host, service, and contact definitions. Disabling this directive will cause Icinga to take the initial values for these directives from your config files, rather than from the state retention file when it (re)starts. 不是說 "state retention file" 嗎，為什麼控制的開關又叫做 "nonstatus"?? 可以統一從 main config 的 `retain_state_information` 關閉。
////////////////////////////////////////////////////////////////////////////////

 * http://docs.icinga.org/latest/images/logofullsize.png[7.26. Object Inheritance]
 * http://docs.icinga.org/latest/en/objecttricks.html[7.27. Time-Saving Tricks For Object Definitions]
 * http://docs.icinga.org/latest/en/customobjectvars.html[3.5. Custom Object Variables]

