= link:objects.html[Icinga / Objects] / Commands =
:title: [Icinga] Commands

--------------------------------------------------------------------------------
define command {
  command_name    <short_name>
  command_line    <command_line>
}
--------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
 * plugin 是 external program，透過 command definition 可以將其引入 Icinga。
 * commands 可以用在 host checks, service checks, notifications, event handlers
 * passing arguments, `!`, `\!`, `\\`
////////////////////////////////////////////////////////////////////////////////

== 參考資料 ==

 * http://docs.icinga.org/latest/en/configobject.html[3.3. Object Configuration Overview]

////////////////////////////////////////////////////////////////////////////////
** Commands are used to tell Icinga what programs, scripts, etc. it should execute to perform:
   *** Host and service checks
   *** Notifications 透過 command 送出 notificaiton??
   *** Event handlers and more...
////////////////////////////////////////////////////////////////////////////////

 * http://docs.icinga.org/latest/en/objectdefinitions.html[3.4. Object Definitions > Command Definition]

////////////////////////////////////////////////////////////////////////////////
** `command_name`: This directive is the short name used to identify the command. It is referenced in contact, host, and service definitions (in notification, check, and event handler directives), among other places. 感覺在其他 objects 之中，command 的組態算是最簡單的了
** `command_line`: This directive is used to define what is actually executed by Icinga when the command is used for service or host checks, notifications, or event handlers. Before the command line is executed, all valid macros are replaced with their respective values.
   *** Note that the command line is not surrounded in quotes. Also, if you want to pass a dollar sign ($) on the command line, you have to escape it with another dollar sign. (`$$`) 看來 command 才能用 macro，因為這裡才提及 $ 的 escape
   *** NOTE: You may not include a semicolon (`;`) in the `command_line` directive, because everything after it will be ignored as a config file comment. You can work around this limitation by setting one of the `$USER$` macros in your resource file to a semicolon and then referencing the appropriate `$USER$` macro in the `command_line` directive in place of the semicolon.
   *** If you want to pass arguments to commands during runtime, you can use `$ARGn$` macros in the `command_line` directive of the command definition and then separate individual arguments from the command name (and from each other) using bang (`!`) characters in the object definition directive (host check command, service event handler command, etc) that references the command.
////////////////////////////////////////////////////////////////////////////////

 * http://docs.icinga.org/latest/en/macrolist.html[5.3. Standard Macros in Icinga]

////////////////////////////////////////////////////////////////////////////////
** There are ten types of commands that Icinga recognizes and treats differently. They are as follows: 原來 command 應用的場合有 10 種之多，但 API 應該都是一樣的吧??
   *** Service checks
   *** Service notifications
   *** Host checks
   *** Host notifications
   *** Service event handlers and/or a global service event handler
   *** Host event handlers and/or a global host event handler
   *** OCSP command
   *** OCHP command
   *** Service performance data commands
   *** Host performance data commands
////////////////////////////////////////////////////////////////////////////////

