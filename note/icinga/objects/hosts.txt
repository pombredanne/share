= link:objects.html[Icinga / Objects] / Hosts =
:title: [Icinga] Hosts

--------------------------------------------------------------------------------
define host {
  host_name           <short_name>
  address             <ip_address_or_hostname>
  display_name        <descriptive_name>
  hostgroups          <hostgroup_shot_names>
  check_command       <command_short_name>
  check_interval      <check_inverval_units>
  retry_interval      <retry_interval_units>
  max_check_attempts  <max_retry_attempts>
}
--------------------------------------------------------------------------------

// initial_state -> check_command (check_interval + check_period) -> max_retry_attempts (retry_interval)
// state changed -> event_handler_enabled -> event_handler (event_handler_timeout)
// notification -> notification_enabled -> notification_period, notification_options, notification_interval, first_notification_delay -> contacts, contact_groups

== 參考資料 ==

 * http://docs.icinga.org/latest/en/configobject.html[3.3. Object Configuration Overview]

////////////////////////////////////////////////////////////////////////////////
** Hosts are one of the central objects in the monitoring logic. Important attributes of hosts are as follows:
   *** Hosts are usually physical devices on your network (servers, workstations, routers, switches, printers, etc).
   *** Hosts have an address of some kind (e.g. an IP or MAC address).
   *** Hosts have one or more more services associated with them. 知道某個 node 提供哪些 services、attributes
   *** Hosts can have parent/child relationships with other hosts, often representing real-world network connections, which is used in the network reachability logic.
////////////////////////////////////////////////////////////////////////////////

 * http://docs.icinga.org/latest/en/objectdefinitions.html[3.4. Object Definitions > Host Definition]

////////////////////////////////////////////////////////////////////////////////
** A host definition is used to define a physical server, workstation, device, etc. that resides on your network.
** `host_name`: This directive is used to define a short name used to identify the host. It is used in host group and service definitions to reference this particular host. Hosts can have multiple services (which are monitored) associated with them. When used properly, the `$HOSTNAME$` macro will contain this short name.
** `alias`: This directive is used to define a longer name or description used to identify the host. It is provided in order to allow you to more easily identify a particular host. When used properly, the `$HOSTALIAS$` macro will contain this alias/description. 實驗發現 `alias` 不像 `display_name` 不會顯示在畫面上，雖然標為紅色，但只要給了 `host_name` 好像 `alias` 就可以不給了?? 根據 "used to identify the host" 跟 "more easily identify a particular host" 說法，`alias` 的作用似乎跟 `host_name` 很像?? 但 alias 變長了，何來的 "more easily"??
** `address`: This directive is used to define the address of the host. Normally, this is an IP address, although it could really be anything you want (so long as it can be used to check the status of the host). You can use a FQDN to identify the host instead of an IP address, but if DNS services are not available this could cause problems. When used properly, the `$HOSTADDRESS$` macro will contain this address. 建議直接設定 IP，否則 DNS 掛點時會被拖累。
   *** If you do not specify an `address` directive in a host definition, the name of the host will be used as its address. A word of caution about doing this, however - if DNS fails, most of your service checks will fail because the plugins will be unable to resolve the host name.
** `display_name`: This directive is used to define an alternate name that should be displayed in the web interface for this host. If not specified, this defaults to the value you specify for the `host_name` directive. 大家都還滿習慣 hostname 的，所以通常不用額外給定 `display_name`。
** `parents`: This directive is used to define a comma-delimited list of short names of the "parent" hosts for this particular host. Parent hosts are typically routers, switches, firewalls, etc. that lie between the monitoring host and a remote hosts. A router, switch, etc. which is closest to the remote host is considered to be that host's "parent".
   *** If this host is on the same network segment as the host doing the monitoring (without any intermediate routers, etc.) the host is considered to be on the local network and will not have a parent host. Leave this value blank if the host does not have a parent host (i.e. it is on the same segment as the Icinga host). The order in which you specify parent hosts has no effect on how things are monitored.
** `hostgroups`: This directive is used to identify the short name(s) of the hostgroup(s) that the host belongs to. Multiple hostgroups should be separated by commas. This directive may be used as an alternative to (or in addition to) using the `members` directive in hostgroup definitions. 建議從 host 去指定 hostgroups，因為通常 hostgroups 的規劃不會因環境而異，但不同環境下的 hosts 可能會很不一樣... 這樣 hostgroups 就可以在不同環境之間共用
** `check_command`: This directive is used to specify the short name of the command that should be used to check if the host is up or down. Typically, this command would try and ping the host to see if it is "alive". The command must return a status of OK (0) or Icinga will assume the host is down. 注意這裡的說法是 "typically"，預設不一定是用 ping 的方式
   *** If you leave this argument blank (怎麼留白??), the host will not be actively checked. Thus, Icinga will likely always assume the host is up (it may show up as being in a "PENDING" state in the web interface). This is useful if you are monitoring printers or other devices that are frequently turned off.
   *** The maximum amount of time that the notification command can run is controlled by the `host_check_timeout` option.
** `initial_state`: By default Icinga will assume that all hosts are in UP states when in starts. You can override the initial state for a host by using this directive. Valid options are: `o` = UP, `d` = DOWN, and `u` = UNREACHABLE.
** `max_check_attempts`: This directive is used to define the number of times that Icinga will retry the host check command if it returns any state other than an OK state. Setting this value to `1` will cause Icinga to generate an alert without retrying the host check again.
   *** If you do not want to check the status of the host (不管結果直接發 alert), you must still set this to a minimum value of `1`. To bypass the host check, just leave the `check_command` option blank.
** `check_interval`: This directive is used to define the number of "time units" between regularly scheduled checks of the host. Unless you've changed the `interval_length` directive from the default value of 60, this number will mean minutes.
** `retry_interval`: This directive is used to define the number of "time units" to wait before scheduling a re-check of the hosts. Hosts are rescheduled at the retry interval when they have changed to a non-UP state.
   *** Once the host has been retried `max_check_attempts` times without a change in its status, it will revert to being scheduled at its "normal" rate as defined by the `check_interval` value.
** `active_checks_enabled` *: This directive is used to determine whether or not active checks (either regularly scheduled or on-demand) of this host are enabled. Values: 0 = disable active host checks, 1 = enable active host checks. 注意是同時停用了 scheduled/on-demand checks
** `passive_checks_enabled` *: This directive is used to determine whether or not passive checks are enabled for this host. Values: 0 = disable passive host checks, 1 = enable passive host checks. 就算從 external command file 寫入結果也沒反應??
** `check_period`: This directive is used to specify the short name of the time period during which "active checks" of this host can be made.
** `event_handler`: This directive is used to specify the short name of the command that should be run whenever a change in the state of the host is detected (i.e. whenever it goes down or recovers). 注意有產生變化就會被執行，不過是 down 還是 recovered。
   *** The maximum amount of time that the event handler command can run is controlled by the `event_handler_timeout` option.
** `event_handler_enabled` *: This directive is used to determine whether or not the event handler for this host is enabled. Values: 0 = disable host event handler, 1 = enable host event handler.
** `process_perf_data` *: This directive is used to determine whether or not the processing of performance data is enabled for this host. Values: 0 = disable performance data processing, 1 = enable performance data processing. 處理之後會存到哪裡??
** `retain_status_information`: This directive is used to determine whether or not status-related information about the host is retained across program restarts. This is only useful if you have enabled state retention using the `retain_state_information` directive. Value: 0 = disable status information retention, 1 = enable status information retention.
** `retain_nonstatus_information`: This directive is used to determine whether or not non-status information about the host is retained across program restarts. This is only useful if you have enabled state retention using the `retain_state_information` directive. Value: 0 = disable non-status information retention, 1 = enable non-status information retention. 但 nonstatus 跟 state 有什麼關係??
** `contacts`: This is a list of the short names of the contacts that should be notified whenever there are problems (or recoveries) with this host. Multiple contacts should be separated by commas. Useful if you want notifications to go to just a few people and don't want to configure contact groups.
** `contact_groups`: This is a list of the short names of the contact groups that should be notified whenever there are problems (or recoveries) with this host. Multiple contact groups should be separated by commas.
** `notification_interval`: This directive is used to define the number of "time units" to wait before re-notifying a contact that this host is still down or unreachable.
   *** If you set this value to 0, Icinga will not re-notify contacts about problems for this host - only one problem notification will be sent out.
** `first_notification_delay`: This directive is used to define the number of "time units" to wait before sending out the first problem notification when this host enters a non-UP state. 在 `max_check_attempts` 之後?? 意思是時間內又變回 UP 就不發嗎??
   *** If you set this value to 0, Icinga will start sending out notifications immediately.
** `notification_period`: This directive is used to specify the short name of the time period during which notifications of events for this host can be sent out to contacts. If a host goes down, becomes unreachable, or recoveries during a time which is not covered by the time period, no notifications will be sent out. 應該會想通知另一組人吧，怎麼會不做通知??
** `notification_options`: This directive is used to determine when notifications for the host should be sent out. Valid options are a combination of one or more of the following: `d` = send notifications on a DOWN state, `u` = send notifications on an UNREACHABLE state, `r` = send notifications on recoveries (OK state), `f` = send notifications when the host starts and stops flapping, and `s` = send notifications when scheduled downtime starts and ends. 設定哪些 states 的變化才要通知，預設是全部，如果不想通知的話可以設成 `n`。
   *** If you specify `n` (none) as an option, no host notifications will be sent out. If you do not specify any notification options, Icinga will assume that you want notifications to be sent out for all possible states.
** `notifications_enabled` *: This directive is used to determine whether or not notifications for this host are enabled. Values: 0 = disable host notifications, 1 = enable host notifications.
** A host group definition is used to group one or more hosts together for simplifying configuration with object tricks or display purposes in the CGIs.
** `hostgroup_name`: This directive is used to define a short name used to identify the host group.
** `alias`: This directive is used to define is a longer name or description used to identify the host group. It is provided in order to allow you to more easily identify a particular host group.
** `members`: This is a list of the short names of hosts that should be included in this group. Multiple host names should be separated by commas. This directive may be used as an alternative to (or in addition to) the `hostgroups` directive in host definitions.
** `hostgroup_members`: This optional directive can be used to include hosts from other "sub" host groups in this host group. Specify a comma-delimited list of short names of other host groups whose members should be included in this group. 把其他 group 的成員引進來，形成 sub-hostgroup 的效果。
////////////////////////////////////////////////////////////////////////////////

