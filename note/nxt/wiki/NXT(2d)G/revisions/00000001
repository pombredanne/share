= NXT-G =
<<TableOfContents>>

== NXT-G Tips & Tricks (Updated 2008/07/25) ==

These are a collection of NXT-G tips & tricks written by http://mindstorms.lego.com/MeetMDP/BDavis.aspx[Brian Davis]. These are not "official" tips, just a collection of his own thoughts and rules when he uses NXT-G V1.1

 1. First Rule of NXT-G: Don't rush(匆促行事) the editor. When you are inserting a block between existing blocks, you can click & drag it in to position so the 1x3 "shadow" shows in the right place... but don't actually drop it until the editor makes room for it. For reasons unknown, the editor seems to get "lost" most often if you rush it, and assume that it knows where all the drops, clicks, and releases in an ''editing sequence'' were.

    .{{attachment:paste1by3.png}}
	
 2. __Second Rule of NXT-G (&, really, everything else on a computer): "Save Frequently, Save Often ". Because you never know when something you did might pervert something that was working before, or when the editor might crash. '''Don't save over working copies with the same name, but save "new versions" of programs (& My Blocks!), so you can always backup a step or three.'''__

 3. Third Rule of NXT-G: Use My Blocks. These save huge amounts of memory, promote good coding, make things more readable, etc. About the only bad thing I have to say about My Blocks is you can occasionally (OK, I'm the only one I know who's done this) get them so they seem "broken" in the editor, but the compiler will still produce perfectly good code from them; that looks bad but seem to work fine. __As far as(就...而言) learning to program, '''I'm beginning to think My Blocks promote reusable, self-contained code more than most text-based languages do.'''__

 4. Switches look great in "flat" form - now get rid of(扔掉) them. The "tabbed" form is both more useful '''(you can wire in & out of it in tabbed view, and can have more than two states; 看起來似乎 flat view 是不支援 wire in/out 的動作的)''' & more stable (possibly because it's much closer to how NI does this in LabVIEW, while the "flat" format may be a special adaptation for NXT-G only).__

    .{{attachment:switch.png}}
	
    .When wiring within a tabbed Switch structure, the wiring works fine in the "first" tabbed field (the "true" field of a logical Switch, for example), but does funny "straight wires to infinity" things in the other fields. You can wire up things on the ''sequence beam'' behind a Switch, and then select the entire thing (wires too) and drag it in to make your life easier.
	
 5. __ '''Don't use variables when a wire will do. I know every one of us from text-based languages finds this hard to handle, but NXT-G handles wiring values forward better in some cases than it does actual variables (among the problems: all variables are global, and long variable names aren't visible; 事實上 wiring 背後就有 local variables 的概念).'''__

 6. When wiring, first give yourself plenty of space in Switches & Loops (the old "crowbar & pin" routine). Do it once, and you don't have to do it again. Then use wires in ways that make sense to you (not just "hook up two points"). Clicking at an intermediate position allows you to "Tack" the wire to that point, and bend it another way along the next segment.

    .{{attachment:crowbar.png}}

 7. Try to resist the multiplication of sequences (tasks) every time you think you need to do "something else". First, that slows things down and often isn't needed.

    .{{attachment:tasks.png}}

    .Second, while NXT-G is pretty good on editing the first sequence... it's much poorer on the second, third, etc. Likewise splitting off a sequence from mid-sequence can work great if it's the last thing you do, but if you add/subtract any blocks ahead of that split later... things can get decidedly odd. Avoid if at all possible.

 8. Debug with blocks that make your life easier, not harder. Below are two My Blocks that end up in nearly every program I write, because they're easy to use, and therefore make debugging insanely easy as well, PrintNumber and the block it calls, Printline
 
    .{{attachment:PrintLined.png}} <<BR>> http://www.teamhassenplug.org/NXT/NXTGTips/PrintLine.rbt[PrintLine.rbt (202.87k)]
    
    .{{attachment:PrintNumberd.png}} <<BR>> http://www.teamhassenplug.org/NXT/NXTGTips/PrintNumber.rbt[PrintNumber.rbt (181.86k)]

    .Note these are not complex or difficult My Blocks - in fact, you might think why bother at all. But with PrintNumber, I can drop a single block and that's all I need to get labeled, formatted numerical output on the LCD. Nothing earth-shattering(驚天動地的)... but it makes debugging easy instead of a task. And by having one My Block that calls another, I can make sure that these blocks only exist in memory ONCE, and all my simple screen prints are done through them. Saves memory, and the only cost is that I can't have two parallel sequences drawing to the LCD at once (and if that happens, actually, one just waits for the other, so 9 times out of 10 you don't even notice it).
	

PrintLine.rbt ( 202.87k )

	

PrintNumber.rbt ( 181.86k ) 

Simple Sound blocks that "beep" at a different tone are another good example of debugging.

 9. Option-dragging (on the Mac, Ctrl-dragging on the PC) an existing block (or series of blocks) clones them, with all their internal settings preserved. In other words once you have that "Motor B" block on the programming field, you need never go to the pallet to drop a new one and reconfigure it yet again, just "clone-drag" an existing block.

 10. Have I mentioned "Wait for the Editor" yet? And if you get tired of the editor taking so blasted long to shift things, and all the icons in the map view in the lower right-hand corner look like single pixels... see Rule Three (but before you do it, use Rule Two again).

 11. The great Copy-Paste issue. I don't know why, but I've not had good luck with this. However, Option-drag (Ctrl-drag) has been just great. So the result is the only time I personally use a Copy-paste type edit is when I'm taking something from one sheet and trying to get it into a second, different sheet.

 12. Oh, and for designing those My Block icons, you can drop multiple overlapping icons, as well as resize them. Deleting an icon however had me stumped for a very long time. On the Mac, you need to select the icon you want to remove, and hit fn-delete ("function delete"). Actually still the only use for the "fn" key on my computer I've ever needed. (just "Delete" on the PC)

 13. Incomplete sequence beams through a Loop & other odd structures. Ever had a Switch in side a Loop, and for some reason the sequence from the end of the Switch doesn't reach the tail of the Loop? This is a sign that the editor is starting to miss things. One way to fix it is to grab and pull free the entire Switch, and then replace it (being careful to follow Rule One above), and you'll find the editor has "found" the connection again. Likewise sometimes deleting the last block out of a Loop (particularly a Loop set to trigger on a sensor) will result in a Loop with no internal "space" to seed block into. If that's the case, delete the loop and drop a new one.

 14. Undo for Mental Health: In general, if something looks wrong... assume it is. Either re-do it (following Rule One ), or use the other fantastic hidden tool at your disposal, "undo" (either from the edit menu, or the keyboard shortcut). This seems to work really well, even undoing the polite "rewiring" NXT-G sometimes (often) tries to do for you.

 15. You can't wire into a Wait (to have the program set a condition that wasn't know at compile time) or a Switch... but you can always use Compare Logic blocks to come up with a condition, and set the Switch to select on logical, or wire a value into a Loop that does some internal checking to produce a logical that controls the Loop. Honestly, I think the default dropped state for the Loop and Switch should be "control on logical", as this is such a useful concept... and avoids some of the issues that crop up in #13 , above.
	
 16. Clipping wires: selecting a wire and hitting delete not only removes it, but every wire attached to it, not just annoying but it can make you loose track of where the wires were coming from / going to. But if you click on the downstream (output) end of a wire, only that little branch is removed, preserving the rest of a multiply-branching wire. Oh, and while we're discussing wires (again), if you have a wire with a "bend" in it, but it's not the way you want it ("up and over" when what you need is "over & up"), just tap the space bar.

 17. When no block is selected, the "1", "2", & "3" keys will select the pallet you want forward. Also the "tab" key cycles through the tools.

 18. If possible, don't mess with the directory structure. NXT-G is really good about finding things (My Blocks, for instance) that have been moved... but not always, and searching takes time, especially when you open a program.

== Array Support ==

__'''畢竟 NXT 是個 "玩具", 而且 NXT-G 也只是用來 "入門" 程式設計而已, 其他進階的程式設計環境多的是 - LeJOS, NXC 等. 就 NXT-G 不支援陣列這件事而言, 初學者必須在沒有陣列可用的環境下, 去感受沒有陣列是一件多麼麻煩的事, 進而認識到陣列的使用時機.'''__

=== An Array of Solutions (2006/06/03) ===
http://thenxtstep.blogspot.com/2006/06/array-of-solutions.html

OK, so far we’ve probably painted a pretty picture of the NXT. But some of you are likely saying “wait a minute, where’s the down side?” And there are some – after all(畢竟), this is first and foremost a toy (educational or otherwise) aimed at kids, not adults with computer science and engineering degrees(程度). So there are some things that are missing from the out-of-the-box kit. In terms of parts, this isn’t a critical problem; I (and a lot of others… you know who you are) have a lot of LEGO around the house, and it’s fully compatible. Even in terms of motors and sensors, the NXT is a more “complete” kit than the RCX (for example, the RCX with three motor ports generally came with only two motors, while the NXT comes complete with a full complement of three motors). But what about the software?

There are (from my viewpoint – again, to be honest, I’m not the target market for this) some things missing that I really wish were built in to the software. Arrays are a really good example: __NXT-G has no official support for arrays, yet I find them very useful. But NXT-G is powerful enough that with a little bit of work (and a good deal of fun) I can get around this, and have my own arrays!__

__The method I’ve used (I’m sure there are others) uses the file system on the NXT. For each ''element'' of an array, I just create a very short ''on-brick file'' to hold that number: essentially, the array is just a series of numbered files on the NXT. '''(陣列裡的每一個元素都用一個檔案來存放; 由於 NXT-G 採用 Flash 來實作檔案系統, 只要把它視為手動在配發記憶體位置即可, 從這個角度看來, 這個方法是極具教育價值的...)'''__ What would be really nice is if you could just add this ability into NXT-G in a way even a kid could understand. Gee, yeah, that would be really nice…

Remember MyBlocks?

{{attachment:ArrayRead.0.png}}

Here I’ve created two MyBlocks, ArrayRead (which will read a number from a specific element of the array) and... ArrayWrite (to write a number into the array). Take a look.

{{attachment:ArrayWrite.0.png}}

With these as MyBlocks, all these messy details are hidden, and almost anybody can use them as easily as the "stock" blocks from the official NXT-G pallets. For instance, to test these MyBlocks I wrote a simple program that just puts five random numbers into an array, and then reads them out to display on the screen. Notice that the code is pretty much self-documenting used this way.

{{attachment:TestArray.png}}

While this is a reasonable way to do arrays, there's a deeper point here. Yes, there are things missing from the language. But in a lot of cases, you can write MyBlocks to patch these holes (like arrays, trig functions(三角函數), etc.)... and learn (or teach!) something in the process. It this extendability of the language that I think is its greatest strength, and kudos(名望) to LEGO and NI for keeping it in. Now, when we need something implemented in the NXT-G language... we can do it ourselves.

=== Array NXT-G Block ===
http://nxtasy.org/2006/12/17/array-block-10-beta-version/

{{attachment:array.png}}

I’ve uploaded http://nxtasy.org/wp-content/uploads/2006/12/array-block.zip[here] my NXT-G “Array Block” directory. It is fully functional, but lacks any documentation at present. It uses Text wires to pass array data (NXT-G does not support array wires at present) as “binary string”. The array elements are numbered 1,2,3,… A value 0 in the Position control reads the last element or writes to the next free element. Negative values can be used to start counting from the end of the array (i.e. reading from Position -2 reads the one before last element etc.). Padding and resizing is done automatically in Write mode when Position is out of bounds. A negative Size value in Create/resize mode means adding/removing elements from the beginning of the array, rather then the end (positive Size value).

I’ve used some nice NXT-G Blocking techniques in this Block, some of them use undocumented toolkit functions and/or LabView functions. These will be reviewed in an upcoming post.

Feel free to download and test it, and I’ll be happy for any feedback (good or bad..) by email to guy@nxtasy.org.

 * Contributer: Guy Ziv
 * Download: [[attachment:array-block.zip|Zip File]]
 * Sample Program: [[attachment:ArraySampled.png|.PNG]], [[attachment:ArraySample.rbt|.RBT]]

== Floating Point Math?, Possible in NXT-G ==
http://forums.nxtasy.org/index.php?showtopic=506&st=0&p=4321&#entry4321

Is it possible to have decimal number math in NXT-G?

 __No. Which just means if you want to work with FP under NXT-G, you have to implement it yourself__ (like for trig(三角學) blocks, etc.). Although I've got to say in several years of working on the RCX, I never ever needed to use FP numbers, and only did it on the NXT when I got it because I thought it was a good test of how far I could push math under NXT-G, (and it's handy for dead reckoning(計算), which I'm now doing more of).

"...Implement it yourself..." What's that mean specifically?

 __'''Well, computers, all computers, really just use integers (0's and 1's), but ''simulate'' decimal numbers.''' So all you have to do is do the same. One way to do this is to do math using numbers multiplied by something like 10,000: that way, you can represent "1.01" as 10,100, and add and subtract, etc, normally, always remembering that the numbers you're dealing with are "really" 10,000 times larger than the numbers they represent.__ I implemented a number of trig blocks under a similar system. Here's some screenshots:

 http://www.brickshelf.com/cgi-bin/gallery.cgi?i=1898079[One Cos(x) implementation under NXT-G]

 Look through that http://www.brickshelf.com/cgi-bin/gallery.cgi?f=191310[BS folder] for some other, easier examples, like `sqrt(x)`. Computers usually do it a different way, by keeping the exponent (指數; where the decimal point is) and the mantissa (尾數; the "numberish" part) seperate, and complicating the math that way __(actually, for a full implementation, that's a lot better, but '''for the tiny bit of ''low-precision FP math'' I need on the NXT, I was OK with the way I did it''').__

 Is this harder than having the SW developer do it for you? Absolutely. Then again, if I wanted it easy, I wouldn't be working on a hobbist(君主專制必要論) robot trying to push the limits of a language I'm less familier with.

I may be wrong on this, but I thought ''NXT-G rounded you down at the end of each math block'', thus making it impossible to multiply a decimal number (the result of many math blocks.) by 10,000. Additionally, the original idea was to use the decimal number for a number of rotations, so this way couldn't work. Unless my first statement was incorrect, then it would work. (這些看似是個問題, 但只需要一點小技巧或者 "換個角度" 就可以解決了...)

 .You're correct, but that doesn't mean you can't work around this. For instance, let's say I want the motor to turn 20/50's of a rotation (that's what you mean by a "decimal number", correct? 0.4 rotations in this case). If I divide "20" by "50" in a Math block, I'll wire out... "0", which I could then multiply by 360 to get the number of degrees to turn the motor... in this (wrong) case, again, that would be "0" (as 360 times 0 is equal to 0). __Instead, multiply the numerator by 1000, then divide by the denominator: 20 * 1000 = 20,000, and 20,000 / 50 = 400. Now we have to convert that to degrees (because you are quite correct, you can't "wire in" some fractional number of rotations), so we multiply by 360 (just as before), 400 * 360 = 144,000.__ But remember that inital multiplication just to get things "bigger" so NXT-G doesn't cut off the decimal part we're interested in?, well, if we multiplied by 1000 initally, I need to divide by 1000 at the end here to get the "real" (not scaled up) answer: 144,000 / 1000 = 144, the number of degrees to turn the motor. And that is, in this case exactly, 0.4 rotations.

 .__'''That I confess(承認) is a simple example, and there will be ''rounding error'' at some level (try the same stunt(引人注意的舉動) with "20" divided by "51", and see what happens (不論支援浮點數與否, 算出來的結果都是 141; 上面所說的 "rounding error" 指的可能是 "越差越遠" 的意思),''' remembering NXT-G truncates (or rounds? I'm not sure) after every Math block), and perhaps more difficult you need to make sure that your "scaled up" values don't get too large (overflow) at any ''intermediate stage'' of the calculation (this was a bigger headache on the RCX, with lower precision - the NXT, with more bits per number, at least makes this easier).__ But it does work, and, after all, it's what a computer program does for you normally, one way or another (as I've noted, very few do work this way, but use a different system with the mantissa and exponent, as well as some different ways of solving things like trig functions (CORDIC, which I felt was overkill, given the precision under NXT-G and the motor encoders)).

 .Well, I didn't know that context, but (as I tried to show above) it would still work. It just requires you to think very carefully about what you want, and how to mathmatically "get there".

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==

 * 雖然目前 NXT-G 變不出太複雜的東西, 但對於帶領程式設計概念是有吸引力的... 它還是可以做為 Python 的前導課程 @2009/03/25
 * My Block 在建立之初, 如果有 input wire 引入這個區段, 那麼新建立的 My Block 就會有 input plug. * 為什麼隨隨便便一支 `.rtb` 檔佔用數百 K, 甚至是 MB[?]

