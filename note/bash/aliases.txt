= link:bash.html[Bash] / Aliases =
:title: [Bash] Aliases

用單引號或雙引號其實是有差別的。

--------------------------------------------------------------------------------
$ alias hello="echo Hello, $WHO"
$ alias | grep hello
alias hello='echo Hello, World'
$ alias hello='echo Hello, $WHO'
$ alias | grep hello
alias hello='echo Hello, $WHO'
--------------------------------------------------------------------------------

== 參考資料 ==

.網站
--
 * http://alias.sh/[alias.sh | Manage, share and source your aliases online.]
--

.文件
--
 * http://en.wikipedia.org/wiki/Alias_(command)[alias (command) - Wikipedia, the free encyclopedia]
 * http://www.linfo.org/alias.html[How to use the alias command, by The Linux Information Project (LINFO)]

////////////////////////////////////////////////////////////////////////////////
** The alias command is built into a number of shells including ash, bash (the default shell on most Linux systems), csh and ksh. It is one of several ways to customize the shell (another is setting environmental variables). Aliases are recognized only by the shell in which they are created, and they apply only for the user that creates them, unless that user is the root (i.e., administrative) user, which can create aliases for any user. 原來 alias 是 shell 的一部份。
** The general syntax for the alias command varies somewhat according to the shell. In the case of the bash shell it is `alias [-p] [name="value"]` When used with no arguments and with or without the `-p` option, alias provides a list of aliases that are in effect for the current user
** Some of the aliases listed are likely to be system-wide aliases that apply to all users and are created automatically for each new user for a particular shell.
** Aliases for any other shell can be seen by first switching to that shell and then using the alias command as above.
** name is the name of the new alias and value is the command(s) which it initiates. The alias name and the replacement text can contain any valid shell input except for the equals sign ( = ). The commands, including any options, arguments and redirection operators, are all enclosed within a single pair of quotation marks, which can be single quotes or double quotes. No spaces are permitted before or after the equals sign. 注意等號兩側不能有空白，因為空白是用來隔開多個 name/value pairs。
** An alias can be created with the same name as the core name of a command (i.e., a command without any options or arguments). In such case, it is the alias that is called (i.e., activated) first when the name is used, rather than the command with the same name. 小心可能造成其他 scripts 執行起來有問題
** For example, an alias named `ls` could be created for the command `ls -al` as follows: `alias ls="ls -al"`
** Such an alias can be disabled temporarily and the core command called by preceding it directly (i.e., with no spaces in between) with a backslash, i.e., `\ls` 沒想到還有這招
** It makes no difference whether double or single quotes are used when creating an alias. 事實上是有差別的!!
** Multiple commands can be included in the same alias by inserting them within the same pair of quotation marks and separating them with semicolons.
** Aliases can even be created to call other aliases. For example, if the alias `ls` as shown earlier had already been created, then `pl` will launch it in the above example, otherwise it will launch the conventional `ls` command.
** The following is an example of creating two separate aliases simultaneously, as contrasted with creating a single alias that launches two separate commands: `alias p="pwd" l="ls -al"`
** As an example of an alias for a series of commands linked by a pipe (represented by a vertical line), the alias dir can be created to generate a list of the names of and information about all of the subdirectories in the current directory: `alias dir="ls -al | grep ^d"`
** Not only can options and arguments be used in the command(s) that an alias can substitute for, but they can also be used with an alias that has already been created.
** The `alias` command is unusual in that it only has a single option. That option, `-p`, tells it to display a list of the aliases for the current user on the current shell. This might be helpful if used when creating an alias, but it is, of course, redundant when the alias command is used without arguments.
** A fourth use of aliases is increasing the safety of the system by making commands interactive. This forces the user to confirm that it is desired to perform a specific action and thereby reduces the risk from accidental or impulsive abuse of powerful commands. For example, the rm command, which can remove files and directories and make them virtually unrecoverable, can be made interactive as follows: `alias rm="rm -i"`
** Likewise, the risks associated with the cp command, which is used to copy the contents of one file to another file, can also be reduced by making it interactive by default. If the name for the file to be written to does not exist in the specified directory (by default the current directory), it will be created, but if it already exists, its contents will be overwritten. Thus, creating the following alias will reduce the chances of an unintended overwriting: `alias cp="cp -i"`
** any alias can be made more enduring (i.e., until it is explicitly removed) by writing it to the appropriate configuration file with a text editor. The name and location of such file can vary according to the system. In the case of Red Hat Linux, an alias for any user can be added to the `.bashrc` file in that user's home directory. Because this file is read at login, the change will not take effect until the user has logged in again.
** Aliases for the root user can be made permanent by entering them in the `.bashrc` file in the root's home directory, i.e., in `/root/.bashrc`. System-wide aliases can be put in the `/etc/bashrc` file. The system needs to be restarted before system-wide aliases can take effect.
** The command unalias, which is likewise built into bash and some other shells, is used to remove entries from the current user's list of aliases. Its syntax is `unalias [-a] name(s)`
** unalias removes not only aliases created during the current session but also permanent aliases that are listed in system configuration files. The `-a` option tells unalias to remove all aliases for the current user for the current shell.
////////////////////////////////////////////////////////////////////////////////

 * http://www.cyberciti.biz/tips/bash-aliases-mac-centos-linux-unix.html[30 Handy Bash Shell Aliases For Linux / Unix / Mac OS X] (2012-06-11)
--

