= link:npm.html[npm] / Install/Update/Uninstall =
:title: [npm] 安裝／昇級／移除套件

== 安裝 ==

安裝套件由 `npm install` 完成。

 npm <package> install [ <options> ]

常用的 options 有：

 * `-g, --global` - `npm install` 預設會將 dependencies 裝在 current package root 底下的 `node_modules/` 子目錄。

== 完整的用法 ==

[source,console]
--------------------------------------------------------------------------------
$ npm install -h
npm install
npm install <pkg>
npm install <pkg>@<tag>
npm install <pkg>@<version>
npm install <pkg>@<version range>
npm install <folder>
npm install <tarball file>
npm install <tarball url>
npm install <git:// url>
npm install <github username>/<github project>

Can specify one or more: npm install ./foo.tgz bar@stable /some/folder
If no argument is supplied and ./npm-shrinkwrap.json is 
present, installs dependencies specified in the shrinkwrap.
Otherwise, installs dependencies from ./package.json.

$ npm uninstall -h
npm uninstall <name>[@<version> [<name>[@<version>] ...]
npm rm <name>[@<version> [<name>[@<version>] ...]

$ npm update -h
npm update [pkg]
--------------------------------------------------------------------------------

== 參考資料 ==

 * https://npmjs.org/doc/install.html[install]
 * https://npmjs.org/doc/update.html[update]
 * https://npmjs.org/doc/uninstall.html[uninstall]
 * http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/[npm 1.0: Global vs Local installation] ^https://diigo.com/0ztov[閱讀]^ (2011-03-24) - 為什麼要分 glocal/local mode 的歷史因素。

////////////////////////////////////////////////////////////////////////////////
** In npm 0.x, there was a command called `bundle` that a lot of people liked. bundle let you install your dependencies locally in your project, but even still, it was basically a hack that never really worked very reliably.
** globally —- This drops modules in `{prefix}/lib/node_modules`, and puts executable files in `{prefix}/bin`, where `{prefix}` is usually something like `/usr/local`. It also installs man pages in `{prefix}/share/man`, if they’re supplied. 這裡的 `{prefix}` 指的就是 `./configure --prefix={prefix}`
** locally —- This installs your package in the current working directory. Node modules go in `./node_modules`, executables go in `./node_modules/.bin/`, and man pages aren’t installed at all.
** Whether to install a package globally or locally depends on the global config, which is aliased to the `-g` command line switch.
** global packages are important, but best avoided if not needed. 這是很特別的思維，可以有效避開版本的衝突!! 不知道 Python 有沒有這種東西??
** If you’re installing something that you want to use in your program, using `require('whatever')`, then install it locally, at the root of your project. If you’re installing something that you want to use in your shell, on the command line or something, install it globally, so that its binaries end up in your `PATH` environment variable. 有提供 CLI 時才走 global mode，規則還滿簡單的。
** Install it in both places. Seriously, are you that short on disk space? It’s fine, really. They’re tiny JavaScript programs. 可以用到 CLI，又可以讓不同 projects 使用不同的版本。況且下面第二種做法在不支援 symbolic links 的 OS 就行不通了 Install it globally, and then `npm link coffee-script` or `npm link express` (if you’re on a platform that supports symbolic links.) Then you only need to update the global copy to update all the symlinks as well.
** The first option is the best in my opinion. Simple, clear, explicit. The second is really handy if you are going to re-use the same library in a bunch of different projects.
** In this case, npm will install redis into `~/projects/foo/node_modules/redis`. Sort of like how git will work anywhere within a git repository, npm will work anywhere within a package, defined by having a `node_modules` folder. 從 CWD 往上找有 `node_modules` 的目錄，就是 project root。但這跟 local mode 的 `./node_modules` 有什麼不同??
////////////////////////////////////////////////////////////////////////////////

