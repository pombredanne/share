= Learning UML 2.0 - A Pragmatic Introduction to UML =
http://oreilly.com/catalog/9780596009823/index.html
<<TableOfContents>>

== Overview ==

"Since its original introduction in 1997, the Unified Modeling Language has revolutionized software development. __Every integrated software development environment in the world--open-source, standards-based, and proprietary--now supports UML and, more importantly, the ''model-driven approach'' to software development.__ This makes learning the newest UML standard, UML 2.0, critical for all software developers--and there isn't a better choice than this clear, step-by-step guide to learning the language." --Richard Mark Soley, Chairman and CEO, OMG

If you're like most software developers, you're building systems that are increasingly complex. Whether you're creating a desktop application or an enterprise system, complexity is the big hairy monster you must manage.

__The Unified Modeling Language (UML) helps you manage this complexity. Whether you're looking to use UML as a ''blueprint language'', a ''sketch tool'', or as a ''programming language'', this book will give you the need-to-know information on how to apply UML to your project.__ While there are plenty of books available that describe UML, Learning UML 2.0 will show you how to use it. Topics covered include:


 * __Capturing your ''system's requirements'' in your ''model'' to help you ensure that your designs meet your users' needs__
 * Modeling the parts of your system and their relationships
 * __Modeling how the parts of your system work together to meet your system's requirements__
 * Modeling how your system moves into the real world, capturing how your system will be deployed

Engaging and accessible, this book shows you how to use UML to craft(精心製作) and communicate your project's design. Russ Miles and Kim Hamilton have written a pragmatic introduction to UML based on ''hard-earned practice'', not theory. Regardless of the software process or methodology you use, this book is the one source you need to get up and running with UML 2.0. Additional information including exercises can be found at www.learninguml2.com.

Russ Miles is a software engineer for General Dynamics UK, where he works with Java and Distributed Systems, although his passion at the moment is Aspect Orientation and, in particular, AspectJ. Kim Hamilton is a senior software engineer at Northrop Grumman, where she's designed and implemented a variety of systems including web applications and distributed systems, with frequent detours(繞路) into algorithms development.

== Preface ==

__The Unified Modeling Language (UML) is the standard way to ''model systems'', particularly ''software systems''.__ If you are working on a system beyond "Hello, World," then having UML in your toolbox of skills is a must, and that's where Learning UML 2.0 comes in.

Learning UML 2.0 is about coming to grips(掌握) with UML quickly, easily, and practically. Along with a thorough(詳盡的) set of tutorials on each of the different UML diagram types, this book gives you the tools to use UML effectively when designing, implementing, and deploying systems. The topics covered include:

 * A brief overview of why it is helpful to model systems
 * __How to capture ''high-level requirements'' in your model to help ensure the system meets users' needs__
 * How to model the parts that make up your system
 * __How to model the ''behavior'' and ''interactions'' between parts when the system is running__
 * How to move from the model into the real world by capturing how your system is deployed
 * __How to create custom ''UML profiles'' to accurately model different ''system domains''__

=== Audience ===

Learning UML 2.0 is for anyone interested in learning about UML, but it is helpful to have some exposure to ''object-oriented (OO) design'' and some familiarity with Java. However, even if you have only a small amount of experience with object orientation, __Learning UML 2.0 will improve and extend your knowledge of OO concepts and give you a comprehensive set of tools to work with UML.__

Although this book is intended to take you through each subject on the path to learning UML, some UML modeling subjects, such as use cases and activity diagrams, are self-explanatory, which means you can dive right into them.

=== About This Book ===

Learning UML 2.0 aims to answer the "what," "how," and "why should I care?" for every aspect of UML. Each chapter picks one subject from UML and explains it based on these questions.

Since not everyone is new to UML, there are two main routes through this book. If you're new to UML as a subject and want to get an overview of where the modeling language came from, then you should start with Chapter 1. However, if you want to get your hands dirty as quickly as possible, then you can either skip the introduction chapter to delve(探究) directly into ''use cases'' or jump to the chapter that describes the UML diagram in which you are most interested.

Now you know what Learning UML 2.0 is about, it should be explained what this book is not about. __This book is not about any one particular modeling tool or ''implementation language''. However, some tools have their own way of doing things, and '''some implementation languages do not support everything you can legally model in UML.'''__ Wherever appropriate, we have tried to point out where UML tools or implementation languages deviate(背離) from or follow the UML standard.

__Lastly, because of the large variation in software development processes, this book is not about any particular process or methodology. Instead, it focuses on modeling and provides ''guidelines'' about appropriate levels of modeling that can be applied in the context of your software development process. '''(原來 UML 跟 RUP 沒有絕對的關係, 它只是一個適用於不同 development processes 的 tools 而已)'''__ Since this book adheres to the UML 2.0 standard, it works alongside(並行) any process or methodology you use.

=== Assumptions This Book Makes ===

The following general assumptions are made as to the reader's knowledge and experience:

 * An understanding of object orientation
 * Knowledge of the Java? language for some of the examples

== Chapter 1. Introduction ==

[[|:]]

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==
