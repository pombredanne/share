= UML =
<<TableOfContents>>

== Class Diagram (Wikipedia) ==
http://en.wikipedia.org/wiki/Class_diagram @2008/10/26

In the Unified Modeling Language (UML), a class diagram is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, and the relationships between the classes.

=== Relationships ===

A relationship is a general term covering the specific types of ''logical connections'' found on class and object diagrams. UML shows the following relationships:

==== Instance Level Relationships ====

'''Link'''

A Link is the basic relationship among objects. It is represented as a line connecting two or more object boxes. It can be shown on an object diagram or class diagram. A link is an instance of an association.

'''Association'''

{{attachment:400px-UML_role_example.gif}} <<BR>> Class diagram example of association between two classes

An Association represents a family of links. Binary associations (with two ends) are normally represented as a line, with each end connected to a class box. __''Higher order associations'' can be drawn with more than two ends. In such cases, the ends are connected to a ''central diamond''. (這個做法並不常見?)__

__An association can be named, and the ends of an association can be adorned with ''role names'', ''ownership indicators'', ''multiplicity(多重性)'', visibility, and other properties. There are five different types of association. Bi-directional and uni-directional associations are the most common ones.__ For instance, a flight(航班) class is associated with a plane class bi-directionally. Associations can only be shown on class diagrams.

Example: "department offers courses", is an association relationship.

'''Aggregation(集合)'''

{{attachment:300px-KP-UML-Aggregation-20060420.svg.png}} <<BR>> Class diagram showing Aggregation between two classes

__Aggregation is a variant of the "has a" or association relationship; aggregation is ''more specific'' than association. It is an association that represents a ''http://en.wikipedia.org/wiki/Part-whole_theory[part-whole] relationship''. As a type of association, an aggregation can be named and have the same adornments(裝飾) that an association can. However, an aggregation may not involve more than two classes.__

__Aggregation can occur when a class is a collection or container of other classes, '''but where the contained classes do not have a ''strong life cycle dependency'' on the ''container''--essentially, if the container is destroyed, its contents are not.'''__

In UML, it is graphically represented as a clear(空心的) diamond shape on the containing class end of the tree of lines that connect contained class(es) to the containing class.

'''Composition(組成)'''

{{attachment:300px-AggregationAndComposition.svg.png}}

__Composition is a ''stronger'' variant of the "has a" or association relationship; composition is more specific than aggregation. It is represented with a solid diamond shape.__

Composition usually has a strong life cycle dependency between instances of the container class and instances of the contained class(es): __'''If the container is destroyed, normally every instance that it contains is destroyed as well.''' Note that a part can (where allowed) be removed from a composite before the composite is deleted, and thus not be deleted as part of the composite.__

The UML graphical representation of a composition relationship is a filled diamond shape on the containing class end of the tree of lines that connect contained class(es) to the containing class.

'''Differences between Composition and Aggregation'''

__'''The whole of a composition must have a multiplicity of 0..1 or 1, indicating that a ''part must be for only one whole''. The part of an aggregation may have any multiplicity.'''__

When attempting to represent real-world ''whole-part relationships'', e.g., an engine is part of a car, the composition relationship is most appropriate. However, when representing a software or database relationship, e.g., car model engine ENG01 is part of a car model CM01, an aggregation relationship is best, as the engine, ENG01 may be also part of a different car model. __'''Thus the aggregation relationship is often called ''"catalog" containment'' to distinguish it from composition's ''"physical" containment''.'''__

==== Class Level Relationships ====

'''Generalization'''

{{attachment:300px-KP-UML-Generalization-20060325.svg.png}} <<BR>> Class diagram showing generalization between one superclass and two subclasses

__The Generalization relationship indicates that one of the two related classes (the ''subtype'') is considered to be a specialized form of the other (the ''supertype'') and supertype is considered as Generalization of subtype. In practice, this means that any instance of the subtype is also an instance of the supertype.__ An exemplary(示範的) tree of generalizations of this form is found in binomial nomenclature(雙命名法): human beings are a subtype of simian(類猿猴的), which are a subtype of mammal(哺乳動物), and so on. The relationship is most easily understood by the phrase 'A is a B' (a human is a mammal, a mammal is an animal).

The UML graphical representation of a Generalization is a hollow triangle shape on the supertype end of the line (or tree of lines) that connects it to one or more subtypes.

__The generalization relationship is also known as the inheritance or "is a" relationship.__

The supertype in the generalization relationship is also known as the "parent", superclass, base class, or base type.

The subtype in the generalization relationship is also known as the "child", subclass, derived class, derived type, inheriting class, or inheriting type.

Note that this relationship bears(帶有) no resemblance(相似) to the biological(生物學的) parent/child relationship: the use of these terms is extremely common, but can be ''misleading''.

Generalization can only be shown on class diagrams and on Use case diagrams.

'''Realization(實現)'''

__'''In UML modeling, a realization relationship is a relationship between two model elements, in which one model element (the ''client'') realizes the behavior that the other model element (the ''supplier'') specifies.''' A realization is displayed in the diagram editor as a dashed line with a unfilled arrowhead towards the supplier.__

Realizations can only be shown on class diagrams.

A realization is a relationship between classes, interfaces, components, and packages that connects a client element with a supplier element. A realization relationship between classes and interfaces and between components and interfaces shows that the class realizes the operations offered by the interface.

==== General Relationship ====

{{attachment:Class_Dependency.png}} <<BR>> Class diagram showing dependency between "Car" class and "Wheel" class

'''Dependency'''

__'''A dependency exists between two defined elements if a change to the definition of one would result in a change to the other. (看不懂這裡在寫什麼? 但從圖形看起來, 好像是在說明內部實作所產生的相依性[...])''' This is indicated by a dashed arrow pointing from the dependent to the independent element. Several named varieties exist. A dependency can be between instances, classes, or both.__

==== Multiplicity ====

The association relationship indicates that (at least) one of the two related classes makes reference to the other. __In contrast with the generalization relationship, this is most easily understood through the phrase 'A has a B' (a mother cat has kittens, kittens have a mother cat; 相對於 Class Level Relationships 中 "is a" 的說法).__

__The UML representation of an association is a line with an ''optional arrowhead'' (這就是上面所說的 "ownership indicators") indicating the role of the object(s) in the relationship, and an optional notation at each end indicating the multiplicity of instances of that entity (the number of objects that participate in the association).__ Common multiplicities are:...

|| `0..1` || No instances, or one instance (optional, may) ||
|| `1` || Exactly one instance ||
|| `0..*` or `*` || Zero or more instances ||
|| `1..*` || One or more instances (at least one) ||

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==

 * 按照 UML for Java Programmers 一書的建議, 目前拿 Dia 來畫是最具彈性的...
 * 如何挑選 UML 工具
   * @2008/02/19, 比較適用的有 JUDE, StarUML, eUML2
   * 跨平台, 開放原始碼
   * 由原始碼產生 UML 圖 (逆向工程) 的功能有時候很好用
     * __原始碼就是最好的文件, 圖形在需要用到時再去畫即可; 如果圖畫出來了, 但程式碼卻寫不出來也是枉然[...]__
     * "將功能性的 API 獨立出來" 這個想法可能不錯 (切出 source path 即可); 修改規格就是修改 Interface 而已 (包括 Model, Enum 等; 但 GUI 不屬於 Modeling 的一部份, 但功能性卻是從 GUI 推導出來的) [...]
   * __但是從圖形的修改反應回原始碼的功能則沒有必要, 況且這樣的動作肯定無法遵循程式設計師的 code convention.__
   * 工具一般提供 Import Class 的功能, 因此與 IDE 的整合是沒有必要的 (唯一的好處就是 model 不用重建)
     * 如果系統設計與開發是同一個人, 與 IDE 整合在一起可以避免重工.
   * Modeling 主要是針對 interface, 所以與 source 的重複性其實不高.
   * Model/Diagram 應該要分開
     * 如果跟 IDE 整合, 多半會以原始碼為 Model, 就會產生破壞原始碼的風險.
     * 要預先做未來的設計時, 一修改 model 就會動到 source; 把 API 抽出來, 或者是用原始碼版控會不會是一個可行的方式[?]
       * 實作介面標為 TODO 的部份就要有待撰寫的部份, 可以做為估價的依據.
     * 同一個 Model 拉出到圖形多次時, 可以分別控制那些部份要不要顯示, 要怎麼顯示; 因為每個圖形的角度不同.
   * 針對 Class/Interface, operation, attriubte 都可以各自撰寫文件. (設計用, 跟 JavaDoc 沒有直接關係)
 * UML 在 Page Flow Diagram 上的應用
   * 可以瞭解一下 Spring Web Flow 的做法 (跟 state diagram 比較類似)
   * In a page flow state diagram, the browser’s stable states are the pages it displays while interacting with your application. Events occur when the user selects a link or submits a form. There could be external events, e.g., callbacks in an AJAX application.
   * 大部份都同意以 state diagram 來畫, 但也有部份人支持 activity diagram, 其至有人說用 usecase diagram... 要自己試過才知道; 個人認為, state diagram 適用於開發, activity diagram 則比較適合跟使用者溝通[...]
