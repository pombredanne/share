= link:ant.html[Ant] / `ant` =
:title: [Ant] ant

 ant [<options>] [<target> [<target2> [<target3>] ..]]

`ant` 預設只會在 current directory 找 link:concepts/build-file.html[build file] (`build.xml`) 並執行 link:concepts/targets.html[default target]，如果找不到 build file 就會直接丟出錯誤：

  Buildfile: build.xml does not exist!
  Build failed

可以用 `-find [<file>]` 要求繼續往上層目錄找 `build.xml` （或 'file' 指定的檔名），或是用 `-buildfile <file>` 直接指定 build file 的完整路徑。

常用的 options 有：（注意 shot/long options 前面都只有一個 `-`）

 * `-projecthelp, -p` - 列出 build file 裡的 targets。
+
預設只會列出 main targets 跟 default targets，其餘的 other targets 只有在沒有任何 main targets 或使用 `-verbose` 或 `-debug` 時才會列出。
+
 * `-version` - 印出 Ant 的版號。
 * `-buildfile <file>` - 直接指定 build file 的完整路徑。
 * `-D<property>=<value>` - 從 command line 給定（或覆寫） link:concepts/properties.html[properties] 的值。
 * `-find [<file>]` - 繼續往上層目錄找 `build.xml` （或 'file' 指定的檔名）。
 * `-lib <path>` - 將 'path' 本身或 `<path>/*.jar` 加到 link:concepts/classpath.html[classpath] 裡。
 * `-nouserlib` - 取消 Ant 預設會將 `${user.home}/.ant/lib/*.jar` 加到 classpath 的行為。
 * `-noclasspath` - 取消 Ant 預設會將環境變數 `CLASSPATH` 透過 `-lib` 加到 classpath 的行為。

== 完整用法 ==

--------------------------------------------------------------------------------
$ ant -h
ant [script options] [options] [target [target2 [target3] ..]]
Script Options:
  --help, --h            print this message and ant help
  --noconfig             suppress sourcing of /etc/ant.conf,
                         $HOME/.ant/ant.conf, and $HOME/.antrc
                         configuration files
  --usejikes             enable use of jikes by default, unless
                         set explicitly in configuration files
  --execdebug            print ant exec line generated by this
                         launch script
  
ant [options] [target [target2 [target3] ...]]
Options: 
  -help, -h              print this message
  -projecthelp, -p       print project help information
  -version               print the version information and exit
  -diagnostics           print information that might be helpful to
                         diagnose or report problems.
  -quiet, -q             be extra quiet
  -silent, -S            print nothing but task outputs and build failures
  -verbose, -v           be extra verbose
  -debug, -d             print debugging information
  -emacs, -e             produce logging information without adornments
  -lib <path>            specifies a path to search for jars and classes
  -logfile <file>        use given file for log
    -l     <file>                ''
  -logger <classname>    the class which is to perform logging
  -listener <classname>  add an instance of class as a project listener
  -noinput               do not allow interactive input
  -buildfile <file>      use given buildfile
    -file    <file>              ''
    -f       <file>              ''
  -D<property>=<value>   use value for given property
  -keep-going, -k        execute all targets that do not depend
                         on failed target(s)
  -propertyfile <name>   load all properties from file with -D
                         properties taking precedence
  -inputhandler <class>  the class which will handle input requests
  -find <file>           (s)earch for buildfile towards the root of
    -s  <file>           the filesystem and use it
  -nice  number          A niceness value for the main thread:                         1 (lowest) to 10 (highest); 5 is the default
  -nouserlib             Run ant without using the jar files from                         ${user.home}/.ant/lib
  -noclasspath           Run ant without using CLASSPATH
  -autoproxy             Java1.5+: use the OS proxy settings
  -main <class>          override Ant's normal entry point
--------------------------------------------------------------------------------

== 參考資料 ==

 * http://ant.apache.org/manual/running.html[Running Apache Ant]

////////////////////////////////////////////////////////////////////////////////
** When no arguments are specified, Ant looks for a `build.xml` file in the current directory and, if found, uses that file as the build file and runs the target specified in the `default` attribute of the `<project>` tag.
** To make Ant use a build file other than `build.xml`, use the command-line option `-buildfile` file, where file is the name of the build file you want to use (or a directory containing a `build.xml` file).
** If you use the `-find [file]` option, Ant will search for a build file first in the current directory, then in the parent directory, and so on, until either a build file is found or the root of the filesystem has been reached. By default, it will look for a build file called `build.xml`. To have it search for a build file other than `build.xml`, specify a file argument.
** You can also set properties on the command line. This can be done with the `-Dproperty=value` option, where `property` is the name of the property, and `value` is the value for that property. If you specify a property that is also set in the build file (see the `property` task), the value specified on the command line will override the value specified in the build file.
** It is also possible to specify one or more targets that should be executed. When omitted, the target that is specified in the `default` attribute of the `project` tag is used.
** The `-projecthelp` option prints out a list of the build file's targets. Targets that include a `description` attribute are listed as "Main targets", those without a description are listed as "Other targets", then the "Default" target is listed ("Other targets" are only displayed if there are no main targets, or if Ant is invoked in `-verbose` or `-debug` mode).
** the ant start up scripts (in their Windows and Unix version) return the return code of the java program. So a successful build returns 0, failed builds return other values.
////////////////////////////////////////////////////////////////////////////////

