= link:../openni.html[OpenNI] / Concepts =
:title: [OpenNI] 基本概念

 * link:coordinate-systems.html[坐標系統]
 * link:../generators/hands.html[Hands Generator]
 * link:../generators/gesture.html[Gesture Generator]
 * link:event-handling.html[事件處理]

== 參考資料 ==

.文件
--
 * OpenNI Overview
   ** Introduction (`Documentation/html/introduction.html`)
   ** Glossary (`Documentation/html/glossary.html`)
--

////////////////////////////////////////////////////////////////////////////////

官方 document "Introduction, Concepts" 兩節很值得一看...

 * FOV (Field Of View)
 * player 好像只是 replay 錄到的資料？
 * 3D vision input (such as full body control)
 * applications <- connection -> different sensors and/or vision algorithms
   ** an interface for applications that use natural interface (gestures / poses) as their input.
 * OpenNI = standard interface for 3D sensor data processing algorithms.
   ** data types (depth map, color map, user pose, ...)
   ** an interface to a module that can GENERATE them (sensor, skeleton algorithm, etc.)
   ** Applications / Games developers can write their applications regardless of the actual supplier that creates the 3D vision PRODUCTS (skeleton, hand points, etc.) Middleware developers can write algorithms on top of raw data formats, regardless of the actual device producing them.
   ** Sensors Manufacturers can implement the "device interface" for their sensor, so that applications written on top of OpenNI can work with any sensor.
 * 3D vision product (產物?)
   ** skeleton, hand points, pose
   ** sensor -> raw data (depth map, ...) -> middleware -> higher-level output 
   ** production units (nodes) - each unit can receive data from other units -> production graph
   ** top-most products of the graph, 
   ** middleware node?
   ** node types: device, depth, image, ir, audio, gestures, 
 * It is entirely the application's responsibility of choosing one tree out of the possibilities returned by OpenNI framework?
 * capabilities
   ** think of capabilities as extensions to the common interface.
   ** Each capability is composed of a set of functions which OpenNI exposes. (Currently, all capabilities must be defined by OpenNI.) A production node can be asked if it supports a specific capability.

////////////////////////////////////////////////////////////////////////////////

