= link:generators.html[OpenNI / Data Generation] / Depth Generator =
:title: [OpenNI] Depth Generator

== 參考資料 ==

 * `xn::DepthGenerator` Class Reference (`Documentation/html/classxn_1_1_depth_generator.html`)
 * https://github.com/OpenNI/OpenNI/blob/Unstable-1.5.4.0/Wrappers/OpenNI.java/src/org/OpenNI/DepthGenerator.java[`org/OpenNI/DepthGenerator.java`]
 * https://github.com/OpenNI/OpenNI/blob/Unstable-1.5.4.0/Wrappers/OpenNI.java/src/org/OpenNI/DepthMetaData.java[`org/OpenNI/DepthMetaData.java`]
 * https://github.com/OpenNI/OpenNI/blob/Unstable-1.5.4.0/Wrappers/OpenNI.java/src/org/OpenNI/MapMetaData.java[`org/OpenNI/MapMetaData.java`]
 * https://github.com/OpenNI/OpenNI/blob/Unstable-1.5.4.0/Wrappers/OpenNI.java/src/org/OpenNI/DepthMap.java[`org/OpenNI/DepthMap.java`]
 * https://github.com/OpenNI/OpenNI/blob/Unstable-1.5.4.0/Wrappers/OpenNI.java/src/org/OpenNI/ShortMap.java[`org/OpenNI/ShortMap.java`]

////////////////////////////////////////////////////////////////////////////////

 * `DepthGenerator`
   ** `create(Context context): DepthGenerator` (static)
   ** `getMetaData(): DepthMetaData`
   ** `getDepthMap(): DepthMeta`
   ** `getDeviceMaxDepth(): int` - the maximum depth value (in millimeters) that the DepthGenerator node can generate (hardware specification)
   ** `getFieldOfView(): FieldOfView`
   ** `convertProjectiveToRealWorld(Point3D[] projectivePoints): Point3D[]`
   ** `convertProjectiveToRealWorld(Point3D projectivePoint): Point3D`
   ** `convertRealWorldToProjective(Point3D[] realWorldPoints): Point3D[]`
   ** `convertRealWorldToProjective(Point3D realWorldPoint): Point3D`
 * `DepthMetaData` (extends `MapMetaData`)
   ** `getZRes(): Map`
   ** `getData(): DepthMap`
 * `MapMetaData` - providing the fast data access functionality for the frame object saved in metadata.
   ** `getData(): Map`
   ** `getXRes/getYRes(): int` - X/Y resolution of the frame object saved in this object, after any required cropping has been applied.
   ** `getFullXRes/getFullYRes(): int` - full frame (entire field-of-view, ignoring cropping).
   ** `getFPS(): int`
   ** `getFrameID: int`
   ** `getIsNew: boolean`
 * `DepthMap` (extends `ShortMap`)
 * `ShortMap` (extends `Map`)
   ** `readPixel(int x, int y): short` - distance (millimeters)
   ** `createShortBuffer(): java.nio.ShortBuffer`

////////////////////////////////////////////////////////////////////////////////

