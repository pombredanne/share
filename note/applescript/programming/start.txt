= link:programming.html[AppleScript / Programming] / Getting Started =
:title: [AppleScript] 新手上路



== 參考資料 ==

.AppleScript: Beginner's Tutorial
--
 * http://www.macosxautomation.com/applescript/firsttutorial/index.html[The First Step] ^https://diigo.com/0ypv0[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** making decisions based on its observations or from information provided by its interaction with the person running the script.
** best of all, this technology is free and is built into every copy of the Mac OS!
** an English-like language containing many of the verbs, nouns, adjectives, articles(冠詞) and other English language elements we use every day. The AppleScript language is designed to be easily understandable, and has a syntax or grammatical structure similar to the one we use to create normal sentences. (太長也要斷句!!)
** or saved as either script files or script applications??
** Script files are launched from an application’s script menu or from the Mac OS system-wide Script Menu utility??. Script applications, or “applets,”?? are launched like other applications by double-clicking their icons in the Finder or by clicking their Dock or Finder Toolbar and Sidebar icons.
** AppleScript is based on the concept of "scriptable objects" belonging to or being contained in other scriptable objects, such as a file being in a folder that belongs to the hard disk, or a word being part of a paragraph belonging to a story. Understanding the relationship between scriptable objects is essential to learning how to write scripts!!
** On the Macintosh computer everything is an object. Everything belongs to, is related to, is contained in, or is part of something else. In scripts, objects are described in terms of their position in their hierarchical structure, or where they are in their “Chain of Command.”??
** The character is in the word that is in the line that is part of the paragraph that is contained in the story.
** This relationship between objects is referred to as being hierarchical or, in military terms, follows a “Chain of Command.” AppleScript uses this hierarchical containment structure to identify specific scriptable objects. All the scripts you write will contain hierarchical references.
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/01.html[Properties and Values] ^https://diigo.com/0ypv1[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** windows and Finder windows are all objects or “elements” belonging to the Finder application. They are the items the Finder application uses in its organization and display of information. Each of these items has properties that define or describe the particular item. Some of these properties are unique to each item, some of these properties are shared by all Finder items. 哪裡可以找到所有 application 通用的 properties?? Standard Suite? 怎麼看出整個 application 通用的 properties?? 
** its position in a folder window or on the desktop!!
** Every scriptable application contains elements or objects that have properties. These properties have values that can be read or manipulated. All of these properties have values, some of which can be edited (read/write), some which can only be read (read-only).
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/02.html[The Script Editor] ^https://diigo.com/0ypv9[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** the script log 怎麼做 logging??
** A tell statement is a single line script beginning with the verb: tell. This verb is used to direct script actions at a specific application or scriptable object. A tell statement is composed of two parts: 1. A reference to the object to be scripted, and 2. The action to be performed.
** `tell application "Finder" to close every window`
** `tell application "Finder" to open the startup disk` -- 這個動作有沒有時間差，需不需要加上 think time??
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/03.html[The Name Property] ^https://diigo.com/0ypve[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** A window’s name is the window title displayed in the title bar of the window.
** To retrieve the value of the name property of a window, we’ll use the command “get.” This verb is used when we want to extract information or data from a scriptable element or object. `tell application "Finder" to get the name of front Finder window`
** For Finder windows, the name property is a read-only property. It can be used to "refer to" a Finder window, however, its value cannot be changed by a script. `tell application "Finder" to close Finder window "Macintosh HD"` 就像是英文中的 "同位語"。跟 `tell application "Finder" to` 中的 `application "Finder"` 很像，也是用 application name 來識別眾多 applications 中的特定一個。 
** The previous script worked because it is a "fully qualified" tell statement, in that it both refers to the object receiving the commands, in this case the open window, and indicates the desired action to be performed, closing the window.
** Also note that the result of the script action is a set of curly brace characters. This is an AppleScript list??.
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/04.html[The Index Property] ^https://diigo.com/0ypvp[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** using the name property to refer to Finder windows is not always the most "reliable" way to locate a specific window. It’s possible that two windows may have the same name.
** The value of this read-only property is a number corresponding to the window’s layer position in the stacking order of open Finder windows. On the computer, no two windows can occupy the same layer. One window is always on top of or in front of another window. The index property reflects this fact.
** For example, the front Finder window will always have an index value of “1,” since it is the first window in the stack of open window, while the last Finder window will always have an index value equal to the number of open Finder windows. `tell application "Finder" to  get the index of Finder window "Macintosh HD"`
** Note the use of the special character (¬) in the script text in the following example. This character, generated by typing option-L or option-Return, is used by the Script Editor to indicate that a single line statement has been placed on multiple lines in order to make it easier read!!
** `tell application "Finder" to open home`, “Startup disk” and “home” are special terms, reserved by the Finder application, to identify important locations. These terms are generic and will work regardless of how drives and folders are named on the computer.
** The index property can be also be used to refer to any open window. `tell application "Finder" to get the name of Finder Window 1`
** As you've seen in the previous scripts, the AppleScript language is designed to be “English-like” and can be written in a "conversational manner". Because of this, the value of the index property can also be described using "descriptive terms" as well as numeric values.
** `tell application "Finder" to  get the index of the first Finder window` The AppleScript language will accept the terms: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, and tenth, in place of their corresponding numeric character equivalents.
** `tell application "Finder" to get the index of the 1st Finder window` The use of descriptive suffixes works with any number, not just the first ten: 22nd, 312th, 3rd, etc.
** AppleScript will also accept index values described in terms of a window’s position "relative to other windows".
+
--------------------------------------------------------------------------------
tell application "Finder" to  get the index of the front Finder window
tell application "Finder" to  get the index of the back Finder window
tell application "Finder" to  get the index of the last Finder window
tell application "Finder" to get the index of the Finder window before the last Finder window
tell application "Finder" to get the index of the Finder window after the front Finder window
--------------------------------------------------------------------------------
+
** The index values in the previous scripts examples were written using the terms: front, back, and last. AppleScript will accept the term middle as well. Also note that the additional terms before and after were used to "further define" the target window’s location.
** The value of the index property can be expressed using any of the previous methods. All are valid and can be used freely and interchangeably. 
** by random index: `some Finder window`
** the index property of a Finder window is an editable property, meaning its value can be altered. To change the value of a property, we’ll use the verb “set” in our scripts. `tell application "Finder" to  set the index of the last Finder window to 1` 當然也會間接影響其他 windows 的 index。
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/05.html[The Target Property] ^https://diigo.com/0ypzm[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** The value of the target property is a reference to the folder or disk whose contents are displayed in the Finder window. This value can be both read and changed.
** `tell application "Finder" to get the target of the front window` returns: `folder <name of your home directory> of folder "Users" of startup disk of application "Finder"` The returned object reference clearly shows, through the use of the possessive “of,” that the target folder is contained by the “Users” folder which is on the startup disk which is an element of the Finder application. You’ll use this hierarchical reference structure often in the scripts you write.
** `set the target of the front Finder window to the startup disk`
** To construct an object reference to a specific Finder disk item, simply start with the item to be referenced and list each folder or containing item of the object hierarchy until you've reached the disk containing the item. Next, you add the class identifier and name of the previous object’s parent or containing folder or object, preceded with the possessive “of” to indicate its ownership of the previous item.
   *** `folder "Smith Project" of folder "Documents" of folder <name of your home directory> of folder "Users" of disk "Macintosh HD"` Note the use of the class identifier “disk” for the disk object.
   *** `folder "Smith Project" of folder "Documents" of home` 效果相同，但沒有寫死 startup disk。
** Object references to Finder items can sometimes be very long. To shorten our example reference, and make it more generic and eaiser to write, we can optionally replace the section of the reference pertaining to your Home directory and it’s parent containers with the special Finder term “home,”
** Scriptable objects are referenced by describing their object hierarchy or “Chain of Command.” 加括號應該會比較好讀?? 還是括號有其他的意義?
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/06.html[The Toolbar Visible Property] ^https://diigo.com/0yq0s[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** The toolbar visible property, introduced in Mac OSX version 10.3, has a value of true or false to indicate whether the Toolbar is visible on the targeted Finder window.
** As a read/write property, meaning its value can be accessed and edited, the value of the toolbar visible property can be changed to toggle the display of a Finder window’s Toolbar. `tell application "Finder" to  set toolbar visible of the front Finder window to false`
** Property values that are either true or false are called boolean values.
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/07.html[The Statusbar Visible Property] ^https://diigo.com/0yq0t[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** Introduced in Mac OS X version 10.4, the statusbar visible property determines whether a Finder window displays a status bar or not. 
** Since a statusbar is only visible when the toolbar is not shown, alter the previous script to set the toolbar visible property to false:
+
--------------------------------------------------------------------------------
tell application "Finder" to set toolbar visible of  Finder window 1 to false
tell application "Finder" to set statusbar visible of  Finder window 1 to true
--------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/08.html[The Sidebar Width Property] ^https://diigo.com/0yq0w[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** Another Finder window property introduced in Mac OS X version 10.4 is the sidebar width property. The value of this property is an integer, indicating the width of the sidebar in pixels, and can be both read and changed.
** `tell application "Finder" to set the sidebar width of  Finder window 1 to 240`
** `tell application "Finder" to set the sidebar width of  every Finder window to 0`
** In Mac OS X v10.4 (Tiger), the sidebar could be completely closed by setting the value of the sidebar width to 0. In Mac OS X v10.5 (Leopard), the sidebar has a minimum width of 135. Any value less than 135 will be ignored and 135 used instead.
** `tell application "Finder" to set the sidebar width of Finder window 1 to the sidebar width of Finder window 2` -- 複製另一個 window 的 sidebar width
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/09.html[The Current View Property] ^https://diigo.com/0yq14[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** can be one of four "enumerations": icon view, list view, column view, and (new in Mac OS X v10.5) flow view. 在 dictioary 的說明，會將可能的值全部列出來。
** `tell application "Finder" to set the current view of the front Finder window to list view` -- 這裡的 enumeration 不是 string
** `tell application "Finder" to set the current view of the window of every folder of home to icon view` -- 重設所有 folders 的 view mode
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/10.html[The Position Property] ^https://diigo.com/0yq1f[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** The value of the position property indicates where a Finder window is placed on the desktop. Its value is displayed as a list of two numbers describing the position of the top left corner of the Finder window in relation to the top left corner of the desktop display. The value of the position property can be both read and edited.
** `tell application "Finder" to get the position of the front Finder window-->` returns a list of two numbers, similar to: {97, 364}
** In AppleScript, lists are enclosed in curly braces with each list item separated by a comma. AppleScript lists can contain any kind of information, such as text strings, numbers, references, or any combination of data types.
** Unlike most other scriptable applications that use the distance from the top of the screen to the top of a window to determine its vertical position, the Finder uses the distance from the top of the screen to just below the title bar of the window, thus adding the height of the title bar, an extra 22 pixels (固定的嗎??), to the measurement. This applies whether the Finder window is displaying its toolbar or not. This exception applies only to the Finder application.
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/11.html[The Bounds Property] ^https://diigo.com/0yqaa[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** The value of the bounds property describes both the size and the position of the target window. This is accomplished by specifying two points: the top-left point of the window and the bottom-right point of the window. These two coordinates, combined into a four-item list, are used to outline the rectangular shape of the window. Like the position property, the value of the bounds property can be read and edited.
** By changing the value of the bounds property, you can resize and reposition a Finder window anywhere on the Desktop.
** `tell application "Finder" to set the bounds of the front Finder window to {24, 96, 524, 396}`
** By the way, if you want to know the size of the current computer display, access the value of the bounds property for the Desktop window. `tell application "Finder" to get the bounds of the window of the desktop` returns: `{0, 0, 1920, 1200}` 桌面也是 Finder 的一部份!! 為什麼不是 "of the desktp"，而是 "of the window of the desktop"??
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/12.html[Verbs Used with Windows] ^https://diigo.com/0yqam[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** Now we’ll add another command for controlling windows to our vocabulary: select. Although the select verb can be applied to other scriptable objects, it can be used to make a window active. (causes a window to come to the front)
** `tell application "Finder" to select the last Finder window`
** `tell application "Finder" to set the index of the last Finder window to 1` 上面的寫法可讀性較高。
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/13.html[The Desktop Setup Script] ^https://diigo.com/0yqav[閱讀]^
 * http://www.macosxautomation.com/applescript/firsttutorial/14.html[The Tell Block] ^https://diigo.com/0yqb4[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** A tell block is used to target multiple actions at a single scriptable object, in this case the Finder application, which makes scripts easier to understand. You’ll always want to use a tell block in your scripts when addressing more than one action at one scriptable object.
** A tell block begins with the verb tell followed by a reference to a target object. The various actions to be performed by or to that object are then listed, each on its own line. After all the actions have been entered, the tell block ends with the closing statement end tell.
** It is not only easier to write the script using a tell block, but you can clearly see the relationship between scriptable objects and the commands that target them, because of the indentations automatically placed in the script text by Script Editor when you compile the script. It’s very easy to see where a section of a script targeting a specific object begins (tell) and ends (end tell).
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/15.html[Nested Tell Blocks] ^https://diigo.com/0yqb5[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** To further improve script readability and understanding, tell blocks can contain other tell blocks that target scriptable elements or objects belonging to the scriptable element or object targeted in the outermost tell block.
** The technique of placing tell blocks within other tell blocks is referred to as nesting tell blocks and is found quite often in scripts.
** Since you’ll often edit your scripts later (perhaps a long time later), it’s important to write your scripts in a manner that is easy to understand and review.
** Be sure to remove the possessive phrase of the front Finder window when you create the nested tell blocks. The function played by that phrase in defining the containment hierarchy of the front Finder window object is now played by the nested tell statement, tell the front Finder window.
+
--------------------------------------------------------------------------------
tell application "Finder"
    close every window
    open home
    tell the front Finder window
        set toolbar visible to true
        set the sidebar width to 135
        set the current view to column view
        set the bounds to {36, 116, 511, 674}
    end tell
    open folder "Documents" of home
    tell the front Finder window
        set toolbar visible to false
        set the current view to flow view
        set the bounds to {528, 116, 1016, 674}
    end tell
    select the last Finder window
end tell
--------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/16.html[Saving the Desktop Setup Script] ^https://diigo.com/0yqbb[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** install it in the Finder toolbar for easy accessibility from within any open Finder window.
** save the script as a self-running application named Setup by choosing Application from the File Format pop-up menu in the sheet.
** Drag the Setup script applet icon to the Finder window toolbar, and release the mouse once the cursor changes to include a plus sign (+).
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/17.html[Chapter Review] ^https://diigo.com/0yqbe[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** collapsed: a true or false value indicating whether the window has been minimized to the Dock
** zoomed: a true or false value that indicates whether the window has been expanded.
** All tell blocks begin with the verb tell followed by a reference to a target object or parent application.
** tell blocks within other tell blocks are called nested tell blocks. When compiled, the hierarchy of the scriptable objects is revealed by the indentation applied to the formatted script text.
////////////////////////////////////////////////////////////////////////////////
 * http://www.macosxautomation.com/applescript/firsttutorial/18.html[The Principles Remain the Same] ^https://diigo.com/0yqbt[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** Scriptable objects can also contain other scriptable objects that also have properties with corresponding values.
** `tell application "Safari" to close every window`
** Next, let’s use the open location command to open a Web page. `tell application "Safari" to open location "http://automator.us"`
** like many Mac OS X applications, Safari does not support the use of the position property for windows in the same manner as the Finder does. Instead, try using the bounds property to get the coordinates of the browser window. `tell application "Safari" to get the bounds of window 1`
** Most scriptable Mac OS X applications support the bounds property for getting and setting window dimensions. `tell application "Safari" to set the bounds of the front window to {0, 22, 800, 1024}`
** Note that if you provide a vertical coordinate that is larger than the screen is tall, Safari automatically adjusts the vertical display of a browser window so that it doesn’t go below the Dock or the bottom of the screen. Very convenient.
+
--------------------------------------------------------------------------------
tell application "Finder" to get the bounds of the window of the desktop
tell application "Safari" to set the bounds of the front window to ¬
     {0, 22, (3rd item of the result), (4th item of the result)}
--------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
--

