= link:selenium.html[Selenium] / link:selenium-rc.html[RC] / 讀取表格的內容 =
:title: [Selenium][RC] 讀取表格的內容

想像中 table 相關的操作應該很複雜，但專用於 table 的 API 卻只有一個：

 get_table(table_cell_address)

它可以用來取得表格中某一格（cell）的文字內容，這裡 'table cell address' 的用法跟 link:selenium-rc-attribute.html[attribute locator] 很類似，是在 element locator 後面加上 'cell adress' - `.<row>.<column>`。

用下面的表格來進行一些實驗：

.link:selenium-rc-table/selenium-rc-table.html[`selenium-rc-table.html`]
--------------------------------------------------------------------------------
<div id="tab1">
<table id="data" class='data'>
<thead>
  <tr><th>row\col</th><th>1</th><th>2</th><th>Action</th></tr>
</thead>
<tbody>
  <tr class="entry"><td>1</td><td>1, 1</td><td>1, 2</td><td><a href="#1"/>Edit</a></td></tr>
  <tr class="entry"><td>2</td><td>2, 1</td><td>2, 2</td><td><a href="#2"/>Edit</a></td></tr>
  <tr class="entry"><td>3</td><td>&nbsp;3, 1&nbsp;</td><td>3, 2</td><td><a href="#3"/>Edit</a></td></tr>
  <tr><td>4</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
  <tr><td>5</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</tbody>
</table>
</div>
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
>>> sel.get_table('id=data.0.0') <1>
u'row\\col'
>>> sel.get_table('css=#tab1 .data.1.1') <2>
u'1, 1'
>>> sel.get_table('id=data.3.1') <3>
u'3, 1'
--------------------------------------------------------------------------------
<1> cell address 中的 'row' 跟 'column' 都是從 0 起算，包含 table header。
<2> 這裡刻意拿 `css=#tab1 .data` 來定位 table，確認 cell address 串在這種相對複雜的 element locator 後面也沒問題。
<3> 傳回的文字內容，兩側的空白已經被去掉。

事實上 `get_table()` 的功能，也可以用 `get_text()` 搭配 XPath 來達成：

--------------------------------------------------------------------------------
>>> sel.get_text("//*[@id='data']//th[1]") <1>
u'row\\col'
>>> sel.get_text("//*[@id='data']/tbody/tr[1]/td[2]")
u'1, 1'
>>> sel.get_text("//*[@id='data']/tbody/tr[3]/td[2]") <2>
u'3, 1'
--------------------------------------------------------------------------------
<1> 將 `id=data.0.0` 換成 XPath 的寫法就是 `//*[@id='data']//th[1]`，注意 predicate 由 1 起算。
<2> 同樣地，兩側的空白也被去掉了。

雖然 `get_text()` 搭配 XPath 可以取代 `get_table()` 的功能，但 `get_table` 特有的 cell address 表示法，可以不用考慮 `<th>` 跟 `<td>` 的差異，使用起來還是比較簡單的。不過 `get_table()` 的方便性也僅止於取得表格的文字內容，剩下的還是得靠其他 API 搭配 XPath/CSS selector 來應付。

通常表格的資料是動態的（所以才需要自動化做驗證），必須先知道有效的資料筆數有多少，才能進一步操作。以一開始提到的那個表格為例：

--------------------------------------------------------------------------------
>>> rows = sel.get_css_count('css=#data tr.entry') ; rows <1>
3
>>> sel.click('//*[@id='data']//tr[%i]//td[4]/a' % rows) <2>
--------------------------------------------------------------------------------
<1> `class="entry"` 表示有效的資料，可以用 `get_css_count()` 或 `get_xpath_count()` 取得符合條件的筆數。
<2> 按下最後一行的 Edit 連結。

== 延伸閱讀 ==

 * link:selenium-rc-attribute.html[取得某個 Element 的屬性]
 * link:selenium-rc-text.html[取得文字內容]

== 參考資料 ==

.文件
--
 * http://selenium.googlecode.com/svn/trunk/docs/api/py/selenium/selenium.selenium.html[selenium.selenium — Selenium 2.0 documentation]
--

