= link:selenium.html[Selenium] / Page Object Pattern =
:title: [Selenium] Page Object Pattern

Page Object Pattern 用多個相互關聯的 Page Object 來塑模（model） Web Application 不同的頁面。它最重要精神就是，對外只提供較高層次的操作，也就是偏重 "要做什麼" 的意圖（intent），而將畫面上 "要怎麼做" 的操作細節隱藏起來。

例如 "用帳號 xxx 跟密碼 ooo 登入" 之於 "在帳號欄位輸入 xxx，密碼欄位輸入 ooo，然後按 [登入]" 的差別。這麼做可以得到一些好處：

 * 只要意圖不變，之後畫面如果有調整（包括 layout 的調整，甚至是操作流程有變動），只要修改一個地方即可－也就是相關 Page Object 的內部實作。
 * 鼓勵設計 test case 把焦點放在 "要做什麼" 而非 "要怎麼做"，所以 test script 的可讀性會相對提高。
 * 跟同一個頁面相關的操作都集中在同一個 Page Object 裡，方便後續維護，搭配 link:selenium-ui-mapping.html[UI Mapping] 使用效果更佳。
 * 把 testing tool 的使用全部包裝在 keyword 裡，如果 tool 本身有改版或者要更換時，也不會影響到 test script。更多的情況是，可以把複雜的 UI 操作包裝起來，混用多種不同的工具來達成特定的目的，在測試上是很常見的。

當然，實作上也有一些要留意的地方：

 * 不要在 Page Object 內做檢查（assertion），除了在 constructor 裡檢查目前是否在特定的頁面。
 * `should_be_on_this_page()` 是固定的成員。如果有 Ajax request 的話，則要另外提供 `wait_for_idle()`，而且 `should_be_on_this_page()` 最後一定要呼叫 `wait_for_idle()`。（確認在某個頁面之後，才有辦法依不同頁面的特性，檢查是否所有 Ajax request 都回來了）
 * 操作結束後，通常會傳回自己或另一個 Page Object，方便做 chained call。（當然 `should_be_on_this_page()` 跟 `wait_for_idle()` 也不例外）
 * 合併 UI Mapping 的概念使用，可以將各頁面不同的 locators 封裝起來。
 * 如果相同的操作在不同的條件下會有不同的結果，也就是導向不同的頁面，就應該獨立成兩個操作。例如 `login()` 跟 `login_invalid()`。因此頁面之間的關係可以從 Page Object 一些操作的回傳值推導出來。
 * 由於是高層次的操作，所以方法就要避免 `click`、`select`、`check`、`button`、`field` 等暗示畫面表現方式的字眼
   ** 例如 `click save button` 用 `save` 來表示即可
   ** 例如 `click and type in the xxx field` 可以寫成 `input xxx`。
   ** 如果 click 會在不同狀態間切換，`expand/collapse xxx` 會比單純的 `click xxx` 來得好，可以把許多複雜的判斷 hide 起來。
   ** `Search Keyword` 會比 `Click Search Box` + `Input Keyword` + `Click Search Button` 來得好。
 * 如果一個動作跨及多個頁面，沒有問題，但應該要擺在動作開始的頁面
 * 如果要做一件事，在晝面上有兩個管道(例如按取消按鈕或右上方叉叉直接關閉)，基本上使用者不太需要關心畫面上是怎麼操作的，如果真有需要，可以提出非必要的參數，做為一個 hint。
 * 如果有切換視窗的動作，`click xxx` 就要選定新的視窗，`close xxx` 就要選回主視窗。
 * 一開始不要提供太細微的操作, 否則測試的意圖就很難被看出來。操作如果太 high-level，L10N 就沒機會安插拍圖的動作，例如 `login(username, password)` 如果拆成 `input_username_and_password()` 跟 `login()`，L10N 就有機會拍下輸入完帳密後的畫面。
 * 除了高層次的 "操作" 之外，剩下的都是一些用來取得畫面上不同部位 "狀態" 的方法。（粗／細？）
 * 考量到 L10N，例如 `get_selected_tab()` 跟 `get_selected_tab_text()`，前者的回傳值不會因語言改變，但後者會。

TIP: 相同的概念，也可以套用在一般的 link:../gui/test/automation.html[GUI Automation] 上，要稱做 Screen Object Pattern 嗎？固定用來操作現在取得焦點的視窗。

NOTE: Page Object Pattern 不只要把 locator 隱藏起來，而是要提供 high-level 的 intent，否則 UI operation detail 還是外漏，沒有什麼意義。所以 POP 上的方法絕不會是 click_xxx 這種一看就是 UI 的方法... 否則 click_xxx 跟 hover_xxx 不就要分開包裝... 沒完沒了（但會有一大堆 get_xxx，傳回字串就好，因為轉型可能會有錯，比對也不方便）。但一個 method 的操作不會超過一個畫面？ 不過越 high-level 會衍生一個問題，就是 L10N 沒機會插入做 take snapshot 的動作，要怎麼平衡？還是要拍圖再拆？

我不覺得 page object 可以用來包裝 component... 至少 method 的名稱要把 context 帶進來。

[TBD] 整理 `Page Object Pattern.mm`...

== 參考資料 ==

.文件
--
 * http://code.google.com/p/selenium/wiki/PageObjects[PageObjects]
 * http://seleniumhq.org/docs/06_test_design_considerations.html#page-object-design-pattern[Test Design Considerations > Page Object Design Pattern — Selenium Documentation]
--

.其他文件
--
 * http://sharetest.codeplex.com/[ShareTest]
 * http://watirmelon.com/2012/06/22/rspec-page-objects-and-user-flows/[Rspec, page objects and user flows | WatirMelon] (2012-06-22)
 * http://gojko.net/2010/04/13/how-to-implement-ui-testing-without-shooting-yourself-in-the-foot-2/[How to implement UI testing without shooting yourself in the foot] (2010-04-13)
 * http://pragprog.com/magazines/2010-08/page-objects-in-python[The Pragmatic Bookshelf | PragPub August 2010 | Page Objects in Python] (2010-08)
--

