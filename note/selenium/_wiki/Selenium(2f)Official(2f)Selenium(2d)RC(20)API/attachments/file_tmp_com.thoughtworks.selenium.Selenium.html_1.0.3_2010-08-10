     __________________________________________________________________


   Overview  Package   Class  Use  Tree  Deprecated  Index  Help
    PREV CLASS   NEXT CLASS FRAMES    NO FRAMES     All Classes
   SUMMARY: NESTED | FIELD | CONSTR | METHOD
   DETAIL: FIELD | CONSTR | METHOD
     __________________________________________________________________

com.thoughtworks.selenium
Interface Selenium

   All Known Implementing Classes:
          DefaultSelenium
     __________________________________________________________________

public interface Selenium

   Defines an object that runs Selenium commands.

  Element Locators

   Element Locators tell Selenium which HTML element a command refers to.
   The format of a locator is:

     locatorType=argument

   We support the following strategies for locating elements:
     * identifier=id: Select the element with the specified @id attribute.
       If no match is found, select the first element whose @name
       attribute is id. (This is normally the default; see below.)
     * id=id: Select the element with the specified @id attribute.
     * name=name: Select the first element with the specified @name
       attribute.
          + username
          + name=username
       The name may optionally be followed by one or more element-filters,
       separated from the name by whitespace. If the filterType is not
       specified, value is assumed.
          + name=flavour value=chocolate
     * dom=javascriptExpression: Find an element by evaluating the
       specified string. This allows you to traverse the HTML Document
       Object Model using JavaScript. Note that you must not return a
       value in this string; simply make it the last expression in the
       block.
          + dom=document.forms['myForm'].myDropdown
          + dom=document.images[56]
          + dom=function foo() { return document.links[1]; }; foo();
     * xpath=xpathExpression: Locate an element using an XPath expression.
          + xpath=//img[@alt='The image alt text']
          + xpath=//table[@id='table1']//tr[4]/td[2]
          + xpath=//a[contains(@href,'#id1')]
          + xpath=//a[contains(@href,'#id1')]/@class
          + xpath=(//table[@class='stylee'])//th[text()='theHeaderText']/.
            ./td
          + xpath=//input[@name='name2' and @value='yes']
          + xpath=//*[text()="right"]
     * link=textPattern: Select the link (anchor) element which contains
       text matching the specified pattern.
          + link=The link text
     * css=cssSelectorSyntax: Select the element using css selectors.
       Please refer to CSS2 selectors, CSS3 selectors for more
       information. You can also check the TestCssLocators test in the
       selenium test suite for an example of usage, which is included in
       the downloaded selenium core package.
          + css=a[href="#id3"]
          + css=span#firstChild + span
       Currently the css selector locator supports all css1, css2 and css3
       selectors except namespace in css3, some pseudo
       classes(:nth-of-type, :nth-last-of-type, :first-of-type,
       :last-of-type, :only-of-type, :visited, :hover, :active, :focus,
       :indeterminate) and pseudo elements(::first-line, ::first-letter,
       ::selection, ::before, ::after).
     * ui=uiSpecifierString: Locate an element by resolving the UI
       specifier string to another locator, and evaluating it. See the
       Selenium UI-Element Reference for more details.
          + ui=loginPages::loginButton()
          + ui=settingsPages::toggle(label=Hide Email)
          + ui=forumPages::postBody(index=2)//a[2]

   Without an explicit locator prefix, Selenium uses the following default
   strategies:
     * dom, for locators starting with "document."
     * xpath, for locators starting with "//"
     * identifier, otherwise

  Element Filters

     Element filters can be used with a locator to refine a list of
     candidate elements. They are currently used only in the 'name'
     element-locator.

     Filters look much like locators, ie.

     filterType=argument

     Supported element-filters are:

     value=valuePattern

     Matches elements based on their values. This is particularly useful
     for refining a list of similarly-named toggle-buttons.

     index=index

     Selects a single element based on its position in the list (offset
     from zero).

  String-match Patterns

   Various Pattern syntaxes are available for matching string values:
     * glob:pattern: Match a string against a "glob" (aka "wildmat")
       pattern. "Glob" is a kind of limited regular-expression syntax
       typically used in command-line shells. In a glob pattern, "*"
       represents any sequence of characters, and "?" represents any
       single character. Glob patterns match against the entire string.
     * regexp:regexp: Match a string using a regular-expression. The full
       power of JavaScript regular-expressions is available.
     * regexpi:regexpi: Match a string using a case-insensitive
       regular-expression.
     * exact:string: Match a string exactly, verbatim, without any of that
       fancy wildcard stuff.

   If no pattern prefix is specified, Selenium assumes that it's a "glob"
   pattern.

   For commands that return multiple values (such as verifySelectOptions),
   the string being matched is a comma-separated list of the return
   values, where both commas and backslashes in the values are
   backslash-escaped. When providing a pattern, the optional matching
   syntax (i.e. glob, regexp, etc.) is specified once, as usual, at the
   beginning of the pattern.
     __________________________________________________________________

   Method Summary
    void addCustomRequestHeader(java.lang.String key,
   java.lang.String value)
             Tells the Selenium server to add the specificed key and value
   as a custom outgoing request header.
    void addLocationStrategy(java.lang.String strategyName,
   java.lang.String functionDefinition)
             Defines a new function for Selenium to locate elements on the
   page.
    void addScript(java.lang.String scriptContent,
   java.lang.String scriptTagId)
             Loads script content into a new script tag in the Selenium
   document.
    void addSelection(java.lang.String locator,
   java.lang.String optionLocator)
             Add a selection to the set of selected options in a
   multi-select element using an option locator.
    void allowNativeXpath(java.lang.String allow)
             Specifies whether Selenium should use the native in-browser
   implementation of XPath (if any native version is available); if you
   pass "false" to this function, we will always use our pure-JavaScript
   xpath library.
    void altKeyDown()
             Press the alt key and hold it down until doAltUp() is called
   or a new page is loaded.
    void altKeyUp()
             Release the alt key.
    void answerOnNextPrompt(java.lang.String answer)
             Instructs Selenium to return the specified answer string in
   response to the next JavaScript prompt [window.prompt()].
    void assignId(java.lang.String locator, java.lang.String identifier)
             Temporarily sets the "id" attribute of the specified element,
   so you can locate it in the future using its ID rather than a
   slow/complicated XPath.
    void attachFile(java.lang.String fieldLocator,
   java.lang.String fileLocator)
             Sets a file input (upload) field to the file listed in
   fileLocator
    void captureEntirePageScreenshot(java.lang.String filename,
   java.lang.String kwargs)
             Saves the entire contents of the current window canvas to a
   PNG file.
    java.lang.String
   captureEntirePageScreenshotToString(java.lang.String kwargs)
             Downloads a screenshot of the browser current window canvas
   to a based 64 encoded PNG file.
    java.lang.String captureNetworkTraffic(java.lang.String type)
             Returns the network traffic seen by the browser, including
   headers, AJAX requests, status codes, and timings.
    void captureScreenshot(java.lang.String filename)
             Captures a PNG screenshot to the specified file.
    java.lang.String captureScreenshotToString()
             Capture a PNG screenshot.
    void check(java.lang.String locator)
             Check a toggle-button (checkbox/radio)
    void chooseCancelOnNextConfirmation()
              By default, Selenium's overridden window.confirm() function
   will return true, as if the user had manually clicked OK; after running
   this command, the next call to confirm() will return false, as if the
   user had clicked Cancel.
    void chooseOkOnNextConfirmation()
              Undo the effect of calling chooseCancelOnNextConfirmation.
    void click(java.lang.String locator)
             Clicks on a link, button, checkbox or radio button.
    void clickAt(java.lang.String locator, java.lang.String coordString)
             Clicks on a link, button, checkbox or radio button.
    void close()
             Simulates the user clicking the "close" button in the
   titlebar of a popup window or tab.
    void contextMenu(java.lang.String locator)
             Simulates opening the context menu for the specified element
   (as might happen if the user "right-clicked" on the element).
    void contextMenuAt(java.lang.String locator,
   java.lang.String coordString)
             Simulates opening the context menu for the specified element
   (as might happen if the user "right-clicked" on the element).
    void controlKeyDown()
             Press the control key and hold it down until doControlUp() is
   called or a new page is loaded.
    void controlKeyUp()
             Release the control key.
    void createCookie(java.lang.String nameValuePair,
   java.lang.String optionsString)
             Create a new cookie whose path and domain are same with those
   of current page under test, unless you specified a path for this cookie
   explicitly.
    void deleteAllVisibleCookies()
             Calls deleteCookie with recurse=true on all cookies visible
   to the current page.
    void deleteCookie(java.lang.String name,
   java.lang.String optionsString)
             Delete a named cookie with specified path and domain.
    void deselectPopUp()
             Selects the main window.
    void doubleClick(java.lang.String locator)
             Double clicks on a link, button, checkbox or radio button.
    void doubleClickAt(java.lang.String locator,
   java.lang.String coordString)
             Doubleclicks on a link, button, checkbox or radio button.
    void dragAndDrop(java.lang.String locator,
   java.lang.String movementsString)
             Drags an element a certain distance and then drops it
    void dragAndDropToObject(java.lang.String locatorOfObjectToBeDragged,
   java.lang.String locatorOfDragDestinationObject)
             Drags an element and drops it on another element
    void dragdrop(java.lang.String locator,
   java.lang.String movementsString)
             deprecated - use dragAndDrop instead
    void fireEvent(java.lang.String locator, java.lang.String eventName)
             Explicitly simulate an event, to trigger the corresponding
   "onevent" handler.
    void focus(java.lang.String locator)
             Move the focus to the specified element; for example, if the
   element is an input field, move the cursor to that field.
    java.lang.String getAlert()
             Retrieves the message of a JavaScript alert generated during
   the previous action, or fail if there were no alerts.
    java.lang.String[] getAllButtons()
             Returns the IDs of all buttons on the page.
    java.lang.String[] getAllFields()
             Returns the IDs of all input fields on the page.
    java.lang.String[] getAllLinks()
             Returns the IDs of all links on the page.
    java.lang.String[] getAllWindowIds()
             Returns the IDs of all windows that the browser knows about.
    java.lang.String[] getAllWindowNames()
             Returns the names of all windows that the browser knows
   about.
    java.lang.String[] getAllWindowTitles()
             Returns the titles of all windows that the browser knows
   about.
    java.lang.String getAttribute(java.lang.String attributeLocator)
             Gets the value of an element attribute.
    java.lang.String[]
   getAttributeFromAllWindows(java.lang.String attributeName)
             Returns every instance of some attribute from all known
   windows.
    java.lang.String getBodyText()
             Gets the entire text of the page.
    java.lang.String getConfirmation()
             Retrieves the message of a JavaScript confirmation dialog
   generated during the previous action.
    java.lang.String getCookie()
             Return all cookies of the current page under test.
    java.lang.String getCookieByName(java.lang.String name)
             Returns the value of the cookie with the specified name, or
   throws an error if the cookie is not present.
    java.lang.Number getCursorPosition(java.lang.String locator)
             Retrieves the text cursor position in the given input element
   or textarea; beware, this may not work perfectly on all browsers.
    java.lang.Number getElementHeight(java.lang.String locator)
             Retrieves the height of an element
    java.lang.Number getElementIndex(java.lang.String locator)
             Get the relative index of an element to its parent (starting
   from 0).
    java.lang.Number getElementPositionLeft(java.lang.String locator)
             Retrieves the horizontal position of an element
    java.lang.Number getElementPositionTop(java.lang.String locator)
             Retrieves the vertical position of an element
    java.lang.Number getElementWidth(java.lang.String locator)
             Retrieves the width of an element
    java.lang.String getEval(java.lang.String script)
             Gets the result of evaluating the specified JavaScript
   snippet.
    java.lang.String getExpression(java.lang.String expression)
             Returns the specified expression.
    java.lang.String getHtmlSource()
             Returns the entire HTML source between the opening and
   closing "html" tags.
    java.lang.String getLocation()
             Gets the absolute URL of the current page.
    java.lang.Number getMouseSpeed()
             Returns the number of pixels between "mousemove" events
   during dragAndDrop commands (default=10).
    java.lang.String getPrompt()
             Retrieves the message of a JavaScript question prompt dialog
   generated during the previous action.
    java.lang.String getSelectedId(java.lang.String selectLocator)
             Gets option element ID for selected option in the specified
   select element.
    java.lang.String[] getSelectedIds(java.lang.String selectLocator)
             Gets all option element IDs for selected options in the
   specified select or multi-select element.
    java.lang.String getSelectedIndex(java.lang.String selectLocator)
             Gets option index (option number, starting at 0) for selected
   option in the specified select element.
    java.lang.String[] getSelectedIndexes(java.lang.String selectLocator)
             Gets all option indexes (option number, starting at 0) for
   selected options in the specified select or multi-select element.
    java.lang.String getSelectedLabel(java.lang.String selectLocator)
             Gets option label (visible text) for selected option in the
   specified select element.
    java.lang.String[] getSelectedLabels(java.lang.String selectLocator)
             Gets all option labels (visible text) for selected options in
   the specified select or multi-select element.
    java.lang.String getSelectedValue(java.lang.String selectLocator)
             Gets option value (value attribute) for selected option in
   the specified select element.
    java.lang.String[] getSelectedValues(java.lang.String selectLocator)
             Gets all option values (value attributes) for selected
   options in the specified select or multi-select element.
    java.lang.String[] getSelectOptions(java.lang.String selectLocator)
             Gets all option labels in the specified select drop-down.
    java.lang.String getSpeed()
             Get execution speed (i.e., get the millisecond length of the
   delay following each selenium operation).
    java.lang.String getTable(java.lang.String tableCellAddress)
             Gets the text from a cell of a table.
    java.lang.String getText(java.lang.String locator)
             Gets the text of an element.
    java.lang.String getTitle()
             Gets the title of the current page.
    java.lang.String getValue(java.lang.String locator)
             Gets the (whitespace-trimmed) value of an input field (or
   anything else with a value parameter).
    boolean
   getWhetherThisFrameMatchFrameExpression(java.lang.String currentFrameSt
   ring, java.lang.String target)
             Determine whether current/locator identify the frame
   containing this running code.
    boolean
   getWhetherThisWindowMatchWindowExpression(java.lang.String currentWindo
   wString, java.lang.String target)
             Determine whether currentWindowString plus target identify
   the window containing this running code.
    java.lang.Number getXpathCount(java.lang.String xpath)
             Returns the number of nodes that match the specified xpath,
   eg.
    void goBack()
             Simulates the user clicking the "back" button on their
   browser.
    void highlight(java.lang.String locator)
             Briefly changes the backgroundColor of the specified element
   yellow.
    void ignoreAttributesWithoutValue(java.lang.String ignore)
             Specifies whether Selenium will ignore xpath attributes that
   have no value, i.e.
    boolean isAlertPresent()
             Has an alert occurred?
    boolean isChecked(java.lang.String locator)
             Gets whether a toggle-button (checkbox/radio) is checked.
    boolean isConfirmationPresent()
             Has confirm() been called?
    boolean isCookiePresent(java.lang.String name)
             Returns true if a cookie with the specified name is present,
   or false otherwise.
    boolean isEditable(java.lang.String locator)
             Determines whether the specified input element is editable,
   ie hasn't been disabled.
    boolean isElementPresent(java.lang.String locator)
             Verifies that the specified element is somewhere on the page.
    boolean isOrdered(java.lang.String locator1,
   java.lang.String locator2)
             Check if these two elements have same parent and are ordered
   siblings in the DOM.
    boolean isPromptPresent()
             Has a prompt occurred?
    boolean isSomethingSelected(java.lang.String selectLocator)
             Determines whether some option in a drop-down menu is
   selected.
    boolean isTextPresent(java.lang.String pattern)
             Verifies that the specified text pattern appears somewhere on
   the rendered page shown to the user.
    boolean isVisible(java.lang.String locator)
             Determines if the specified element is visible.
    void keyDown(java.lang.String locator, java.lang.String keySequence)
             Simulates a user pressing a key (without releasing it yet).
    void keyDownNative(java.lang.String keycode)
             Simulates a user pressing a key (without releasing it yet) by
   sending a native operating system keystroke.
    void keyPress(java.lang.String locator, java.lang.String keySequence)
             Simulates a user pressing and releasing a key.
    void keyPressNative(java.lang.String keycode)
             Simulates a user pressing and releasing a key by sending a
   native operating system keystroke.
    void keyUp(java.lang.String locator, java.lang.String keySequence)
             Simulates a user releasing a key.
    void keyUpNative(java.lang.String keycode)
             Simulates a user releasing a key by sending a native
   operating system keystroke.
    void metaKeyDown()
             Press the meta key and hold it down until doMetaUp() is
   called or a new page is loaded.
    void metaKeyUp()
             Release the meta key.
    void mouseDown(java.lang.String locator)
             Simulates a user pressing the left mouse button (without
   releasing it yet) on the specified element.
    void mouseDownAt(java.lang.String locator,
   java.lang.String coordString)
             Simulates a user pressing the left mouse button (without
   releasing it yet) at the specified location.
    void mouseDownRight(java.lang.String locator)
             Simulates a user pressing the right mouse button (without
   releasing it yet) on the specified element.
    void mouseDownRightAt(java.lang.String locator,
   java.lang.String coordString)
             Simulates a user pressing the right mouse button (without
   releasing it yet) at the specified location.
    void mouseMove(java.lang.String locator)
             Simulates a user pressing the mouse button (without releasing
   it yet) on the specified element.
    void mouseMoveAt(java.lang.String locator,
   java.lang.String coordString)
             Simulates a user pressing the mouse button (without releasing
   it yet) on the specified element.
    void mouseOut(java.lang.String locator)
             Simulates a user moving the mouse pointer away from the
   specified element.
    void mouseOver(java.lang.String locator)
             Simulates a user hovering a mouse over the specified element.
    void mouseUp(java.lang.String locator)
             Simulates the event that occurs when the user releases the
   mouse button (i.e., stops holding the button down) on the specified
   element.
    void mouseUpAt(java.lang.String locator, java.lang.String coordString)
             Simulates the event that occurs when the user releases the
   mouse button (i.e., stops holding the button down) at the specified
   location.
    void mouseUpRight(java.lang.String locator)
             Simulates the event that occurs when the user releases the
   right mouse button (i.e., stops holding the button down) on the
   specified element.
    void mouseUpRightAt(java.lang.String locator,
   java.lang.String coordString)
             Simulates the event that occurs when the user releases the
   right mouse button (i.e., stops holding the button down) at the
   specified location.
    void open(java.lang.String url)
             Opens an URL in the test frame.
    void openWindow(java.lang.String url, java.lang.String windowID)
             Opens a popup window (if a window with that ID isn't already
   open).
    void refresh()
             Simulates the user clicking the "Refresh" button on their
   browser.
    void removeAllSelections(java.lang.String locator)
             Unselects all of the selected options in a multi-select
   element.
    void removeScript(java.lang.String scriptTagId)
             Removes a script tag from the Selenium document identified by
   the given id.
    void removeSelection(java.lang.String locator,
   java.lang.String optionLocator)
             Remove a selection from the set of selected options in a
   multi-select element using an option locator.
    java.lang.String retrieveLastRemoteControlLogs()
             Retrieve the last messages logged on a specific remote
   control.
    void rollup(java.lang.String rollupName, java.lang.String kwargs)
             Executes a command rollup, which is a series of commands with
   a unique name, and optionally arguments that control the generation of
   the set of commands.
    void runScript(java.lang.String script)
             Creates a new "script" tag in the body of the current test
   window, and adds the specified text into the body of the command.
    void select(java.lang.String selectLocator,
   java.lang.String optionLocator)
             Select an option from a drop-down using an option locator.
    void selectFrame(java.lang.String locator)
             Selects a frame within the current window.
    void selectPopUp(java.lang.String windowID)
             Simplifies the process of selecting a popup window (and does
   not offer functionality beyond what selectWindow() already provides).
    void selectWindow(java.lang.String windowID)
             Selects a popup window using a window locator; once a popup
   window has been selected, all commands go to that window.
    void setBrowserLogLevel(java.lang.String logLevel)
             Sets the threshold for browser-side logging messages; log
   messages beneath this threshold will be discarded.
    void setContext(java.lang.String context)
             Writes a message to the status bar and adds a note to the
   browser-side log.
    void setCursorPosition(java.lang.String locator,
   java.lang.String position)
             Moves the text cursor to the specified position in the given
   input element or textarea.
    void setExtensionJs(java.lang.String extensionJs)
             Sets the per-session extension Javascript
    void setMouseSpeed(java.lang.String pixels)
             Configure the number of pixels between "mousemove" events
   during dragAndDrop commands (default=10).
    void setSpeed(java.lang.String value)
             Set execution speed (i.e., set the millisecond length of a
   delay which will follow each selenium operation).
    void setTimeout(java.lang.String timeout)
             Specifies the amount of time that Selenium will wait for
   actions to complete.
    void shiftKeyDown()
             Press the shift key and hold it down until doShiftUp() is
   called or a new page is loaded.
    void shiftKeyUp()
             Release the shift key.
    void showContextualBanner()
             Shows in the RemoteRunner a banner for the current test The
   banner is 'classname : methodname' where those two are derived from the
   caller The method name will be unCamelCased with the insertion of
   spaces at word boundaries
    void showContextualBanner(java.lang.String className,
   java.lang.String methodName)
             Shows in the RemoteRunner a banner for the current test The
   banner is 'classname : methodname' The method name will be unCamelCased
   with the insertion of spaces at word boundaries
    void shutDownSeleniumServer()
             Kills the running Selenium Server and all browser sessions.
    void start()
             Launches the browser with a new Selenium session
    void start(java.lang.Object optionsObject)
             Starts a new Selenium testing session with a configuration
   options object
    void start(java.lang.String optionsString)
             Starts a new Selenium testing session with a String,
   representing a configuration
    void stop()
             Ends the test session, killing the browser
    void submit(java.lang.String formLocator)
             Submit the specified form.
    void type(java.lang.String locator, java.lang.String value)
             Sets the value of an input field, as though you typed it in.
    void typeKeys(java.lang.String locator, java.lang.String value)
             Simulates keystroke events on the specified element, as
   though you typed the value key-by-key.
    void uncheck(java.lang.String locator)
             Uncheck a toggle-button (checkbox/radio)
    void useXpathLibrary(java.lang.String libraryName)
             Allows choice of one of the available libraries.
    void waitForCondition(java.lang.String script,
   java.lang.String timeout)
             Runs the specified JavaScript snippet repeatedly until it
   evaluates to "true".
    void waitForFrameToLoad(java.lang.String frameAddress,
   java.lang.String timeout)
             Waits for a new frame to load.
    void waitForPageToLoad(java.lang.String timeout)
             Waits for a new page to load.
    void waitForPopUp(java.lang.String windowID, java.lang.String timeout)
             Waits for a popup window to appear and load up.
    void windowFocus()
             Gives focus to the currently selected window
    void windowMaximize()
             Resize currently selected window to take up the entire screen



   Method Detail

  setExtensionJs

void setExtensionJs(java.lang.String extensionJs)

          Sets the per-session extension Javascript
     __________________________________________________________________

  start

void start()

          Launches the browser with a new Selenium session
     __________________________________________________________________

  start

void start(java.lang.String optionsString)

          Starts a new Selenium testing session with a String,
          representing a configuration
     __________________________________________________________________

  start

void start(java.lang.Object optionsObject)

          Starts a new Selenium testing session with a configuration
          options object
     __________________________________________________________________

  stop

void stop()

          Ends the test session, killing the browser
     __________________________________________________________________

  showContextualBanner

void showContextualBanner()

          Shows in the RemoteRunner a banner for the current test The
          banner is 'classname : methodname' where those two are derived
          from the caller The method name will be unCamelCased with the
          insertion of spaces at word boundaries
     __________________________________________________________________

  showContextualBanner

void showContextualBanner(java.lang.String className,
                          java.lang.String methodName)

          Shows in the RemoteRunner a banner for the current test The
          banner is 'classname : methodname' The method name will be
          unCamelCased with the insertion of spaces at word boundaries
     __________________________________________________________________

  click

void click(java.lang.String locator)

          Clicks on a link, button, checkbox or radio button. If the click
          action causes a new page to load (like a link usually does),
          call waitForPageToLoad.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  doubleClick

void doubleClick(java.lang.String locator)

          Double clicks on a link, button, checkbox or radio button. If
          the double click action causes a new page to load (like a link
          usually does), call waitForPageToLoad.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  contextMenu

void contextMenu(java.lang.String locator)

          Simulates opening the context menu for the specified element (as
          might happen if the user "right-clicked" on the element).

        Parameters:
                locator - an element locator
     __________________________________________________________________

  clickAt

void clickAt(java.lang.String locator,
             java.lang.String coordString)

          Clicks on a link, button, checkbox or radio button. If the click
          action causes a new page to load (like a link usually does),
          call waitForPageToLoad.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  doubleClickAt

void doubleClickAt(java.lang.String locator,
                   java.lang.String coordString)

          Doubleclicks on a link, button, checkbox or radio button. If the
          action causes a new page to load (like a link usually does),
          call waitForPageToLoad.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  contextMenuAt

void contextMenuAt(java.lang.String locator,
                   java.lang.String coordString)

          Simulates opening the context menu for the specified element (as
          might happen if the user "right-clicked" on the element).

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  fireEvent

void fireEvent(java.lang.String locator,
               java.lang.String eventName)

          Explicitly simulate an event, to trigger the corresponding
          "onevent" handler.

        Parameters:
                locator - an element locator
                eventName - the event name, e.g. "focus" or "blur"
     __________________________________________________________________

  focus

void focus(java.lang.String locator)

          Move the focus to the specified element; for example, if the
          element is an input field, move the cursor to that field.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  keyPress

void keyPress(java.lang.String locator,
              java.lang.String keySequence)

          Simulates a user pressing and releasing a key.

        Parameters:
                locator - an element locator
                keySequence - Either be a string("\" followed by the
                numeric keycode of the key to be pressed, normally the
                ASCII value of that key), or a single character. For
                example: "w", "\119".
     __________________________________________________________________

  shiftKeyDown

void shiftKeyDown()

          Press the shift key and hold it down until doShiftUp() is called
          or a new page is loaded.
     __________________________________________________________________

  shiftKeyUp

void shiftKeyUp()

          Release the shift key.
     __________________________________________________________________

  metaKeyDown

void metaKeyDown()

          Press the meta key and hold it down until doMetaUp() is called
          or a new page is loaded.
     __________________________________________________________________

  metaKeyUp

void metaKeyUp()

          Release the meta key.
     __________________________________________________________________

  altKeyDown

void altKeyDown()

          Press the alt key and hold it down until doAltUp() is called or
          a new page is loaded.
     __________________________________________________________________

  altKeyUp

void altKeyUp()

          Release the alt key.
     __________________________________________________________________

  controlKeyDown

void controlKeyDown()

          Press the control key and hold it down until doControlUp() is
          called or a new page is loaded.
     __________________________________________________________________

  controlKeyUp

void controlKeyUp()

          Release the control key.
     __________________________________________________________________

  keyDown

void keyDown(java.lang.String locator,
             java.lang.String keySequence)

          Simulates a user pressing a key (without releasing it yet).

        Parameters:
                locator - an element locator
                keySequence - Either be a string("\" followed by the
                numeric keycode of the key to be pressed, normally the
                ASCII value of that key), or a single character. For
                example: "w", "\119".
     __________________________________________________________________

  keyUp

void keyUp(java.lang.String locator,
           java.lang.String keySequence)

          Simulates a user releasing a key.

        Parameters:
                locator - an element locator
                keySequence - Either be a string("\" followed by the
                numeric keycode of the key to be pressed, normally the
                ASCII value of that key), or a single character. For
                example: "w", "\119".
     __________________________________________________________________

  mouseOver

void mouseOver(java.lang.String locator)

          Simulates a user hovering a mouse over the specified element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseOut

void mouseOut(java.lang.String locator)

          Simulates a user moving the mouse pointer away from the
          specified element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseDown

void mouseDown(java.lang.String locator)

          Simulates a user pressing the left mouse button (without
          releasing it yet) on the specified element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseDownRight

void mouseDownRight(java.lang.String locator)

          Simulates a user pressing the right mouse button (without
          releasing it yet) on the specified element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseDownAt

void mouseDownAt(java.lang.String locator,
                 java.lang.String coordString)

          Simulates a user pressing the left mouse button (without
          releasing it yet) at the specified location.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  mouseDownRightAt

void mouseDownRightAt(java.lang.String locator,
                      java.lang.String coordString)

          Simulates a user pressing the right mouse button (without
          releasing it yet) at the specified location.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  mouseUp

void mouseUp(java.lang.String locator)

          Simulates the event that occurs when the user releases the mouse
          button (i.e., stops holding the button down) on the specified
          element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseUpRight

void mouseUpRight(java.lang.String locator)

          Simulates the event that occurs when the user releases the right
          mouse button (i.e., stops holding the button down) on the
          specified element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseUpAt

void mouseUpAt(java.lang.String locator,
               java.lang.String coordString)

          Simulates the event that occurs when the user releases the mouse
          button (i.e., stops holding the button down) at the specified
          location.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  mouseUpRightAt

void mouseUpRightAt(java.lang.String locator,
                    java.lang.String coordString)

          Simulates the event that occurs when the user releases the right
          mouse button (i.e., stops holding the button down) at the
          specified location.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  mouseMove

void mouseMove(java.lang.String locator)

          Simulates a user pressing the mouse button (without releasing it
          yet) on the specified element.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  mouseMoveAt

void mouseMoveAt(java.lang.String locator,
                 java.lang.String coordString)

          Simulates a user pressing the mouse button (without releasing it
          yet) on the specified element.

        Parameters:
                locator - an element locator
                coordString - specifies the x,y position (i.e. - 10,20) of
                the mouse event relative to the element returned by the
                locator.
     __________________________________________________________________

  type

void type(java.lang.String locator,
          java.lang.String value)

          Sets the value of an input field, as though you typed it in.

          Can also be used to set the value of combo boxes, check boxes,
          etc. In these cases, value should be the value of the option
          selected, not the visible text.

        Parameters:
                locator - an element locator
                value - the value to type
     __________________________________________________________________

  typeKeys

void typeKeys(java.lang.String locator,
              java.lang.String value)

          Simulates keystroke events on the specified element, as though
          you typed the value key-by-key.

          This is a convenience method for calling keyDown, keyUp,
          keyPress for every character in the specified string; this is
          useful for dynamic UI widgets (like auto-completing combo boxes)
          that require explicit key events.

          Unlike the simple "type" command, which forces the specified
          value into the page directly, this command may or may not have
          any visible effect, even in cases where typing keys would
          normally have a visible effect. For example, if you use
          "typeKeys" on a form element, you may or may not see the results
          of what you typed in the field.

          In some cases, you may need to use the simple "type" command to
          set the value of the field and then the "typeKeys" command to
          send the keystroke events corresponding to what you just typed.

        Parameters:
                locator - an element locator
                value - the value to type
     __________________________________________________________________

  setSpeed

void setSpeed(java.lang.String value)

          Set execution speed (i.e., set the millisecond length of a delay
          which will follow each selenium operation). By default, there is
          no such delay, i.e., the delay is 0 milliseconds.

        Parameters:
                value - the number of milliseconds to pause after
                operation
     __________________________________________________________________

  getSpeed

java.lang.String getSpeed()

          Get execution speed (i.e., get the millisecond length of the
          delay following each selenium operation). By default, there is
          no such delay, i.e., the delay is 0 milliseconds. See also
          setSpeed.

        Returns:
                the execution speed in milliseconds.
     __________________________________________________________________

  check

void check(java.lang.String locator)

          Check a toggle-button (checkbox/radio)

        Parameters:
                locator - an element locator
     __________________________________________________________________

  uncheck

void uncheck(java.lang.String locator)

          Uncheck a toggle-button (checkbox/radio)

        Parameters:
                locator - an element locator
     __________________________________________________________________

  select

void select(java.lang.String selectLocator,
            java.lang.String optionLocator)

          Select an option from a drop-down using an option locator.

          Option locators provide different ways of specifying options of
          an HTML Select element (e.g. for selecting a specific option, or
          for asserting that the selected option satisfies a
          specification). There are several forms of Select Option
          Locator.

          + label=labelPattern: matches options based on their labels,
            i.e. the visible text. (This is the default.)
               o label=regexp:^[Oo]ther
          + value=valuePattern: matches options based on their values.
               o value=other
          + id=id: matches options based on their ids.
               o id=option1
          + index=index: matches an option based on its index (offset from
            zero).
               o index=2

          If no option locator prefix is provided, the default behaviour
          is to match on label.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu
                optionLocator - an option locator (a label by default)
     __________________________________________________________________

  addSelection

void addSelection(java.lang.String locator,
                  java.lang.String optionLocator)

          Add a selection to the set of selected options in a multi-select
          element using an option locator.

        Parameters:
                locator - an element locator identifying a multi-select
                box
                optionLocator - an option locator (a label by default)

        See Also:
                for details of option locators
     __________________________________________________________________

  removeSelection

void removeSelection(java.lang.String locator,
                     java.lang.String optionLocator)

          Remove a selection from the set of selected options in a
          multi-select element using an option locator.

        Parameters:
                locator - an element locator identifying a multi-select
                box
                optionLocator - an option locator (a label by default)

        See Also:
                for details of option locators
     __________________________________________________________________

  removeAllSelections

void removeAllSelections(java.lang.String locator)

          Unselects all of the selected options in a multi-select element.

        Parameters:
                locator - an element locator identifying a multi-select
                box
     __________________________________________________________________

  submit

void submit(java.lang.String formLocator)

          Submit the specified form. This is particularly useful for forms
          without submit buttons, e.g. single-input "Search" forms.

        Parameters:
                formLocator - an element locator for the form you want to
                submit
     __________________________________________________________________

  open

void open(java.lang.String url)

          Opens an URL in the test frame. This accepts both relative and
          absolute URLs. The "open" command waits for the page to load
          before proceeding, ie. the "AndWait" suffix is implicit. Note:
          The URL must be on the same domain as the runner HTML due to
          security restrictions in the browser (Same Origin Policy). If
          you need to open an URL on another domain, use the Selenium
          Server to start a new browser session on that domain.

        Parameters:
                url - the URL to open; may be relative or absolute
     __________________________________________________________________

  openWindow

void openWindow(java.lang.String url,
                java.lang.String windowID)

          Opens a popup window (if a window with that ID isn't already
          open). After opening the window, you'll need to select it using
          the selectWindow command.

          This command can also be a useful workaround for bug SEL-339. In
          some cases, Selenium will be unable to intercept a call to
          window.open (if the call occurs during or before the "onLoad"
          event, for example). In those cases, you can force Selenium to
          notice the open window's name by using the Selenium openWindow
          command, using an empty (blank) url, like this: openWindow("",
          "myFunnyWindow").

        Parameters:
                url - the URL to open, which can be blank
                windowID - the JavaScript window ID of the window to
                select
     __________________________________________________________________

  selectWindow

void selectWindow(java.lang.String windowID)

          Selects a popup window using a window locator; once a popup
          window has been selected, all commands go to that window. To
          select the main window again, use null as the target.

          Window locators provide different ways of specifying the window
          object: by title, by internal JavaScript "name," or by
          JavaScript variable.

          + title=My Special Window: Finds the window using the text that
            appears in the title bar. Be careful; two windows can share
            the same title. If that happens, this locator will just pick
            one.
          + name=myWindow: Finds the window using its internal JavaScript
            "name" property. This is the second parameter "windowName"
            passed to the JavaScript method window.open(url, windowName,
            windowFeatures, replaceFlag) (which Selenium intercepts).
          + var=variableName: Some pop-up windows are unnamed (anonymous),
            but are associated with a JavaScript variable name in the
            current application window, e.g. "window.foo =
            window.open(url);". In those cases, you can open the window
            using "var=foo".

          If no window locator prefix is provided, we'll try to guess what
          you mean like this:

          1.) if windowID is null, (or the string "null") then it is
          assumed the user is referring to the original window
          instantiated by the browser).

          2.) if the value of the "windowID" parameter is a JavaScript
          variable name in the current application window, then it is
          assumed that this variable contains the return value from a call
          to the JavaScript window.open() method.

          3.) Otherwise, selenium looks in a hash it maintains that maps
          string names to window "names".

          4.) If that fails, we'll try looping over all of the known
          windows to try to find the appropriate "title". Since "title" is
          not necessarily unique, this may have unexpected behavior.

          If you're having trouble figuring out the name of a window that
          you want to manipulate, look at the Selenium log messages which
          identify the names of windows created via window.open (and
          therefore intercepted by Selenium). You will see messages like
          the following for each window as it is opened:

          debug: window.open call intercepted; window ID (which you can
          use with selectWindow()) is "myNewWindow"

          In some cases, Selenium will be unable to intercept a call to
          window.open (if the call occurs during or before the "onLoad"
          event, for example). (This is bug SEL-339.) In those cases, you
          can force Selenium to notice the open window's name by using the
          Selenium openWindow command, using an empty (blank) url, like
          this: openWindow("", "myFunnyWindow").

        Parameters:
                windowID - the JavaScript window ID of the window to
                select
     __________________________________________________________________

  selectPopUp

void selectPopUp(java.lang.String windowID)

          Simplifies the process of selecting a popup window (and does not
          offer functionality beyond what selectWindow() already
          provides).

          + If windowID is either not specified, or specified as "null",
            the first non-top window is selected. The top window is the
            one that would be selected by selectWindow() without providing
            a windowID . This should not be used when more than one popup
            window is in play.
          + Otherwise, the window will be looked up considering windowID
            as the following in order: 1) the "name" of the window, as
            specified to window.open(); 2) a javascript variable which is
            a reference to a window; and 3) the title of the window. This
            is the same ordered lookup performed by selectWindow .

        Parameters:
                windowID - an identifier for the popup window, which can
                take on a number of different meanings
     __________________________________________________________________

  deselectPopUp

void deselectPopUp()

          Selects the main window. Functionally equivalent to using
          selectWindow() and specifying no value for windowID.
     __________________________________________________________________

  selectFrame

void selectFrame(java.lang.String locator)

          Selects a frame within the current window. (You may invoke this
          command multiple times to select nested frames.) To select the
          parent frame, use "relative=parent" as a locator; to select the
          top frame, use "relative=top". You can also select a frame by
          its 0-based index number; select the first frame with "index=0",
          or the third frame with "index=2".

          You may also use a DOM expression to identify the frame you want
          directly, like this: dom=frames["main"].frames["subframe"]

        Parameters:
                locator - an element locator identifying a frame or iframe
     __________________________________________________________________

  getWhetherThisFrameMatchFrameExpression

boolean getWhetherThisFrameMatchFrameExpression(java.lang.String currentFrameStr
ing,
                                                java.lang.String target)

          Determine whether current/locator identify the frame containing
          this running code.

          This is useful in proxy injection mode, where this code runs in
          every browser frame and window, and sometimes the selenium
          server needs to identify the "current" frame. In this case, when
          the test calls selectFrame, this routine is called for each
          frame to figure out which one has been selected. The selected
          frame will return true, while all others will return false.

        Parameters:
                currentFrameString - starting frame
                target - new frame (which might be relative to the current
                one)

        Returns:
                true if the new frame is this code's window
     __________________________________________________________________

  getWhetherThisWindowMatchWindowExpression

boolean getWhetherThisWindowMatchWindowExpression(java.lang.String currentWindow
String,
                                                  java.lang.String target)

          Determine whether currentWindowString plus target identify the
          window containing this running code.

          This is useful in proxy injection mode, where this code runs in
          every browser frame and window, and sometimes the selenium
          server needs to identify the "current" window. In this case,
          when the test calls selectWindow, this routine is called for
          each window to figure out which one has been selected. The
          selected window will return true, while all others will return
          false.

        Parameters:
                currentWindowString - starting window
                target - new window (which might be relative to the
                current one, e.g., "_parent")

        Returns:
                true if the new window is this code's window
     __________________________________________________________________

  waitForPopUp

void waitForPopUp(java.lang.String windowID,
                  java.lang.String timeout)

          Waits for a popup window to appear and load up.

        Parameters:
                windowID - the JavaScript window "name" of the window that
                will appear (not the text of the title bar) If
                unspecified, or specified as "null", this command will
                wait for the first non-top window to appear (don't rely on
                this if you are working with multiple popups
                simultaneously).
                timeout - a timeout in milliseconds, after which the
                action will return with an error. If this value is not
                specified, the default Selenium timeout will be used. See
                the setTimeout() command.
     __________________________________________________________________

  chooseCancelOnNextConfirmation

void chooseCancelOnNextConfirmation()

          By default, Selenium's overridden window.confirm() function will
          return true, as if the user had manually clicked OK; after
          running this command, the next call to confirm() will return
          false, as if the user had clicked Cancel. Selenium will then
          resume using the default behavior for future confirmations,
          automatically returning true (OK) unless/until you explicitly
          call this command for each confirmation.

          Take note - every time a confirmation comes up, you must consume
          it with a corresponding getConfirmation, or else the next
          selenium operation will fail.
     __________________________________________________________________

  chooseOkOnNextConfirmation

void chooseOkOnNextConfirmation()

          Undo the effect of calling chooseCancelOnNextConfirmation. Note
          that Selenium's overridden window.confirm() function will
          normally automatically return true, as if the user had manually
          clicked OK, so you shouldn't need to use this command unless for
          some reason you need to change your mind prior to the next
          confirmation. After any confirmation, Selenium will resume using
          the default behavior for future confirmations, automatically
          returning true (OK) unless/until you explicitly call
          chooseCancelOnNextConfirmation for each confirmation.

          Take note - every time a confirmation comes up, you must consume
          it with a corresponding getConfirmation, or else the next
          selenium operation will fail.
     __________________________________________________________________

  answerOnNextPrompt

void answerOnNextPrompt(java.lang.String answer)

          Instructs Selenium to return the specified answer string in
          response to the next JavaScript prompt [window.prompt()].

        Parameters:
                answer - the answer to give in response to the prompt
                pop-up
     __________________________________________________________________

  goBack

void goBack()

          Simulates the user clicking the "back" button on their browser.
     __________________________________________________________________

  refresh

void refresh()

          Simulates the user clicking the "Refresh" button on their
          browser.
     __________________________________________________________________

  close

void close()

          Simulates the user clicking the "close" button in the titlebar
          of a popup window or tab.
     __________________________________________________________________

  isAlertPresent

boolean isAlertPresent()

          Has an alert occurred?

          This function never throws an exception

        Returns:
                true if there is an alert
     __________________________________________________________________

  isPromptPresent

boolean isPromptPresent()

          Has a prompt occurred?

          This function never throws an exception

        Returns:
                true if there is a pending prompt
     __________________________________________________________________

  isConfirmationPresent

boolean isConfirmationPresent()

          Has confirm() been called?

          This function never throws an exception

        Returns:
                true if there is a pending confirmation
     __________________________________________________________________

  getAlert

java.lang.String getAlert()

          Retrieves the message of a JavaScript alert generated during the
          previous action, or fail if there were no alerts.

          Getting an alert has the same effect as manually clicking OK. If
          an alert is generated but you do not consume it with getAlert,
          the next Selenium action will fail.

          Under Selenium, JavaScript alerts will NOT pop up a visible
          alert dialog.

          Selenium does NOT support JavaScript alerts that are generated
          in a page's onload() event handler. In this case a visible
          dialog WILL be generated and Selenium will hang until someone
          manually clicks OK.

        Returns:
                The message of the most recent JavaScript alert
     __________________________________________________________________

  getConfirmation

java.lang.String getConfirmation()

          Retrieves the message of a JavaScript confirmation dialog
          generated during the previous action.

          By default, the confirm function will return true, having the
          same effect as manually clicking OK. This can be changed by
          prior execution of the chooseCancelOnNextConfirmation command.

          If an confirmation is generated but you do not consume it with
          getConfirmation, the next Selenium action will fail.

          NOTE: under Selenium, JavaScript confirmations will NOT pop up a
          visible dialog.

          NOTE: Selenium does NOT support JavaScript confirmations that
          are generated in a page's onload() event handler. In this case a
          visible dialog WILL be generated and Selenium will hang until
          you manually click OK.

        Returns:
                the message of the most recent JavaScript confirmation
                dialog
     __________________________________________________________________

  getPrompt

java.lang.String getPrompt()

          Retrieves the message of a JavaScript question prompt dialog
          generated during the previous action.

          Successful handling of the prompt requires prior execution of
          the answerOnNextPrompt command. If a prompt is generated but you
          do not get/verify it, the next Selenium action will fail.

          NOTE: under Selenium, JavaScript prompts will NOT pop up a
          visible dialog.

          NOTE: Selenium does NOT support JavaScript prompts that are
          generated in a page's onload() event handler. In this case a
          visible dialog WILL be generated and Selenium will hang until
          someone manually clicks OK.

        Returns:
                the message of the most recent JavaScript question prompt
     __________________________________________________________________

  getLocation

java.lang.String getLocation()

          Gets the absolute URL of the current page.

        Returns:
                the absolute URL of the current page
     __________________________________________________________________

  getTitle

java.lang.String getTitle()

          Gets the title of the current page.

        Returns:
                the title of the current page
     __________________________________________________________________

  getBodyText

java.lang.String getBodyText()

          Gets the entire text of the page.

        Returns:
                the entire text of the page
     __________________________________________________________________

  getValue

java.lang.String getValue(java.lang.String locator)

          Gets the (whitespace-trimmed) value of an input field (or
          anything else with a value parameter). For checkbox/radio
          elements, the value will be "on" or "off" depending on whether
          the element is checked or not.

        Parameters:
                locator - an element locator

        Returns:
                the element value, or "on/off" for checkbox/radio elements
     __________________________________________________________________

  getText

java.lang.String getText(java.lang.String locator)

          Gets the text of an element. This works for any element that
          contains text. This command uses either the textContent
          (Mozilla-like browsers) or the innerText (IE-like browsers) of
          the element, which is the rendered text shown to the user.

        Parameters:
                locator - an element locator

        Returns:
                the text of the element
     __________________________________________________________________

  highlight

void highlight(java.lang.String locator)

          Briefly changes the backgroundColor of the specified element
          yellow. Useful for debugging.

        Parameters:
                locator - an element locator
     __________________________________________________________________

  getEval

java.lang.String getEval(java.lang.String script)

          Gets the result of evaluating the specified JavaScript snippet.
          The snippet may have multiple lines, but only the result of the
          last line will be returned.

          Note that, by default, the snippet will run in the context of
          the "selenium" object itself, so this will refer to the Selenium
          object. Use window to refer to the window of your application,
          e.g. window.document.getElementById('foo')

          If you need to use a locator to refer to a single element in
          your application page, you can use
          this.browserbot.findElement("id=foo") where "id=foo" is your
          locator.

        Parameters:
                script - the JavaScript snippet to run

        Returns:
                the results of evaluating the snippet
     __________________________________________________________________

  isChecked

boolean isChecked(java.lang.String locator)

          Gets whether a toggle-button (checkbox/radio) is checked. Fails
          if the specified element doesn't exist or isn't a toggle-button.

        Parameters:
                locator - an element locator pointing to a checkbox or
                radio button

        Returns:
                true if the checkbox is checked, false otherwise
     __________________________________________________________________

  getTable

java.lang.String getTable(java.lang.String tableCellAddress)

          Gets the text from a cell of a table. The cellAddress syntax
          tableLocator.row.column, where row and column start at 0.

        Parameters:
                tableCellAddress - a cell address, e.g. "foo.1.4"

        Returns:
                the text from the specified cell
     __________________________________________________________________

  getSelectedLabels

java.lang.String[] getSelectedLabels(java.lang.String selectLocator)

          Gets all option labels (visible text) for selected options in
          the specified select or multi-select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                an array of all selected option labels in the specified
                select drop-down
     __________________________________________________________________

  getSelectedLabel

java.lang.String getSelectedLabel(java.lang.String selectLocator)

          Gets option label (visible text) for selected option in the
          specified select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                the selected option label in the specified select
                drop-down
     __________________________________________________________________

  getSelectedValues

java.lang.String[] getSelectedValues(java.lang.String selectLocator)

          Gets all option values (value attributes) for selected options
          in the specified select or multi-select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                an array of all selected option values in the specified
                select drop-down
     __________________________________________________________________

  getSelectedValue

java.lang.String getSelectedValue(java.lang.String selectLocator)

          Gets option value (value attribute) for selected option in the
          specified select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                the selected option value in the specified select
                drop-down
     __________________________________________________________________

  getSelectedIndexes

java.lang.String[] getSelectedIndexes(java.lang.String selectLocator)

          Gets all option indexes (option number, starting at 0) for
          selected options in the specified select or multi-select
          element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                an array of all selected option indexes in the specified
                select drop-down
     __________________________________________________________________

  getSelectedIndex

java.lang.String getSelectedIndex(java.lang.String selectLocator)

          Gets option index (option number, starting at 0) for selected
          option in the specified select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                the selected option index in the specified select
                drop-down
     __________________________________________________________________

  getSelectedIds

java.lang.String[] getSelectedIds(java.lang.String selectLocator)

          Gets all option element IDs for selected options in the
          specified select or multi-select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                an array of all selected option IDs in the specified
                select drop-down
     __________________________________________________________________

  getSelectedId

java.lang.String getSelectedId(java.lang.String selectLocator)

          Gets option element ID for selected option in the specified
          select element.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                the selected option ID in the specified select drop-down
     __________________________________________________________________

  isSomethingSelected

boolean isSomethingSelected(java.lang.String selectLocator)

          Determines whether some option in a drop-down menu is selected.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                true if some option has been selected, false otherwise
     __________________________________________________________________

  getSelectOptions

java.lang.String[] getSelectOptions(java.lang.String selectLocator)

          Gets all option labels in the specified select drop-down.

        Parameters:
                selectLocator - an element locator identifying a drop-down
                menu

        Returns:
                an array of all option labels in the specified select
                drop-down
     __________________________________________________________________

  getAttribute

java.lang.String getAttribute(java.lang.String attributeLocator)

          Gets the value of an element attribute. The value of the
          attribute may differ across browsers (this is the case for the
          "style" attribute, for example).

        Parameters:
                attributeLocator - an element locator followed by an @
                sign and then the name of the attribute, e.g. "foo@bar"

        Returns:
                the value of the specified attribute
     __________________________________________________________________

  isTextPresent

boolean isTextPresent(java.lang.String pattern)

          Verifies that the specified text pattern appears somewhere on
          the rendered page shown to the user.

        Parameters:
                pattern - a pattern to match with the text of the page

        Returns:
                true if the pattern matches the text, false otherwise
     __________________________________________________________________

  isElementPresent

boolean isElementPresent(java.lang.String locator)

          Verifies that the specified element is somewhere on the page.

        Parameters:
                locator - an element locator

        Returns:
                true if the element is present, false otherwise
     __________________________________________________________________

  isVisible

boolean isVisible(java.lang.String locator)

          Determines if the specified element is visible. An element can
          be rendered invisible by setting the CSS "visibility" property
          to "hidden", or the "display" property to "none", either for the
          element itself or one if its ancestors. This method will fail if
          the element is not present.

        Parameters:
                locator - an element locator

        Returns:
                true if the specified element is visible, false otherwise
     __________________________________________________________________

  isEditable

boolean isEditable(java.lang.String locator)

          Determines whether the specified input element is editable, ie
          hasn't been disabled. This method will fail if the specified
          element isn't an input element.

        Parameters:
                locator - an element locator

        Returns:
                true if the input element is editable, false otherwise
     __________________________________________________________________

  getAllButtons

java.lang.String[] getAllButtons()

          Returns the IDs of all buttons on the page.

          If a given button has no ID, it will appear as "" in this array.

        Returns:
                the IDs of all buttons on the page
     __________________________________________________________________

  getAllLinks

java.lang.String[] getAllLinks()

          Returns the IDs of all links on the page.

          If a given link has no ID, it will appear as "" in this array.

        Returns:
                the IDs of all links on the page
     __________________________________________________________________

  getAllFields

java.lang.String[] getAllFields()

          Returns the IDs of all input fields on the page.

          If a given field has no ID, it will appear as "" in this array.

        Returns:
                the IDs of all field on the page
     __________________________________________________________________

  getAttributeFromAllWindows

java.lang.String[] getAttributeFromAllWindows(java.lang.String attributeName)

          Returns every instance of some attribute from all known windows.

        Parameters:
                attributeName - name of an attribute on the windows

        Returns:
                the set of values of this attribute from all known
                windows.
     __________________________________________________________________

  dragdrop

void dragdrop(java.lang.String locator,
              java.lang.String movementsString)

          deprecated - use dragAndDrop instead

        Parameters:
                locator - an element locator
                movementsString - offset in pixels from the current
                location to which the element should be moved, e.g.,
                "+70,-300"
     __________________________________________________________________

  setMouseSpeed

void setMouseSpeed(java.lang.String pixels)

          Configure the number of pixels between "mousemove" events during
          dragAndDrop commands (default=10).

          Setting this value to 0 means that we'll send a "mousemove"
          event to every single pixel in between the start location and
          the end location; that can be very slow, and may cause some
          browsers to force the JavaScript to timeout.

          If the mouse speed is greater than the distance between the two
          dragged objects, we'll just send one "mousemove" at the start
          location and then one final one at the end location.

        Parameters:
                pixels - the number of pixels between "mousemove" events
     __________________________________________________________________

  getMouseSpeed

java.lang.Number getMouseSpeed()

          Returns the number of pixels between "mousemove" events during
          dragAndDrop commands (default=10).

        Returns:
                the number of pixels between "mousemove" events during
                dragAndDrop commands (default=10)
     __________________________________________________________________

  dragAndDrop

void dragAndDrop(java.lang.String locator,
                 java.lang.String movementsString)

          Drags an element a certain distance and then drops it

        Parameters:
                locator - an element locator
                movementsString - offset in pixels from the current
                location to which the element should be moved, e.g.,
                "+70,-300"
     __________________________________________________________________

  dragAndDropToObject

void dragAndDropToObject(java.lang.String locatorOfObjectToBeDragged,
                         java.lang.String locatorOfDragDestinationObject)

          Drags an element and drops it on another element

        Parameters:
                locatorOfObjectToBeDragged - an element to be dragged
                locatorOfDragDestinationObject - an element whose location
                (i.e., whose center-most pixel) will be the point where
                locatorOfObjectToBeDragged is dropped
     __________________________________________________________________

  windowFocus

void windowFocus()

          Gives focus to the currently selected window
     __________________________________________________________________

  windowMaximize

void windowMaximize()

          Resize currently selected window to take up the entire screen
     __________________________________________________________________

  getAllWindowIds

java.lang.String[] getAllWindowIds()

          Returns the IDs of all windows that the browser knows about.

        Returns:
                the IDs of all windows that the browser knows about.
     __________________________________________________________________

  getAllWindowNames

java.lang.String[] getAllWindowNames()

          Returns the names of all windows that the browser knows about.

        Returns:
                the names of all windows that the browser knows about.
     __________________________________________________________________

  getAllWindowTitles

java.lang.String[] getAllWindowTitles()

          Returns the titles of all windows that the browser knows about.

        Returns:
                the titles of all windows that the browser knows about.
     __________________________________________________________________

  getHtmlSource

java.lang.String getHtmlSource()

          Returns the entire HTML source between the opening and closing
          "html" tags.

        Returns:
                the entire HTML source
     __________________________________________________________________

  setCursorPosition

void setCursorPosition(java.lang.String locator,
                       java.lang.String position)

          Moves the text cursor to the specified position in the given
          input element or textarea. This method will fail if the
          specified element isn't an input element or textarea.

        Parameters:
                locator - an element locator pointing to an input element
                or textarea
                position - the numerical position of the cursor in the
                field; position should be 0 to move the position to the
                beginning of the field. You can also set the cursor to -1
                to move it to the end of the field.
     __________________________________________________________________

  getElementIndex

java.lang.Number getElementIndex(java.lang.String locator)

          Get the relative index of an element to its parent (starting
          from 0). The comment node and empty text node will be ignored.

        Parameters:
                locator - an element locator pointing to an element

        Returns:
                of relative index of the element to its parent (starting
                from 0)
     __________________________________________________________________

  isOrdered

boolean isOrdered(java.lang.String locator1,
                  java.lang.String locator2)

          Check if these two elements have same parent and are ordered
          siblings in the DOM. Two same elements will not be considered
          ordered.

        Parameters:
                locator1 - an element locator pointing to the first
                element
                locator2 - an element locator pointing to the second
                element

        Returns:
                true if element1 is the previous sibling of element2,
                false otherwise
     __________________________________________________________________

  getElementPositionLeft

java.lang.Number getElementPositionLeft(java.lang.String locator)

          Retrieves the horizontal position of an element

        Parameters:
                locator - an element locator pointing to an element OR an
                element itself

        Returns:
                of pixels from the edge of the frame.
     __________________________________________________________________

  getElementPositionTop

java.lang.Number getElementPositionTop(java.lang.String locator)

          Retrieves the vertical position of an element

        Parameters:
                locator - an element locator pointing to an element OR an
                element itself

        Returns:
                of pixels from the edge of the frame.
     __________________________________________________________________

  getElementWidth

java.lang.Number getElementWidth(java.lang.String locator)

          Retrieves the width of an element

        Parameters:
                locator - an element locator pointing to an element

        Returns:
                width of an element in pixels
     __________________________________________________________________

  getElementHeight

java.lang.Number getElementHeight(java.lang.String locator)

          Retrieves the height of an element

        Parameters:
                locator - an element locator pointing to an element

        Returns:
                height of an element in pixels
     __________________________________________________________________

  getCursorPosition

java.lang.Number getCursorPosition(java.lang.String locator)

          Retrieves the text cursor position in the given input element or
          textarea; beware, this may not work perfectly on all browsers.

          Specifically, if the cursor/selection has been cleared by
          JavaScript, this command will tend to return the position of the
          last location of the cursor, even though the cursor is now gone
          from the page. This is filed as SEL-243.

          This method will fail if the specified element isn't an input
          element or textarea, or there is no cursor in the element.

        Parameters:
                locator - an element locator pointing to an input element
                or textarea

        Returns:
                the numerical position of the cursor in the field
     __________________________________________________________________

  getExpression

java.lang.String getExpression(java.lang.String expression)

          Returns the specified expression.

          This is useful because of JavaScript preprocessing. It is used
          to generate commands like assertExpression and
          waitForExpression.

        Parameters:
                expression - the value to return

        Returns:
                the value passed in
     __________________________________________________________________

  getXpathCount

java.lang.Number getXpathCount(java.lang.String xpath)

          Returns the number of nodes that match the specified xpath, eg.
          "//table" would give the number of tables.

        Parameters:
                xpath - the xpath expression to evaluate. do NOT wrap this
                expression in a 'count()' function; we will do that for
                you.

        Returns:
                the number of nodes that match the specified xpath
     __________________________________________________________________

  assignId

void assignId(java.lang.String locator,
              java.lang.String identifier)

          Temporarily sets the "id" attribute of the specified element, so
          you can locate it in the future using its ID rather than a
          slow/complicated XPath. This ID will disappear once the page is
          reloaded.

        Parameters:
                locator - an element locator pointing to an element
                identifier - a string to be used as the ID of the
                specified element
     __________________________________________________________________

  allowNativeXpath

void allowNativeXpath(java.lang.String allow)

          Specifies whether Selenium should use the native in-browser
          implementation of XPath (if any native version is available); if
          you pass "false" to this function, we will always use our
          pure-JavaScript xpath library. Using the pure-JS xpath library
          can improve the consistency of xpath element locators between
          different browser vendors, but the pure-JS version is much
          slower than the native implementations.

        Parameters:
                allow - boolean, true means we'll prefer to use native
                XPath; false means we'll only use JS XPath
     __________________________________________________________________

  ignoreAttributesWithoutValue

void ignoreAttributesWithoutValue(java.lang.String ignore)

          Specifies whether Selenium will ignore xpath attributes that
          have no value, i.e. are the empty string, when using the
          non-native xpath evaluation engine. You'd want to do this for
          performance reasons in IE. However, this could break certain
          xpaths, for example an xpath that looks for an attribute whose
          value is NOT the empty string. The hope is that such xpaths are
          relatively rare, but the user should have the option of using
          them. Note that this only influences xpath evaluation when using
          the ajaxslt engine (i.e. not "javascript-xpath").

        Parameters:
                ignore - boolean, true means we'll ignore attributes
                without value at the expense of xpath "correctness"; false
                means we'll sacrifice speed for correctness.
     __________________________________________________________________

  waitForCondition

void waitForCondition(java.lang.String script,
                      java.lang.String timeout)

          Runs the specified JavaScript snippet repeatedly until it
          evaluates to "true". The snippet may have multiple lines, but
          only the result of the last line will be considered.

          Note that, by default, the snippet will be run in the runner's
          test window, not in the window of your application. To get the
          window of your application, you can use the JavaScript snippet
          selenium.browserbot.getCurrentWindow(), and then run your
          JavaScript in there

        Parameters:
                script - the JavaScript snippet to run
                timeout - a timeout in milliseconds, after which this
                command will return with an error
     __________________________________________________________________

  setTimeout

void setTimeout(java.lang.String timeout)

          Specifies the amount of time that Selenium will wait for actions
          to complete.

          Actions that require waiting include "open" and the "waitFor*"
          actions.

          The default timeout is 30 seconds.

        Parameters:
                timeout - a timeout in milliseconds, after which the
                action will return with an error
     __________________________________________________________________

  waitForPageToLoad

void waitForPageToLoad(java.lang.String timeout)

          Waits for a new page to load.

          You can use this command instead of the "AndWait" suffixes,
          "clickAndWait", "selectAndWait", "typeAndWait" etc. (which are
          only available in the JS API).

          Selenium constantly keeps track of new pages loading, and sets a
          "newPageLoaded" flag when it first notices a page load. Running
          any other Selenium command after turns the flag to false. Hence,
          if you want to wait for a page to load, you must wait
          immediately after a Selenium command that caused a page-load.

        Parameters:
                timeout - a timeout in milliseconds, after which this
                command will return with an error
     __________________________________________________________________

  waitForFrameToLoad

void waitForFrameToLoad(java.lang.String frameAddress,
                        java.lang.String timeout)

          Waits for a new frame to load.

          Selenium constantly keeps track of new pages and frames loading,
          and sets a "newPageLoaded" flag when it first notices a page
          load.

          See waitForPageToLoad for more information.

        Parameters:
                frameAddress - FrameAddress from the server side
                timeout - a timeout in milliseconds, after which this
                command will return with an error
     __________________________________________________________________

  getCookie

java.lang.String getCookie()

          Return all cookies of the current page under test.

        Returns:
                all cookies of the current page under test
     __________________________________________________________________

  getCookieByName

java.lang.String getCookieByName(java.lang.String name)

          Returns the value of the cookie with the specified name, or
          throws an error if the cookie is not present.

        Parameters:
                name - the name of the cookie

        Returns:
                the value of the cookie
     __________________________________________________________________

  isCookiePresent

boolean isCookiePresent(java.lang.String name)

          Returns true if a cookie with the specified name is present, or
          false otherwise.

        Parameters:
                name - the name of the cookie

        Returns:
                true if a cookie with the specified name is present, or
                false otherwise.
     __________________________________________________________________

  createCookie

void createCookie(java.lang.String nameValuePair,
                  java.lang.String optionsString)

          Create a new cookie whose path and domain are same with those of
          current page under test, unless you specified a path for this
          cookie explicitly.

        Parameters:
                nameValuePair - name and value of the cookie in a format
                "name=value"
                optionsString - options for the cookie. Currently
                supported options include 'path', 'max_age' and 'domain'.
                the optionsString's format is "path=/path/, max_age=60,
                domain=.foo.com". The order of options are irrelevant, the
                unit of the value of 'max_age' is second. Note that
                specifying a domain that isn't a subset of the current
                domain will usually fail.
     __________________________________________________________________

  deleteCookie

void deleteCookie(java.lang.String name,
                  java.lang.String optionsString)

          Delete a named cookie with specified path and domain. Be
          careful; to delete a cookie, you need to delete it using the
          exact same path and domain that were used to create the cookie.
          If the path is wrong, or the domain is wrong, the cookie simply
          won't be deleted. Also note that specifying a domain that isn't
          a subset of the current domain will usually fail. Since there's
          no way to discover at runtime the original path and domain of a
          given cookie, we've added an option called 'recurse' to try all
          sub-domains of the current domain with all paths that are a
          subset of the current path. Beware; this option can be slow. In
          big-O notation, it operates in O(n*m) time, where n is the
          number of dots in the domain name and m is the number of slashes
          in the path.

        Parameters:
                name - the name of the cookie to be deleted
                optionsString - options for the cookie. Currently
                supported options include 'path', 'domain' and 'recurse.'
                The optionsString's format is "path=/path/,
                domain=.foo.com, recurse=true". The order of options are
                irrelevant. Note that specifying a domain that isn't a
                subset of the current domain will usually fail.
     __________________________________________________________________

  deleteAllVisibleCookies

void deleteAllVisibleCookies()

          Calls deleteCookie with recurse=true on all cookies visible to
          the current page. As noted on the documentation for
          deleteCookie, recurse=true can be much slower than simply
          deleting the cookies using a known domain/path.
     __________________________________________________________________

  setBrowserLogLevel

void setBrowserLogLevel(java.lang.String logLevel)

          Sets the threshold for browser-side logging messages; log
          messages beneath this threshold will be discarded. Valid
          logLevel strings are: "debug", "info", "warn", "error" or "off".
          To see the browser logs, you need to either show the log window
          in GUI mode, or enable browser-side logging in Selenium RC.

        Parameters:
                logLevel - one of the following: "debug", "info", "warn",
                "error" or "off"
     __________________________________________________________________

  runScript

void runScript(java.lang.String script)

          Creates a new "script" tag in the body of the current test
          window, and adds the specified text into the body of the
          command. Scripts run in this way can often be debugged more
          easily than scripts executed using Selenium's "getEval" command.
          Beware that JS exceptions thrown in these script tags aren't
          managed by Selenium, so you should probably wrap your script in
          try/catch blocks if there is any chance that the script will
          throw an exception.

        Parameters:
                script - the JavaScript snippet to run
     __________________________________________________________________

  addLocationStrategy

void addLocationStrategy(java.lang.String strategyName,
                         java.lang.String functionDefinition)

          Defines a new function for Selenium to locate elements on the
          page. For example, if you define the strategy "foo", and someone
          runs click("foo=blah"), we'll run your function, passing you the
          string "blah", and click on the element that your function
          returns, or throw an "Element not found" error if your function
          returns null. We'll pass three arguments to your function:

          + locator: the string the user passed in
          + inWindow: the currently selected window
          + inDocument: the currently selected document

          The function must return null if the element can't be found.

        Parameters:
                strategyName - the name of the strategy to define; this
                should use only letters [a-zA-Z] with no spaces or other
                punctuation.
                functionDefinition - a string defining the body of a
                function in JavaScript. For example: return
                inDocument.getElementById(locator);
     __________________________________________________________________

  captureEntirePageScreenshot

void captureEntirePageScreenshot(java.lang.String filename,
                                 java.lang.String kwargs)

          Saves the entire contents of the current window canvas to a PNG
          file. Contrast this with the captureScreenshot command, which
          captures the contents of the OS viewport (i.e. whatever is
          currently being displayed on the monitor), and is implemented in
          the RC only. Currently this only works in Firefox when running
          in chrome mode, and in IE non-HTA using the EXPERIMENTAL
          "Snapsie" utility. The Firefox implementation is mostly borrowed
          from the Screengrab! Firefox extension. Please see
          http://www.screengrab.org and http://snapsie.sourceforge.net/
          for details.

        Parameters:
                filename - the path to the file to persist the screenshot
                as. No filename extension will be appended by default.
                Directories will not be created if they do not exist, and
                an exception will be thrown, possibly by native code.
                kwargs - a kwargs string that modifies the way the
                screenshot is captured. Example: "background=#CCFFDD" .
                Currently valid options:

              background
                      the background CSS for the HTML document. This may
                      be useful to set for capturing screenshots of
                      less-than-ideal layouts, for example where absolute
                      positioning causes the calculation of the canvas
                      dimension to fail and a black background is exposed
                      (possibly obscuring black text).
     __________________________________________________________________

  rollup

void rollup(java.lang.String rollupName,
            java.lang.String kwargs)

          Executes a command rollup, which is a series of commands with a
          unique name, and optionally arguments that control the
          generation of the set of commands. If any one of the rolled-up
          commands fails, the rollup is considered to have failed. Rollups
          may also contain nested rollups.

        Parameters:
                rollupName - the name of the rollup command
                kwargs - keyword arguments string that influences how the
                rollup expands into commands
     __________________________________________________________________

  addScript

void addScript(java.lang.String scriptContent,
               java.lang.String scriptTagId)

          Loads script content into a new script tag in the Selenium
          document. This differs from the runScript command in that
          runScript adds the script tag to the document of the AUT, not
          the Selenium document. The following entities in the script
          content are replaced by the characters they represent: < > & The
          corresponding remove command is removeScript.

        Parameters:
                scriptContent - the Javascript content of the script to
                add
                scriptTagId - (optional) the id of the new script tag. If
                specified, and an element with this id already exists,
                this operation will fail.
     __________________________________________________________________

  removeScript

void removeScript(java.lang.String scriptTagId)

          Removes a script tag from the Selenium document identified by
          the given id. Does nothing if the referenced tag doesn't exist.

        Parameters:
                scriptTagId - the id of the script element to remove.
     __________________________________________________________________

  useXpathLibrary

void useXpathLibrary(java.lang.String libraryName)

          Allows choice of one of the available libraries.

        Parameters:
                libraryName - name of the desired library Only the
                following three can be chosen:

               o "ajaxslt" - Google's library
               o "javascript-xpath" - Cybozu Labs' faster library
               o "default" - The default library. Currently the default
                 library is "ajaxslt" .

                If libraryName isn't one of these three, then no change
                will be made.
     __________________________________________________________________

  setContext

void setContext(java.lang.String context)

          Writes a message to the status bar and adds a note to the
          browser-side log.

        Parameters:
                context - the message to be sent to the browser
     __________________________________________________________________

  attachFile

void attachFile(java.lang.String fieldLocator,
                java.lang.String fileLocator)

          Sets a file input (upload) field to the file listed in
          fileLocator

        Parameters:
                fieldLocator - an element locator
                fileLocator - a URL pointing to the specified file. Before
                the file can be set in the input field (fieldLocator),
                Selenium RC may need to transfer the file to the local
                machine before attaching the file in a web page form. This
                is common in selenium grid configurations where the RC
                server driving the browser is not the same machine that
                started the test. Supported Browsers: Firefox ("*chrome")
                only.
     __________________________________________________________________

  captureScreenshot

void captureScreenshot(java.lang.String filename)

          Captures a PNG screenshot to the specified file.

        Parameters:
                filename - the absolute path to the file to be written,
                e.g. "c:\blah\screenshot.png"
     __________________________________________________________________

  captureScreenshotToString

java.lang.String captureScreenshotToString()

          Capture a PNG screenshot. It then returns the file as a base 64
          encoded string.

        Returns:
                The base 64 encoded string of the screen shot (PNG file)
     __________________________________________________________________

  captureNetworkTraffic

java.lang.String captureNetworkTraffic(java.lang.String type)

          Returns the network traffic seen by the browser, including
          headers, AJAX requests, status codes, and timings. When this
          function is called, the traffic log is cleared, so the returned
          content is only the traffic seen since the last call.

        Parameters:
                type - The type of data to return the network traffic as.
                Valid values are: json, xml, or plain.

        Returns:
                A string representation in the defined type of the network
                traffic seen by the browser.
     __________________________________________________________________

  addCustomRequestHeader

void addCustomRequestHeader(java.lang.String key,
                            java.lang.String value)

          Tells the Selenium server to add the specificed key and value as
          a custom outgoing request header. This only works if the browser
          is configured to use the built in Selenium proxy.

        Parameters:
                key - the header name.
                value - the header value.
     __________________________________________________________________

  captureEntirePageScreenshotToString

java.lang.String captureEntirePageScreenshotToString(java.lang.String kwargs)

          Downloads a screenshot of the browser current window canvas to a
          based 64 encoded PNG file. The entire windows canvas is
          captured, including parts rendered outside of the current view
          port. Currently this only works in Mozilla and when running in
          chrome mode.

        Parameters:
                kwargs - A kwargs string that modifies the way the
                screenshot is captured. Example: "background=#CCFFDD".
                This may be useful to set for capturing screenshots of
                less-than-ideal layouts, for example where absolute
                positioning causes the calculation of the canvas dimension
                to fail and a black background is exposed (possibly
                obscuring black text).

        Returns:
                The base 64 encoded string of the page screenshot (PNG
                file)
     __________________________________________________________________

  shutDownSeleniumServer

void shutDownSeleniumServer()

          Kills the running Selenium Server and all browser sessions.
          After you run this command, you will no longer be able to send
          commands to the server; you can't remotely start the server once
          it has been stopped. Normally you should prefer to run the
          "stop" command, which terminates the current browser session,
          rather than shutting down the entire server.
     __________________________________________________________________

  retrieveLastRemoteControlLogs

java.lang.String retrieveLastRemoteControlLogs()

          Retrieve the last messages logged on a specific remote control.
          Useful for error reports, especially when running multiple
          remote controls in a distributed environment. The maximum number
          of log messages that can be retrieve is configured on remote
          control startup.

        Returns:
                The last N log messages as a multi-line string.
     __________________________________________________________________

  keyDownNative

void keyDownNative(java.lang.String keycode)

          Simulates a user pressing a key (without releasing it yet) by
          sending a native operating system keystroke. This function uses
          the java.awt.Robot class to send a keystroke; this more
          accurately simulates typing a key on the keyboard. It does not
          honor settings from the shiftKeyDown, controlKeyDown, altKeyDown
          and metaKeyDown commands, and does not target any particular
          HTML element. To send a keystroke to a particular element, focus
          on the element first before running this command.

        Parameters:
                keycode - an integer keycode number corresponding to a
                java.awt.event.KeyEvent; note that Java keycodes are NOT
                the same thing as JavaScript keycodes!
     __________________________________________________________________

  keyUpNative

void keyUpNative(java.lang.String keycode)

          Simulates a user releasing a key by sending a native operating
          system keystroke. This function uses the java.awt.Robot class to
          send a keystroke; this more accurately simulates typing a key on
          the keyboard. It does not honor settings from the shiftKeyDown,
          controlKeyDown, altKeyDown and metaKeyDown commands, and does
          not target any particular HTML element. To send a keystroke to a
          particular element, focus on the element first before running
          this command.

        Parameters:
                keycode - an integer keycode number corresponding to a
                java.awt.event.KeyEvent; note that Java keycodes are NOT
                the same thing as JavaScript keycodes!
     __________________________________________________________________

  keyPressNative

void keyPressNative(java.lang.String keycode)

          Simulates a user pressing and releasing a key by sending a
          native operating system keystroke. This function uses the
          java.awt.Robot class to send a keystroke; this more accurately
          simulates typing a key on the keyboard. It does not honor
          settings from the shiftKeyDown, controlKeyDown, altKeyDown and
          metaKeyDown commands, and does not target any particular HTML
          element. To send a keystroke to a particular element, focus on
          the element first before running this command.

        Parameters:
                keycode - an integer keycode number corresponding to a
                java.awt.event.KeyEvent; note that Java keycodes are NOT
                the same thing as JavaScript keycodes!
     __________________________________________________________________


   Overview  Package   Class  Use  Tree  Deprecated  Index  Help
    PREV CLASS   NEXT CLASS FRAMES    NO FRAMES     All Classes
   SUMMARY: NESTED | FIELD | CONSTR | METHOD
   DETAIL: FIELD | CONSTR | METHOD
     __________________________________________________________________

   Copyright © 2009. All Rights Reserved.
   Visible links
file://localhost/../../overview-summary.html
file://localhost/tmp/package-summary.html
file://localhost/tmp/class-use/Selenium.html
file://localhost/tmp/package-tree.html
file://localhost/../../deprecated-list.html
file://localhost/../../index-all.html
file://localhost/../../help-doc.html
file://localhost/../../com/thoughtworks/selenium/SeleneseTestCase.html
file://localhost/../../com/thoughtworks/selenium/SeleniumCommandTimedOutException.html
file://localhost/../../index.html?com/thoughtworks/selenium/Selenium.html
file://localhost/tmp/Selenium.html
file://localhost/../../allclasses-noframe.html
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#method_summary
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#method_detail
file://localhost/../../com/thoughtworks/selenium/DefaultSelenium.html
http://www.w3.org/TR/REC-CSS2/selector.html
http://www.w3.org/TR/2001/CR-css3-selectors-20011113/
http://svn.openqa.org/fisheye/browse/~raw,r=trunk/selenium/trunk/src/main/resources/core/scripts/ui-doc.html
file://localhost/../../com/thoughtworks/selenium/Selenium.html#addCustomRequestHeader(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#addLocationStrategy(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#addScript(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#addSelection(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#allowNativeXpath(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#altKeyDown()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#altKeyUp()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#answerOnNextPrompt(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#assignId(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#attachFile(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#captureEntirePageScreenshot(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#captureEntirePageScreenshotToString(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#captureNetworkTraffic(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#captureScreenshot(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#captureScreenshotToString()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#check(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#chooseCancelOnNextConfirmation()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#chooseOkOnNextConfirmation()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#click(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#clickAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#close()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#contextMenu(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#contextMenuAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#controlKeyDown()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#controlKeyUp()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#createCookie(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#deleteAllVisibleCookies()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#deleteCookie(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#deselectPopUp()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#doubleClick(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#doubleClickAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#dragAndDrop(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#dragAndDropToObject(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#dragdrop(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#fireEvent(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#focus(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAlert()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAllButtons()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAllFields()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAllLinks()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAllWindowIds()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAllWindowNames()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAllWindowTitles()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAttribute(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getAttributeFromAllWindows(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getBodyText()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getConfirmation()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getCookie()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getCookieByName(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getCursorPosition(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getElementHeight(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getElementIndex(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getElementPositionLeft(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getElementPositionTop(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getElementWidth(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getEval(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getExpression(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getHtmlSource()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getLocation()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getMouseSpeed()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getPrompt()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedId(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedIds(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedIndex(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedIndexes(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedLabel(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedLabels(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedValue(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectedValues(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSelectOptions(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getSpeed()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getTable(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getText(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getTitle()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getValue(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getWhetherThisFrameMatchFrameExpression(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getWhetherThisWindowMatchWindowExpression(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#getXpathCount(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#goBack()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#highlight(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#ignoreAttributesWithoutValue(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isAlertPresent()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isChecked(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isConfirmationPresent()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isCookiePresent(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isEditable(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isElementPresent(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isOrdered(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isPromptPresent()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isSomethingSelected(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isTextPresent(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#isVisible(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#keyDown(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#keyDownNative(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#keyPress(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#keyPressNative(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#keyUp(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#keyUpNative(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#metaKeyDown()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#metaKeyUp()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseDown(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseDownAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseDownRight(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseDownRightAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseMove(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseMoveAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseOut(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseOver(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseUp(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseUpAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseUpRight(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#mouseUpRightAt(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#open(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#openWindow(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#refresh()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#removeAllSelections(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#removeScript(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#removeSelection(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#retrieveLastRemoteControlLogs()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#rollup(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#runScript(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#select(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#selectFrame(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#selectPopUp(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#selectWindow(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setBrowserLogLevel(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setContext(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setCursorPosition(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setExtensionJs(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setMouseSpeed(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setSpeed(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#setTimeout(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#shiftKeyDown()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#shiftKeyUp()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#showContextualBanner()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#showContextualBanner(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#shutDownSeleniumServer()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#start()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#start(java.lang.Object)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#start(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#stop()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#submit(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#type(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#typeKeys(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#uncheck(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#useXpathLibrary(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#waitForCondition(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#waitForFrameToLoad(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#waitForPageToLoad(java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#waitForPopUp(java.lang.String, java.lang.String)
file://localhost/../../com/thoughtworks/selenium/Selenium.html#windowFocus()
file://localhost/../../com/thoughtworks/selenium/Selenium.html#windowMaximize()
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#patterns
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
http://jira.openqa.org/browse/SEL-243
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#locators
file://localhost/../../overview-summary.html
file://localhost/tmp/package-summary.html
file://localhost/tmp/class-use/Selenium.html
file://localhost/tmp/package-tree.html
file://localhost/../../deprecated-list.html
file://localhost/../../index-all.html
file://localhost/../../help-doc.html
file://localhost/../../com/thoughtworks/selenium/SeleneseTestCase.html
file://localhost/../../com/thoughtworks/selenium/SeleniumCommandTimedOutException.html
file://localhost/../../index.html?com/thoughtworks/selenium/Selenium.html
file://localhost/tmp/Selenium.html
file://localhost/../../allclasses-noframe.html
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#method_summary
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#method_detail

   Hidden links:
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#skip-navbar_top
file://localhost/tmp/com.thoughtworks.selenium.Selenium.html#skip-navbar_bottom
