   #alternate

   My favorites ▼ | Sign in

 Logo
      selenium
      Browser automation framework
                                  ______________________________ Search projects

   Project Home

                  Downloads

                              Wiki

                                     Issues

                                              Source

    Search [ Current pages...] for ______________________________________
                                   Search


Updated Oct 12, 2009 by simon.m.stewart
Labels: WebDriver
     PageObjects
   The Page Object pattern represents the screens of your web app as a
   series of objects

Page Objects¶

   Within your web app's UI there are areas that your tests interact with.
   A Page Object simply models these as objects within the test code. This
   reduces the amount of duplicated code and means that if the UI changes,
   the fix need only be applied in one place.

Implementation Notes¶

   PageObjects can be thought of as facing in two directions
   simultaneously. Facing towards the developer of a test, they represent
   the services offered by a particular page. Facing away from the
   developer, they should be the only thing that has a deep knowledge of
   the structure of the HTML of a page (or part of a page) It's simplest
   to think of the methods on a Page Object as offering the "services"
   that a page offers rather than exposing the details and mechanics of
   the page. As an example, think of the inbox of any web-based email
   system. Amongst the services that it offers are typically the ability
   to compose a new email, to choose to read a single email, and to list
   the subject lines of the emails in the inbox. How these are implemented
   shouldn't matter to the test.

   Because we're encouraging the developer of a test to try and think
   about the services that they're interacting with rather than the
   implementation, PageObjects should seldom expose the underlying
   WebDriver instance. To facilitate this, methods on the PageObject
   should return other PageObjects. This means that we can effectively
   model the user's journey through our application. It also means that
   should the way that pages relate to one another change (like when the
   login page asks the user to change their password the first time they
   log into a service, when it previously didn't do that) simply changing
   the appropriate method's signature will cause the tests to fail to
   compile. Put another way, we can tell which tests would fail without
   needing to run them when we change the relationship between pages and
   reflect this in the PageObjects.

   One consequence of this approach is that it may be necessary to model
   (for example) both a successful and unsuccessful login, or a click
   could have a different result depending on the state of the app. When
   this happens, it is common to have multiple methods on the PageObject:
public class LoginPage {
    public HomePage loginAs(String username, String password) {
        // ... clever magic happens here
    }

    public LoginPage loginAsExpectingError(String username, String password) {
        //  ... failed login here, maybe because one or both of the username and
 password are wrong
    }

    public String getErrorMessage() {
        // So we can verify that the correct error is shown
    }
}

   The code presented above shows an important point: the tests, not the
   PageObjects, should be responsible for making assertions about the
   state of a page. For example:
public void testMessagesAreReadOrUnread() {
    Inbox inbox = new Inbox(driver);
    inbox.assertMessageWithSubjectIsUnread("I like cheese");
    inbox.assertMessageWithSubjectIsNotUnread("I'm not fond of tofu");
}

   could be re-written as:
public void testMessagesAreReadOrUnread() {
    Inbox inbox = new Inbox(driver);
    assertTrue(inbox.isMessageWithSubjectIsUnread("I like cheese"));
    assertFalse(inbox.isMessageWithSubjectIsUnread("I'm not fond of tofu"));
}

   Of course, as with every guideline there are exceptions, and one that
   is commonly seen with PageObjects is to check that the WebDriver is on
   the correct page when we instantiate the PageObject. This is done in
   the example below.

   Finally, a PageObject need not represent an entire page. It may
   represent a section that appears many times within a site or page, such
   as site navigation. The essential principle is that there is only one
   place in your test suite with knowledge of the structure of the HTML of
   a particular (part of a) page.

Summary¶

     * The public methods represent the services that the page offers
     * Try not to expose the internals of the page
     * Generally don't make assertions
     * Methods return other PageObjects
     * Need not represent an entire page
     * Different results for the same action are modelled as different
       methods

Example¶

public class LoginPage {
    private final WebDriver driver;

    public LoginPage(WebDriver driver) {
        this.driver = driver;

        // Check that we're on the right page.
        if (!"Login".equals(driver.getTitle())) {
            // Alternatively, we could navigate to the login page, perhaps loggi
ng out first
            throw new IllegalStateException("This is not the login page");
        }
    }

    // Conceptually, the login page offers the user the service of being able to
 "log into"
    // the application using a user name and password.
    public HomePage loginAs(String username, String password) {
        // This is the only place in the test code that "knows" how to enter the
se details
        driver.findElement(By.id("username")).sendKeys(username);
        driver.findElement(By.id("passwd")).sendKeys(password);
        driver.findElement(By.id("login")).submit();

        // Return a new page object representing the destination. Should the log
in page ever
        // go somewhere else (for example, a legal disclaimer) then changing the
 method signature
        // for this method will mean that all tests that rely on this behaviour
won't compile.
        return new HomePage(driver);
    }
}

Support in WebDriver¶

   There is a PageFactory in the support package that provides support for
   this pattern, and helps to remove some boiler-plate code from your Page
   Objects at the same time.
   Comment by alexeybulat, Jul 13, 2010

   Thanks for a good example. It's realy cool and easy to understand. In
   our company we use this pattern since 2005 and it is really good to
   fill that we are on the right way. In our framework we have 1 abstract
   super class Page containing common for all pages service methods and
   abstract methods for initialization and gathering page elements
   information. It looks like:

   public abstract class Page {

     protected Page() {

     init(); parsePage();

     }

     protected abstract void parsePage();

     protected abstract void init();

     // .... // service methods... // ....

   }

   Then all other pages have to extends this super page and implement
   abstract methods. As exmaple of such implementation you can see the
   following class:

   public class LoginPortalPage? extends Page {

     private String userName; private String password;

     protected LoginPortalPage?() {

     super();

     }

     public void setUserName(String userName) {

     // Code for filling data into the username field this.userName =
     userName;

     }

     public void setPassword(String password) {

     // Code for filling data into the password field this.password =
     password;

     }

     public void pushLogin() {

     // Code for pushing the button

     }

     protected void parsePage() {

     // Parse page and populate required objects with data from page's
     elements

     }

     protected void init() {

     // Initialize page. Verify that it is right page.

     }

   }

   For such operations (from your examples) like login, loginAs,
   loginAsExpectingError we have separated package with keywords but it is
   already "keywords pattern" or something like this :)

   Anyway thank you for your article and simple explanation what is
   PageObject? pattern.

   Alexey Bulat, Software Engineer in Test
   ► Sign in to add a comment

   ©2010 Google - Terms - Privacy - Project Hosting Help

   Powered by Google Project Hosting
http://code.google.com/feeds/p/selenium/svnchanges/basic?path=/wiki/PageObjects.wiki
http://code.google.com/p/selenium/wiki/PageObjects
https://www.google.com/accounts/ServiceLogin?service=code&ltmpl=phosting&continue=http%3A%2F%2Fcode.google.com%2Fp%2Fselenium%2Fwiki%2FPageObjects&followup=http%3A%2F%2Fcode.google.com%2Fp%2Fselenium%2Fwiki%2FPageObjects
http://code.google.com/p/selenium/
http://code.google.com/p/selenium/
http://code.google.com/p/selenium/
http://code.google.com/p/selenium/
http://code.google.com/p/selenium/downloads/list
http://code.google.com/p/selenium/w/list
http://code.google.com/p/selenium/issues/list
http://code.google.com/p/selenium/source/checkout
http://code.google.com/u/simon.m.stewart/
http://code.google.com/p/selenium/w/list?q=label:WebDriver
http://code.google.com/p/selenium/wiki/PageObjects#Page_Objects
http://code.google.com/p/selenium/wiki/PageObjects#Implementation_Notes
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects#Summary
http://code.google.com/p/selenium/wiki/PageObjects
http://code.google.com/p/selenium/wiki/PageObjects#Example
http://code.google.com/p/selenium/wiki/PageObjects#Support_in
http://code.google.com/p/selenium/wiki/PageFactory
http://code.google.com/u/alexeybulat/
http://code.google.com/p/selenium/w/edit/LoginPortalPage
http://code.google.com/p/selenium/w/edit/LoginPortalPage
http://code.google.com/p/selenium/w/edit/PageObject
https://www.google.com/accounts/ServiceLogin?service=code&ltmpl=phosting&continue=http%3A%2F%2Fcode.google.com%2Fp%2Fselenium%2Fwiki%2FPageObjects&followup=http%3A%2F%2Fcode.google.com%2Fp%2Fselenium%2Fwiki%2FPageObjects
http://code.google.com/projecthosting/terms.html
http://www.google.com/privacy.html
http://code.google.com/p/support/
http://code.google.com/projecthosting/
