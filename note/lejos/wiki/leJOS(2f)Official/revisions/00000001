= leJOS / Official =
<<TableOfContents>>

== Home ==
http://lejos.sourceforge.net/ @2009/12/20

=== LEJOS News ===

'''September 2, 2009 4:16 PM'''

Just in time for the new semester(半年) we have leJOS NXJ 0.85 ready for download. __This is an intermediary release (as indicated by the .05) that previews some upcoming technology, '''however 0.9 will represent the final push for major changes before we settle down(安下心來做某事) to a stable 1.0 release.'''__ Major bug fixes and improvements include:

 * better support and documentation for MAC OS X, including the Fantom USB driver

 * a Netbeans plugin (不是 leJOS 選邊站, 而是早在 2008-03-18 v0.5 就開始提供 Eclipse Plugin 了)

 * improved JVM speed and many more amazing improvements by Andy

 * support for the new LEGO color sensor in the NXT 2.0 set

 * now supports the `instanceof` keyword (很難想像這些功能到 0.85 才開始被支援...)

 * detection of rechargeable batteries and improved battery indicator

 * nanosecond timers and improved timer support with the `Delay` class.

 * `%` operation on `float`s and `double`s

 * `Class`, including the `isAssignableFrom(Class cls)` method

 * display of LCD screen in `ConsoleViewer`

 * major speed and accuracy improvements to the `Math` class from Sven

 * platform independent `lejos.robotics` packages

 * new navigation proposal (work in progress) that is platform independent, supports more vehicles(表現手法), has better localization(定位; 跟 i10n 無關) support, and new concepts of ''pose controllers'' and ''path finders''

 * __'''preliminary(初步的) support for ''http://www.probabilisticrobotics.com/[probabilistic robotics]'' (智能機器人; 強調機器人自身的感知能力, 用以回應環境的不確定性), including general purpose `KalmanFilter` (卡爾曼濾波器; 參考http://en.wikipedia.org/wiki/Kalman_filter[Wikipedia] 的說明. 好像跟 "統計推論" 有關, 例如用前 10 筆資料去預測第 11 筆的資料...) class using matrix algebra(矩陣代數)'''__

 * reworking of the http://en.wikipedia.org/wiki/Monte_Carlo_localization[Monte Carlo Localization] (蒙地卡羅自我定位法) classes

 * limited `java.awt` and `java.awt.geom` classes

See the http://sourceforge.net/projects/lejos/files/lejos-NXJ-win32/0.8.5beta/RELEASENOTES/download[release notes] for a full list of changes. As usual, feel free to visit our forums and discuss anything and everything.

'''May 23, 2009 09:40 AM'''

Version 0.8 of the leJOS NXJ Eclipse Plugin is also available now. It supports the new version 0.8 of leJOS NXJ on Windows (XP or Vista), MAC OSX and Linux and fixes reported bugs of the previous releases. (最早的 Eclipse Plugin 出現在 2008-03-18 v0.5)

Use Eclipse's Update manager to install it from the remote update site as follows:

 * Name: leJOS NXJ (or whatever you like)
 * URL: http://lejos.sourceforge.net/tools/eclipse/plugin/nxj/

For configuration and usage, consult the leJOS NXJ topic in Eclipse's Help -> Help contents view after installation.

'''May 22, 2009 11:57 AM'''

leJOS NXJ 0.8 has been released in anticipation(預期) of the upcoming Java One. There are plenty of new features, bug fixes and improvements, including: (`lejos_NXJ_0_8_0beta.tar.gz` 大小約 6.1M)

 * __iCommand is dead! Long live iCommand. PC control is now included in `pccomm.jar` and the `lejos.nxt.remote` package (see   pcsamples).__

 * http://en.wikipedia.org/wiki/RS485[RS485] Support in `lejos.nxt.comm`

 * Faster bootup times

 * Fixed upload reliability problem with some NXT bricks (if it didn't work before it probably works now)

 * Support for RFID, RCX Rotation Sensor, and EOPD(光電近接感應器) sensors.

 * __Much larger support for Java 1.6 classes (including `ArrayList`) thanks to Sven Koehler__

 * __'''Support for Generics, Enum classes and foreach loops!'''__

 * A fully working `lejos.subsumption` package

 * `NXJControl` utility for quick control of motors and sensors

 * Wider support in the `lejos.navigation` packages

 * `javax.microedition.location` for Bluetooth GPS

 * Lots of sample code in the `samples` directory

:::

== NXJ technology ==
http://lejos.sourceforge.net/nxj.php @2009/12/20

'''What is leJOS?'''

__leJOS (pronounced like the Spanish word "lejos" for "far") is a ''tiny Java Virtual Machine''. In 2006 it was ported to the http://www.mindstorms.com/[LEGO NXT brick].__

leJOS NXJ includes all the classes in the http://lejos.sourceforge.net/nxt/nxj/api/index.html[NXJ API] as well as the tools used to upload code to the NXT brick.

leJOS NXJ offers the following:

 * Object oriented language (Java)
 * Preemptive(先佔式) threads (tasks)
 * Arrays, including multi-dimensional
 * Recursion(遞回)
 * Synchronization
 * Exceptions
 * Java types including `float`, `long`, and `String`
 * Most of the `java.lang`, `java.util` and `java.io` classes
 * A Well-documented Robotics API


























== README.html ==
file://README.html

=== What is leJOS NXJ? ===

leJOS (sometimes pronounced like the Spanish word "lejos" for "far") is a tiny Java-based operating system that has been ported to the following platforms:

 * LEGO Mindstorms NXT
 * LEGO Mindstorms RCX
 * __Unix (for emulation of leJOS programs only; 內附的 `emu-lejosrun` 工具就是在做這件事)__

leJOS was originally forked out of the TinyVM project. It contains a VM for Java bytecodes and additional software to load and run Java programs.

These are some of the features offered:

 * Object oriented language (Java)
 * Preemptive threads (tasks)
 * Arrays, including multi-dimensional ones
 * Recursion
 * Synchronization
 * Exceptions
 * Java types including `float`, `double`, `long` and `String`
 * `Math` class
 * Well-documented Robotics API

__leJOS NXJ is the version of leJOS for the LEGO Mindstorms NXT. It uses the same Java VM as the RCX version, but has new drivers for the NXT hardware.__

__leJOS NXJ adds lots of new capability to leJOS including a file system, a menu system, and support for http://www.mindsensors.com/index.php?module=pagemaster&PAGE_user_op=view_page&PAGE_id=45&MMN_position=12:12[I2C sensors], including those from third parties. '''The built-in tachometers(轉速計) in the NXT motors have enabled much improved control over speed, steering and navigation.'''__

Bluetooth and USB communications are a great improvement over the infra-red link used by the RCX.

=== Preliminaries ===

 * You need a Java Development Kit (JDK), version 1.5 or later.
 * Your `PATH` must contain the JDK's `bin` directory.
 * Make sure you have set `JAVA_HOME` properly to the root directory of the JDK (necessary if you use ant).
 * On systems other than Microsoft Windows, you will need to build the distribution, so your `PATH` must contain the `ant` binary (ant 1.7 or above).
 * __On Microsoft Windows and MAC OS X you will need the LEGO Mindstorms NXT software installed, as its USB drivers are used.__
 * On MAC OS X systems, you will need the OS X developer tools installed.

`libusb` must be installed on Linux and can be obtained from http://libusb.sourceforge.net.

On Linux systems, if you are running leJOS NXJ from a non-root user, you will need to ensure that you have read and write access the NXT USB device in `/dev/bus/usb`. If you can identify the device in `/dev/bus/usb`, you can do this by:

 {{{
sudo chmod a+w /dev/bus/usb/xxx/yyy
 }}}

However, the `yyy` number will count up each time the NXT is disconnected and reconnected.

A better solution is to use http://en.wikipedia.org/wiki/Udev[udev rules] or `pamcomsole`. How to do this varies with different Linux systems. A `pamconsole` solution that works on Fedora systems, is to create a file `/etc/security/console.perms.d/60-libusb.perms` with the two lines:

 {{{
<usbdevices>=/dev/bus/usb/*/*
<console> 0600 <usbdevices> 0644 root
 }}}

To use udev rules, set up a file such as `/etc/udev/rules.d/70-lego.rules` and populate it with the following lines:

 {{{
# Lego NXT
BUS=="usb", SYSFS{idVendor}=="03eb", GROUP="lego", MODE="0660"
BUS=="usb", SYSFS{idVendor}=="0694", GROUP="lego", MODE="0660"
 }}}

This relies on the username you are using being in the `lego` group. You can modify the file to your requirements. The two vendors are LEGO and http://www.atmel.com/[Atmel] (for the samba driver used in firmware update mode). You may need to restart udev. 

 {{{
$ pwd
/home/somebody/lejos_nxj
$ sudo addgroup lego; sudo addgroup somebody lego
$ sudo gedit /etc/udev/rules.d/70-lego.rules <-- 按上面的方式組態後, 重新開機
 }}}

=== Installation and Set Up ===

 1. Extract the files from the distribution. A `lejos_nxj` subdirectory will be created.
 2. Set the environment variable `NXJ_HOME` to the full path of the `lejos_nxj` directory.
 3. Add the `lejos_nxj/bin` directory to your `PATH`.
 4. On Linux and Unix Systems, set `LD_LIBRARY_PATH` to your `lejos_nxj/bin` directory. On some systems this is best set in `/etc/profile`. On MAC OSX systems, you should set `DYLD_LIBRARY_PATH` instead. (這個動作好像可有可無?)
 5. On Linux and Unix systems, depending on your privilege settings you might need to adjust the execution permissions in the `bin` directory. (解開後 `bin` 子目錄下的執行檔並沒有 execution 的權限, 但 build 完成後就都有了)

__'''On Linux and Unix systems, you will have to build the distribution first. To do so, switch to the `build` folder and run `ant`.''' You will need to ensure that the packages that leJOS NXJ is dependent on are on your system. These include `libusb-dev`, `gcj` and `libbluetooth-dev`. (其中 GCJ 改用 Sun JDK 也可以, 在 Ubuntu 下的套件名稱是 `sun-java6-jdk`)__

下面是在 Ubuntu 8.04 實驗的結果:

 {{{
$ sudo apt-get install gcc libusb-dev libbluetooth-dev
$ cd build
$ ant
Buildfile: build.xml

clean:
     [echo] saving existing files to .bak files

libnxt:

clean:

jlibnxt:
       [cc] 1 total files to be compiled.
       [cc] Starting link

make:

jbluez:

clean:

jbluez:
       [cc] 1 total files to be compiled.
       [cc] /home/somebody/lejos_nxj/src/jbluez/jbluez.c: In function ‘Java_lejos_pc_comm_NXTCommBluez_search’:
       [cc] /home/somebody/lejos_nxj/src/jbluez/jbluez.c:61: warning: ‘name_str’ may be used uninitialized in this function
       [cc] Starting link

make:

copy.binaries:
     [copy] Copying 1 file to /home/somebody/lejos_nxj/bin
     [copy] Copying 1 file to /home/somebody/lejos_nxj/bin

clear:

build:
     [echo] Done.

BUILD SUCCESSFUL
Total time: 1 second

$ cd ..
$ ls bin <-- 發現所有執行檔都有 execution 權限了, 但為何不見 emu-lejosrun 的蹤影[?]
emu-lejosrun       libjlibnxt.so  nxjc           nxjflash    nxjsocketproxy
lejos_nxt_rom.bin  nxj            nxjconsole     nxjlink     nxjupload
libjbluez.so       nxjbrowse      nxjdataviewer  nxjmonitor  StartUpText.bin
 }}}

=== Using leJOS NXJ ===

 * Flash the leJOS NXJ firmware using `nxjflash`.
 * Compile using `nxjc` instead of `javac`.
 * Link, upload and run programs using `nxj`.
 * Exceptions: Use `nxj --verbose` to get information on methods and special classes used by your program. Exceptions are shown on the NXT as `Method:XXXX, CLASS:YY`, where `XXXX = method_signature` and `YY = exception_class_index`

Your NXT must be plugged into the USB, switched on (並進入 firmware update mode) to run `nxjflash`. Note that the standard LEGO firmware will be overwritten and all existing data lost. You can reinstall the LEGO firmware using the LEGO Mindstorms software.

If you have an old version of leJOS on your NXT, or another third-party operating system, you may need to be in firmware update mode. To put the next in firmware upload, press the reset button with a paper clip for 4 seconds or more. The NXT brick will start to tick.

To run nxjflash, open a command window, and type nxjflash

nxjflash will write the Java VM and the leJOS NXJ start-up menu to the flash memory of your NXT. It will create an empty user flash area. When the flash procedure has finished, leJOS NXJ will start up and an empty menu will be displayed.

You can switch the NXT off at any time, including when a program is running, by pressing the orange and dark gray buttons (ENTER + ESCAPE) together. To switch it back on just press the orange button. The leJOS NXJ start-up menu will be displayed.
If your NXT freezes at any time, remove and re-insert a battery. 

 {{{
Building firmware image.
VM file: /home/sardine/dev/lejos_nxj/bin/lejos_nxt_rom.bin
Menu file: /home/sardine/dev/lejos_nxj/bin/StartUpText.bin
VM size: 52352 bytes.
Menu size: 34651 bytes.
Total image size 87131/90112 bytes.
Locating device in firmware update mode.
Found NXT: %%NXT-SAMBA%% 1
Connected to SAM-BA v1.4 
Opened device in firmware update mode.
Unlocking pages.
Writing firmware image.
Restarting the device.
 }}}

:::


