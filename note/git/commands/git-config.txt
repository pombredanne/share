= link:commands.html[Git / Commands] / `git config` =
:title: [Git] git config

`git config` 可以用來讀取或設定 configuration variables。

 git config [<file-option>] [<type>] <name> <value>
 git config [<file-option>] [<type>] --get <name>
 git config [<file-option>] --unset <name>
 git config [<file-option>] --unset-all <name>
 git config [<file-option>] -e | --edit

常見的用法有：

 * `git config --list [ --local | --global | --system ]`
+
--
`--list` 預設會 "依序" 列出 system (`/etc/gitconfig`)、global (`~/.gitconfig`) 跟 repository global (`.git/config`) 不同組態檔的設定值。加上 `--local`、`--global` 或 `--system` 則只會列出特定組態檔的設定。
--
+
 * `git config --local user.name <your_name>` 跟 `git config --local user.email <your_email>`
+
--
設定在這個 repository 裡做 commit 時所採用的身份。

TIP: 手邊可能要同時處理來自不同組織的 repository，建議不要將 commit 的身份設在 global 層級，否則很容易用錯身份。
--
+
 * `git config user.name` 跟 `git config user.email`
+
--
在 working directory 裡執行，可以確認在特定 repository 做 commit 時的身份。
--

== 參考資料 ==

 * http://git-scm.com/docs/git-config[git-config(1)]

////////////////////////////////////////////////////////////////////////////////
** `git-config` - Get and set repository or global options
** You can query/set/replace/unset options with this command. The name is actually the section and the key separated by a dot, and the value will be escaped??.
** The type specifier can be either `--int` or `--bool`, to make git config ensure that the variable(s) are of the given type and convert the value to the "canonical form" (simple decimal number for int, a "true" or "false" string for bool), or `--path`, which does some path expansion (see `--path` below). If no type specifier is passed, no checks or transformations are performed on the value.
** When reading, the values are read from the system, global and repository local configuration files by default, and options `--system`, `--global`, `--local` and `--file <filename>` can be used to tell the command to read from only that location (see [FILES]). When writing, the new value is written to the repository local configuration file by default, and options `--system`, `--global`, `--file <filename>` can be used to tell the command to write to that location (you can say `--local` but that is the default).
** --global For writing options: write to global ~/.gitconfig file rather than the repository .git/config
** For reading options: read only from global ~/.gitconfig and from $XDG_CONFIG_HOME/git/config rather than from all available files.
** --system For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config. For reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files.
** --local For writing options: write to the repository .git/config file. This is the default behavior. For reading options: read only from the repository .git/config rather than from all available files.
** --unset Remove the line matching the key from config file.
** -l --list List all variables set in config file.
** --bool git config will ensure that the output is "true" or "false"
** --int git config will ensure that the output is a simple decimal number.
** --path git-config will expand leading ~ to the value of $HOME, and ~user to the home directory for the specified user. This option has no effect when setting the value (but you can use git config bla ~/ from the command line to let your shell do the expansion).
** -e --edit Opens an editor to modify the specified config file; either --system, --global, or repository (default).
** The files are read in the order given above, with last value found taking precedence over values read earlier.
** When multiple values are taken then all values of a key from all files will be used.
** All writing options will per default write to the repository specific configuration file.
** You can override these rules either by command line options or by environment variables. The --global and the --system options will limit the file used to the global or system-wide file respectively.
** The Git configuration file contains a number of variables that affect the Git commands' behavior. The .git/config file in each repository is used to store the configuration for that repository, and $HOME/.gitconfig is used to store a per-user configuration as fallback values for the .git/config file. The file /etc/gitconfig can be used to store a system-wide default configuration.
** The variables are divided into sections, wherein the fully qualified variable name of the variable itself is the last dot-separated segment and the section name is everything before the last dot. The variable names are case-insensitive, allow only alphanumeric characters and -, and must start with an alphabetic character. Some variables may appear multiple times.
** The file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are not case sensitive. Only alphanumeric characters, - and . are allowed in section names. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable.
** Sections can be further divided into subsections. To begin a subsection put its name in double quotes, separated by space from the section name, in the section header
** All the other lines (and the remainder of the line after the section header) are recognized as setting variables, in the form name = value. If there is no equal sign on the line, the entire line is taken as name and the variable is recognized as boolean "true". The variable names are case-insensitive, allow only alphanumeric characters and -, and must start with an alphabetic character. There can be more than one value for a given variable; we say then that the variable is multivalued.
** Boolean values may be given as yes/no, 1/0, true/false or on/off. Case is not significant in boolean values, when converting value to the canonical form using --bool type specifier; git config will ensure that the output is "true" or "false".
** Note that this list is non-comprehensive and not necessarily complete. For command-specific variables, you will find a more detailed description in the appropriate manual page.
** core.editor Commands such as commit and tag that lets you edit messages by launching an editor uses the value of this variable when it is set, and the environment variable GIT_EDITOR is not set.
** merge.tool Controls which merge tool is used by git-mergetool(1). The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.<tool>.cmd variable is defined.
** user.email Your email address to be recorded in any newly created commits.
** user.name Your full name to be recorded in any newly created commits.
////////////////////////////////////////////////////////////////////////////////

