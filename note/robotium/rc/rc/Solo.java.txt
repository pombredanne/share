0001: /** 
0002:  ** Copyright (C) SAS Institute, All rights reserved.
0003:  ** General Public License: http://www.opensource.org/licenses/gpl-license.php
0004:  **/
0005: package com.jayway.android.robotium.remotecontrol.solo;
0006: 
0007: import java.awt.Dimension;
0008: import java.awt.Rectangle;
0009: import java.awt.image.BufferedImage;
0010: import java.io.ByteArrayInputStream;
0011: import java.io.File;
0012: import java.io.FileOutputStream;
0013: import java.io.IOException;
0014: import java.util.ArrayList;
0015: import java.util.Properties;
0016: import java.util.concurrent.TimeoutException;
0017: 
0018: import javax.imageio.ImageIO;
0019: 
0020: import org.safs.sockets.RemoteException;
0021: import org.safs.sockets.ShutdownInvocationException;
0022: import org.w3c.tools.codec.Base64Decoder;
0023: import org.w3c.tools.codec.Base64FormatException;
0024: 
0025: /**
0026:  * Provides a remote control API to the embedded Robotium Solo class on the device.
0027:  * <p>
0028:  * It is important to note that the Remote Control Solo class is always running in a process that is outside 
0029:  * of the device or emulator.  Thus, the API (and your program) do not have direct access to the actual Solo 
0030:  * or AUT objects like when running the traditional Robotium Solo on the device.
0031:  * <p>
0032:  * For this reason, we generally receive and use String unique ID (UID) references to these objects when the original 
0033:  * Solo API calls for a reference to an actual Android object like a View, Button, EditText, etc...
0034:  * <p>
0035:  * Additionally, the embedded Robotium Solo class is always running in the context of an Android jUnit test.  
0036:  * That means a traditional Robotium test will generally issue (and stop) on Error any time a jUnit Assert fails.
0037:  * <p>  
0038:  * That is not the case with Robotium Remote Control.
0039:  * <p>
0040:  * We cannot have the embedded test engine using Robotium Solo abort on Error because no information would get 
0041:  * back to Robotium Remote Control.  Instead, the embedded remote control client must capture and report all 
0042:  * such Errors to Robotium Remote Control and remain running until commanded to shutdown.
0043:  * <p>
0044:  * By default, Robotium Remote Control is NOT implemented as jUnit tests.  It does not abort or stop upon a test 
0045:  * failure.  This allows Robotium Remote Control to be used in many different types of testing frameworks including, 
0046:  * but not exclusive to, jUnit.  A future subclass of this Solo class and API can provide that same 
0047:  * jUnit support, if needed.
0048:  * <p>
0049:  * Default usage:
0050:  * <p><pre>
0051:  * Solo solo = new Solo();
0052:  * try{
0053:  *     solo.setLogsInterface(alog);
0054:  *     solo.initialize();
0055:  *     results = solo.startMainLauncher(errormsg);
0056:  *     (use the API)
0057:  *     solo.finishOpenActivities();
0058:  *     solo.shutdown();
0059:  * }
0060:  * catch(IllegalThreadStateException x){ 
0061:  *    //TODO: handle it
0062:  * }
0063:  * catch(RemoteException x){ 
0064:  *    //TODO: handle it
0065:  * }
0066:  * catch(TimeoutException x){ 
0067:  *    //TODO: handle it
0068:  * }
0069:  * catch(ShutdownInvocationException x){ 
0070:  *    //TODO: handle it
0071:  * }
0072:  * </pre>
0073:  * @author Carl Nagle, SAS Institute, Inc.
0074:  * @see Message
0075:  */
0076: public class Solo extends SoloWorker{
0077: 
0078: 	/** 22 */
0079: 	public static final int RIGHT = 22;
0080: 	/** 21 */
0081: 	public static final int LEFT = 21;	
0082: 	/** 19 */
0083: 	public static final int UP = 19;
0084: 	/** 20 */
0085: 	public static final int DOWN = 20;
0086: 	/** 66 */
0087: 	public static final int ENTER = 66;
0088: 	/** 82 */
0089: 	public static final int MENU = 82;
0090: 	/** 67 */
0091: 	public static final int DELETE = 67;
0092: 	/** 1 */
0093: 	public static final int OPENED = 1;
0094: 	/** 0 */
0095: 	public static final int CLOSED = 0;
0096: 	/** 1 */
0097: 	public static final int PORTRAIT = 1;
0098: 	/** 0 */
0099: 	public static final int LANDSCAPE = 0;
0100: 
0101: 	/** Holds the Properties object returned from the last remote control call returning Properties.
0102: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0103: 	 */
0104: 	public Properties _last_remote_result;
0105: 	
0106: 	public Solo() {	super(); }
0107: 
0108: 	/**
0109: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0110: 	 */
0111: 	private ArrayList getCurrentObjects(String typecommand) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0112: 		ArrayList list = new ArrayList(0);
0113: 		Properties props = prepSoloDispatch(typecommand);
0114: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0115: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0116: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0117: 		catch(NumberFormatException x){}
0118: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0119: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0120: 			list = parseStringArrayList(info);
0121: 		}
0122: 		return list;
0123: 	}
0124: 
0125: 	/**
0126: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0127: 	 */
0128: 	private String getSingleObject(String typecommand, int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0129: 		String uid = null;
0130: 		Properties props = prepSoloDispatch(typecommand);
0131: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
0132: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0133: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0134: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0135: 		catch(NumberFormatException x){}
0136: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0137: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0138: 		}
0139: 		return uid;
0140: 	}
0141: 	
0142: 	/**
0143: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0144: 	 */
0145: 	private String getSingleObject(String typecommand, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0146: 		String uid = null;
0147: 		Properties props = prepSoloDispatch(typecommand);
0148: 		props.setProperty(Message.PARAM_TEXT, text);
0149: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0150: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0151: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0152: 		catch(NumberFormatException x){}
0153: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0154: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0155: 		}
0156: 		return uid;
0157: 	}
0158: 
0159: 	/**
0160: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0161: 	 */
0162: 	private boolean runBooleanResultWithIndex(String typecommand, int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0163: 		Properties props = prepSoloDispatch(typecommand);
0164: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
0165: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0166: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0167: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0168: 		catch(NumberFormatException x){}
0169: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
0170: 	}
0171: 	
0172: 	/**
0173: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0174: 	 */
0175: 	private boolean runBooleanResultWithText(String typecommand, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0176: 		Properties props = prepSoloDispatch(typecommand);
0177: 		props.setProperty(Message.PARAM_TEXT, text);
0178: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0179: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0180: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0181: 		catch(NumberFormatException x){}
0182: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
0183: 	}
0184: 
0185: 	/**
0186: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0187: 	 */
0188: 	private boolean runBooleanResultWithName(String typecommand, String name) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0189: 		Properties props = prepSoloDispatch(typecommand);
0190: 		props.setProperty(Message.PARAM_NAME, name);
0191: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0192: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0193: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0194: 		catch(NumberFormatException x){}
0195: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
0196: 	}
0197: 
0198: 	/**
0199: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0200: 	 */
0201: 	private boolean runBooleanResultWithUID(String typecommand, String uidReference) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0202: 		String uid = null;
0203: 		Properties props = prepSoloDispatch(typecommand);
0204: 		props.setProperty(Message.PARAM_REFERENCE, uidReference);
0205: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0206: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0207: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0208: 		catch(NumberFormatException x){}
0209: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
0210: 	}
0211: 
0212: 	/**
0213: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
0214: 	 */
0215: 	private boolean runNoArgCommand(String typecommand) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0216: 		Properties props = prepSoloDispatch(typecommand);
0217: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0218: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0219: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0220: 		catch(NumberFormatException x){}
0221: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
0222: 	}
0223: 	
0224: 	/**
0225: 	 * Sometimes, the Robotium Solo's method will return a boolean value, such as isCheckBoxChecked(int index).
0226: 	 * We should not mix this return-value with the suceess of command-execution.
0227: 	 * We should return this value through a separate parameter.
0228: 	 * If the command-execution fails, RemoteSoloException will be thrown out.
0229: 	 * 
0230: 	 * @param success		boolean, if the command has been executed successfully on remote-side.
0231: 	 * @param command		String, the command that has been executed.
0232: 	 * @param boolParam		String, the param sent from the device-side, which contains a boolean value.
0233: 	 *                              This param is defined in class {@link Message}
0234: 	 * @return
0235: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
0236: 	 */
0237: 	private boolean getRemoteBooleanResult(boolean success, String command, String boolParam) throws RemoteSoloException{
0238: 		if(success){
0239: 			return Boolean.parseBoolean(_last_remote_result.getProperty(boolParam));
0240: 		}else{
0241: 			throw new RemoteSoloException("Fail to execute '"+command+"' in remote side.");
0242: 		}	
0243: 	}
0244: 	
0245: 	/**
0246: 	 * Clears the value of an EditText. 
0247: 	 * @param String UID reference to the EditText to clear.
0248: 	 * @return true if the command executed successfully, false if it did not.  
0249: 	 * Field _last_remote_result contains the returned Properties object.
0250: 	 * <p>
0251: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0252: 	 * used here and in the device/emulator Robotium Test Runner.
0253: 	 * <p><pre>
0254: 	 * (in ):KEY_TARGET=target_solo
0255: 	 * (in ):KEY_COMMAND=cmd_clearedittextreference
0256: 	 * (out):KEY_ISREMOTERESULT=true
0257: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0258: 	 * (out):KEY_REMOTERESULTINFO=String  
0259: 	 * (in ):PARAM_REFERENCE=String UID reference 
0260: 	 * </pre>
0261: 	 * @throws RemoteException -- if remote execution raised an Exception
0262: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0263: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0264: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0265: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0266: 	 * @see #_last_remote_result
0267: 	 * @see Message
0268: 	 */
0269: 	public boolean clearEditText(String uidEditText) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0270: 		return runBooleanResultWithUID(Message.cmd_clearedittextreference, uidEditText);
0271: 	}
0272: 	
0273: 	/**
0274: 	 * Clears the value of an EditText. 
0275: 	 * @param index of the EditText to be cleared. 0 if only one is available.
0276: 	 * @return true if the command executed successfully, false if it did not.  
0277: 	 * Field _last_remote_result contains the returned Properties object.
0278: 	 * <p>
0279: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0280: 	 * used here and in the device/emulator Robotium Test Runner.
0281: 	 * <p><pre>
0282: 	 * (in ):KEY_TARGET=target_solo
0283: 	 * (in ):KEY_COMMAND=cmd_clearedittextindex
0284: 	 * (out):KEY_ISREMOTERESULT=true
0285: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0286: 	 * (out):KEY_REMOTERESULTINFO=String  
0287: 	 * (in ):PARAM_INDEX=int
0288: 	 * </pre>
0289: 	 * @throws RemoteException -- if remote execution raised an Exception
0290: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0291: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0292: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0293: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0294: 	 * @see #_last_remote_result
0295: 	 * @see Message
0296: 	 */
0297: 	public boolean clearEditText(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0298: 		return runBooleanResultWithIndex(Message.cmd_clearedittextindex, index);
0299: 	}
0300: 	
0301: 	/**
0302: 	 * Clicks on a given list line and returns an ArrayList of String UID references for each TextView object that 
0303: 	 * the list line is showing.  Will use the first list it finds.  
0304: 	 * @param line that should be clicked.
0305: 	 * @return ArrayList of 0 or more String UIDs for all the TextView objects located in the list line.  
0306: 	 * Field _last_remote_result contains the returned Properties object.
0307: 	 * <p>
0308: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0309: 	 * used here and in the device/emulator Robotium Test Runner.
0310: 	 * <p><pre>
0311: 	 * (in ):KEY_TARGET=target_solo
0312: 	 * (in ):KEY_COMMAND=cmd_clickinlist
0313: 	 * (in ):PARAM_LINE=int
0314: 	 * (out):KEY_ISREMOTERESULT=true
0315: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0316: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual TextView objects 
0317: 	 * stored in a remote cache.
0318: 	 * (out):PARAM_TEXT=String containing the text-value of actual TextView objects stored in a remote cache.
0319: 	 * <p>
0320: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
0321: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
0322: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
0323: 	 * <p>
0324: 	 * PARAM_TEXT content format: ";text;text;text"
0325: 	 * The first character is the delimiter used to delimit each text followed by each text separated by the delimiter. 
0326: 	 * 
0327: 	 * <p>
0328: 	 * </pre>
0329: 	 * @throws RemoteException -- if remote execution raised an Exception
0330: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0331: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0332: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0333: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0334: 	 * @see #_last_remote_result
0335: 	 * @see Message
0336: 	 */
0337: 	public ArrayList clickInList(int line) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0338: 		ArrayList list = new ArrayList(0);
0339: 		Properties props = prepSoloDispatch(Message.cmd_clickinlist);
0340: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
0341: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0342: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0343: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0344: 		catch(NumberFormatException x){}
0345: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0346: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0347: 			list = parseStringArrayList(info);
0348: 		}
0349: 		return list;
0350: 	}
0351: 	
0352: 	/**
0353: 	 * Clicks on a given list line on a specified list and returns an ArrayList of String UID references for each TextView object that 
0354: 	 * the list line is showing.  
0355: 	 * @param line that should be clicked.
0356: 	 * @param index of the list. 1 if two lists are available.
0357: 	 * @return ArrayList of 0 or more String UIDs for all the TextView objects located in the list line.  
0358: 	 * Field _last_remote_result contains the returned Properties object.
0359: 	 * <p>
0360: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0361: 	 * used here and in the device/emulator Robotium Test Runner.
0362: 	 * <p><pre>
0363: 	 * (in ):KEY_TARGET=target_solo
0364: 	 * (in ):KEY_COMMAND=cmd_clickinlistindex
0365: 	 * (in ):PARAM_LINE=int
0366: 	 * (in ):PARAM_INDEX=int
0367: 	 * (out):KEY_ISREMOTERESULT=true
0368: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0369: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual TextView objects 
0370: 	 * stored in a remote cache.
0371: 	 * (out):PARAM_TEXT=String containing the text-value of actual TextView objects stored in a remote cache.
0372: 	 * <p>
0373: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
0374: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
0375: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
0376: 	 * <p>
0377: 	 * PARAM_TEXT content format: ";text;text;text"
0378: 	 * The first character is the delimiter used to delimit each text followed by each text separated by the delimiter. 
0379: 	 * 
0380: 	 * </pre>
0381: 	 * @throws RemoteException -- if remote execution raised an Exception
0382: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0383: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0384: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0385: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0386: 	 * @see #_last_remote_result
0387: 	 * @see Message
0388: 	 */
0389: 	public ArrayList clickInList(int line, int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0390: 		ArrayList list = new ArrayList(0);
0391: 		Properties props = prepSoloDispatch(Message.cmd_clickinlistindex);
0392: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
0393: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
0394: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0395: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0396: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0397: 		catch(NumberFormatException x){}
0398: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0399: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0400: 			list = parseStringArrayList(info);
0401: 		}
0402: 		return list;
0403: 	}
0404: 	
0405: 	/**
0406: 	 * Long Click on a given list line and returns an ArrayList of String UID references for each TextView object that 
0407: 	 * the list line is showing.  Will use the first list it finds.  
0408: 	 * @param line that should be clicked.
0409: 	 * @return ArrayList of 0 or more String UIDs for all the TextView objects located in the list line.  
0410: 	 * Field _last_remote_result contains the returned Properties object.
0411: 	 * <p>
0412: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0413: 	 * used here and in the device/emulator Robotium Test Runner.
0414: 	 * <p><pre>
0415: 	 * (in ):KEY_TARGET=target_solo
0416: 	 * (in ):KEY_COMMAND=cmd_clicklonginlist
0417: 	 * (in ):PARAM_LINE=int
0418: 	 * (out):KEY_ISREMOTERESULT=true
0419: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0420: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual TextView objects 
0421: 	 * stored in a remote cache.
0422: 	 * (out):PARAM_TEXT=String containing the text-value of actual TextView objects stored in a remote cache.
0423: 	 * <p>
0424: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
0425: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
0426: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
0427: 	 * <p>
0428: 	 * PARAM_TEXT content format: ";text;text;text"
0429: 	 * The first character is the delimiter used to delimit each text followed by each text separated by the delimiter. 
0430: 	 * </pre>
0431: 	 * @throws RemoteException -- if remote execution raised an Exception
0432: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0433: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0434: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0435: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0436: 	 * @see #_last_remote_result
0437: 	 * @see Message
0438: 	 */
0439: 	public ArrayList clickLongInList(int line) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0440: 		ArrayList list = new ArrayList(0);
0441: 		Properties props = prepSoloDispatch(Message.cmd_clicklonginlist);
0442: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
0443: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0444: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0445: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0446: 		catch(NumberFormatException x){}
0447: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0448: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0449: 			list = parseStringArrayList(info);
0450: 		}
0451: 		return list;
0452: 	}
0453: 	
0454: 	/**
0455: 	 * Long click on a given list line on a specified list and returns an ArrayList of String UID references for each TextView object that 
0456: 	 * the list line is showing.  
0457: 	 * @param line that should be clicked.
0458: 	 * @param index of the list. 1 if two lists are available.
0459: 	 * @return ArrayList of 0 or more String UIDs for all the TextView objects located in the list line.  
0460: 	 * Field _last_remote_result contains the returned Properties object.
0461: 	 * <p>
0462: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0463: 	 * used here and in the device/emulator Robotium Test Runner.
0464: 	 * <p><pre>
0465: 	 * (in ):KEY_TARGET=target_solo
0466: 	 * (in ):KEY_COMMAND=cmd_clicklonginlistindex
0467: 	 * (in ):PARAM_LINE=int
0468: 	 * (in ):PARAM_INDEX=int
0469: 	 * (out):KEY_ISREMOTERESULT=true
0470: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0471: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual TextView objects 
0472: 	 * stored in a remote cache.
0473: 	 * (out):PARAM_TEXT=String containing the text-value of actual TextView objects stored in a remote cache.
0474: 	 * <p>
0475: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
0476: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
0477: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
0478: 	 * <p>
0479: 	 * PARAM_TEXT content format: ";text;text;text"
0480: 	 * The first character is the delimiter used to delimit each text followed by each text separated by the delimiter. 
0481: 	 * </pre>
0482: 	 * @throws RemoteException -- if remote execution raised an Exception
0483: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0484: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0485: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0486: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0487: 	 * @see #_last_remote_result
0488: 	 * @see Message
0489: 	 */
0490: 	public ArrayList clickLongInList(int line, int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0491: 		ArrayList list = new ArrayList(0);
0492: 		Properties props = prepSoloDispatch(Message.cmd_clicklonginlistindex);
0493: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
0494: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
0495: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0496: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0497: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0498: 		catch(NumberFormatException x){}
0499: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0500: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0501: 			list = parseStringArrayList(info);
0502: 		}
0503: 		return list;
0504: 	}
0505: 	
0506: 	/**
0507: 	 * Long click on a given list line on a specified list and returns an ArrayList of String UID references for each TextView object that 
0508: 	 * the list line is showing.  
0509: 	 * @param line that should be clicked.
0510: 	 * @param index of the list. 1 if two lists are available.
0511: 	 * @param time in milliseconds to hold the long click.
0512: 	 * @return ArrayList of 0 or more String UIDs for all the TextView objects located in the list line.  
0513: 	 * Field _last_remote_result contains the returned Properties object.
0514: 	 * <p>
0515: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0516: 	 * used here and in the device/emulator Robotium Test Runner.
0517: 	 * <p><pre>
0518: 	 * (in ):KEY_TARGET=target_solo
0519: 	 * (in ):KEY_COMMAND=cmd_clicklongtimeinlistindex
0520: 	 * (in ):PARAM_LINE=int
0521: 	 * (in ):PARAM_INDEX=int
0522: 	 * (in ):PARAM_TIME=int
0523: 	 * (out):KEY_ISREMOTERESULT=true
0524: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0525: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual TextView objects 
0526: 	 * stored in a remote cache.
0527: 	 * (out):PARAM_TEXT=String containing the text-value of actual TextView objects stored in a remote cache.
0528: 	 * <p>
0529: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
0530: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
0531: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
0532: 	 * <p>
0533: 	 * PARAM_TEXT content format: ";text;text;text"
0534: 	 * The first character is the delimiter used to delimit each text followed by each text separated by the delimiter. 
0535: 	 * </pre>
0536: 	 * @throws RemoteException -- if remote execution raised an Exception
0537: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0538: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0539: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0540: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0541: 	 * @see #_last_remote_result
0542: 	 * @see Message
0543: 	 */
0544: 	public ArrayList clickLongInList(int line, int index, int time) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0545: 		ArrayList list = new ArrayList(0);
0546: 		Properties props = prepSoloDispatch(Message.cmd_clicklongtimeinlistindex);
0547: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
0548: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
0549: 		props.setProperty(Message.PARAM_TIME, String.valueOf(time));
0550: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0551: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0552: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0553: 		catch(NumberFormatException x){}
0554: 		if(rc==Message.STATUS_REMOTERESULT_OK){
0555: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
0556: 			list = parseStringArrayList(info);
0557: 		}
0558: 		return list;
0559: 	}
0560: 	
0561: 	/**
0562: 	 * Long clicks on a given coordinate on the screen. 
0563: 	 * @param float x coordinate
0564: 	 * @param float y coordinate
0565: 	 * @return true if the command executed successfully, false if it did not.  
0566: 	 * Field _last_remote_result contains the returned Properties object.
0567: 	 * <p>
0568: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0569: 	 * used here and in the device/emulator Robotium Test Runner.
0570: 	 * <p><pre>
0571: 	 * (in ):KEY_TARGET=target_solo
0572: 	 * (in ):KEY_COMMAND=cmd_clicklongonscreen
0573: 	 * (out):KEY_ISREMOTERESULT=true
0574: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0575: 	 * (out):KEY_REMOTERESULTINFO=String  
0576: 	 * (in ):PARAM_FLOATX=float 
0577: 	 * (in ):PARAM_FLOATy=float 
0578: 	 * </pre>
0579: 	 * @throws RemoteException -- if remote execution raised an Exception
0580: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0581: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0582: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0583: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0584: 	 * @see #_last_remote_result
0585: 	 * @see Message
0586: 	 */
0587: 	public boolean clickLongOnScreen(float x, float y) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0588: 		Properties props = prepSoloDispatch(Message.cmd_clicklongonscreen);
0589: 		props.setProperty(Message.PARAM_FLOATX, String.valueOf(x));
0590: 		props.setProperty(Message.PARAM_FLOATY, String.valueOf(y));
0591: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0592: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0593: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0594: 		catch(NumberFormatException e){}
0595: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0596: 	}
0597: 	
0598: 	/**
0599: 	 * Long clicks on a given coordinate on the screen for a specified number of milliseconds. 
0600: 	 * @param float x coordinate
0601: 	 * @param float y coordinate
0602: 	 * @param time in milliseconds to hold the click.
0603: 	 * @return true if the command executed successfully, false if it did not.  
0604: 	 * Field _last_remote_result contains the returned Properties object.
0605: 	 * <p>
0606: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0607: 	 * used here and in the device/emulator Robotium Test Runner.
0608: 	 * <p><pre>
0609: 	 * (in ):KEY_TARGET=target_solo
0610: 	 * (in ):KEY_COMMAND=cmd_clicklongtimeonscreen
0611: 	 * (out):KEY_ISREMOTERESULT=true
0612: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0613: 	 * (out):KEY_REMOTERESULTINFO=String  
0614: 	 * (in ):PARAM_FLOATX=float 
0615: 	 * (in ):PARAM_FLOATY=float 
0616: 	 * (in ):PARAM_TIME=int milliseconds 
0617: 	 * </pre>
0618: 	 * @throws RemoteException -- if remote execution raised an Exception
0619: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0620: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0621: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0622: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0623: 	 * @see #_last_remote_result
0624: 	 * @see Message
0625: 	 */
0626: 	public boolean clickLongOnScreen(float x, float y, int time) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0627: 		Properties props = prepSoloDispatch(Message.cmd_clicklongtimeonscreen);
0628: 		props.setProperty(Message.PARAM_FLOATX, String.valueOf(x));
0629: 		props.setProperty(Message.PARAM_FLOATY, String.valueOf(y));
0630: 		props.setProperty(Message.PARAM_TIME, String.valueOf(time));
0631: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0632: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0633: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0634: 		catch(NumberFormatException e){}
0635: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0636: 	}
0637: 	
0638: 	/**
0639: 	 * Long clicks on a given View. Will automatically scroll when needed. {@link #clickOnText(String)} can then 
0640: 	 * be used to click on the context menu items that appear after the long click. 
0641: 	 * @param String text that should be clicked.  The parameter is interpretted as a regular expression.
0642: 	 * @return true if the command executed successfully, false if it did not.  
0643: 	 * Field _last_remote_result contains the returned Properties object.
0644: 	 * <p>
0645: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0646: 	 * used here and in the device/emulator Robotium Test Runner.
0647: 	 * <p><pre>
0648: 	 * (in ):KEY_TARGET=target_solo
0649: 	 * (in ):KEY_COMMAND=cmd_clicklongontext
0650: 	 * (out):KEY_ISREMOTERESULT=true
0651: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0652: 	 * (out):KEY_REMOTERESULTINFO=String  
0653: 	 * (in ):PARAM_TEXT=String text 
0654: 	 * </pre>
0655: 	 * @throws RemoteException -- if remote execution raised an Exception
0656: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0657: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0658: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0659: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0660: 	 * @see #_last_remote_result
0661: 	 * @see Message
0662: 	 */
0663: 	public boolean clickLongOnText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0664: 		return runBooleanResultWithText(Message.cmd_clicklongontext, text);
0665: 	}
0666: 	
0667: 	/**
0668: 	 * Long clicks on a given View. Will automatically scroll when needed. {@link #clickOnText(String)} can then 
0669: 	 * be used to click on the context menu items that appear after the long click. 
0670: 	 * @param String text that should be clicked.  The parameter is interpretted as a regular expression.
0671: 	 * @param match the match of the text that should be clicked.
0672: 	 * @return true if the command executed successfully, false if it did not.  
0673: 	 * Field _last_remote_result contains the returned Properties object.
0674: 	 * <p>
0675: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0676: 	 * used here and in the device/emulator Robotium Test Runner.
0677: 	 * <p><pre>
0678: 	 * (in ):KEY_TARGET=target_solo
0679: 	 * (in ):KEY_COMMAND=cmd_clicklongontextmatch
0680: 	 * (out):KEY_ISREMOTERESULT=true
0681: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0682: 	 * (out):KEY_REMOTERESULTINFO=String  
0683: 	 * (in ):PARAM_TEXT=String text 
0684: 	 * (in ):PARAM_MATCH=String text 
0685: 	 * </pre>
0686: 	 * @throws RemoteException -- if remote execution raised an Exception
0687: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0688: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0689: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0690: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0691: 	 * @see #_last_remote_result
0692: 	 * @see Message
0693: 	 */
0694: 	public boolean clickLongOnText(String text, int match) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0695: 		Properties props = prepSoloDispatch(Message.cmd_clicklongontextmatch);
0696: 		props.setProperty(Message.PARAM_TEXT, text);
0697: 		props.setProperty(Message.PARAM_MATCH, String.valueOf(match));
0698: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0699: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0700: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0701: 		catch(NumberFormatException e){}
0702: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0703: 	}
0704: 	
0705: 	/**
0706: 	 * Long clicks on a given View. {@link #clickOnText(String)} can then 
0707: 	 * be used to click on the context menu items that appear after the long click. 
0708: 	 * @param String text that should be clicked.  The parameter is interpretted as a regular expression.
0709: 	 * @param match the match of the text that should be clicked.
0710: 	 * @param scroll true if scrolling should be performed.
0711: 	 * @return true if the command executed successfully, false if it did not.  
0712: 	 * Field _last_remote_result contains the returned Properties object.
0713: 	 * <p>
0714: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0715: 	 * used here and in the device/emulator Robotium Test Runner.
0716: 	 * <p><pre>
0717: 	 * (in ):KEY_TARGET=target_solo
0718: 	 * (in ):KEY_COMMAND=cmd_clicklongontextmatchscroll
0719: 	 * (out):KEY_ISREMOTERESULT=true
0720: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0721: 	 * (out):KEY_REMOTERESULTINFO=String  
0722: 	 * (in ):PARAM_TEXT=String text 
0723: 	 * (in ):PARAM_MATCH=String text 
0724: 	 * (in ):PARAM_SCROLL=boolean 
0725: 	 * </pre>
0726: 	 * @throws RemoteException -- if remote execution raised an Exception
0727: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0728: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0729: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0730: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0731: 	 * @see #_last_remote_result
0732: 	 * @see Message
0733: 	 */
0734: 	public boolean clickLongOnText(String text, int match, boolean scroll) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0735: 		Properties props = prepSoloDispatch(Message.cmd_clicklongontextmatchscroll);
0736: 		props.setProperty(Message.PARAM_TEXT, text);
0737: 		props.setProperty(Message.PARAM_MATCH, String.valueOf(match));
0738: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
0739: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0740: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0741: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0742: 		catch(NumberFormatException e){}
0743: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0744: 	}
0745: 	
0746: 	/**
0747: 	 * Long clicks on a given View. {@link #clickOnText(String)} can then 
0748: 	 * be used to click on the context menu items that appear after the long click. 
0749: 	 * @param String text that should be clicked.  The parameter is interpretted as a regular expression.
0750: 	 * @param match the match of the text that should be clicked.
0751: 	 * @param time in milliseconds to hold the click.
0752: 	 * @return true if the command executed successfully, false if it did not.  
0753: 	 * Field _last_remote_result contains the returned Properties object.
0754: 	 * <p>
0755: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0756: 	 * used here and in the device/emulator Robotium Test Runner.
0757: 	 * <p><pre>
0758: 	 * (in ):KEY_TARGET=target_solo
0759: 	 * (in ):KEY_COMMAND=cmd_clicklongtimeontextmatch
0760: 	 * (out):KEY_ISREMOTERESULT=true
0761: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0762: 	 * (out):KEY_REMOTERESULTINFO=String  
0763: 	 * (in ):PARAM_TEXT=String text 
0764: 	 * (in ):PARAM_MATCH=String text 
0765: 	 * (in ):PARAM_TIME=int millis 
0766: 	 * </pre>
0767: 	 * @throws RemoteException -- if remote execution raised an Exception
0768: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0769: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0770: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0771: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0772: 	 * @see #_last_remote_result
0773: 	 * @see Message
0774: 	 */
0775: 	public boolean clickLongOnText(String text, int match, int time) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0776: 		Properties props = prepSoloDispatch(Message.cmd_clicklongtimeontextmatch);
0777: 		props.setProperty(Message.PARAM_TEXT, text);
0778: 		props.setProperty(Message.PARAM_MATCH, String.valueOf(match));
0779: 		props.setProperty(Message.PARAM_TIME, String.valueOf(time));
0780: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0781: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0782: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0783: 		catch(NumberFormatException e){}
0784: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0785: 	}
0786: 	
0787: 	/**
0788: 	 * Long clicks on a given View and then selects an item from the context menu that appears.  
0789: 	 * Will automatically scroll when needed. 
0790: 	 * @param String text that should be clicked.  The parameter is interpretted as a regular expression.
0791: 	 * @param index of the menu item to be pressed. 0 if only one is available.
0792: 	 * @return true if the command executed successfully, false if it did not.  
0793: 	 * Field _last_remote_result contains the returned Properties object.
0794: 	 * <p>
0795: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0796: 	 * used here and in the device/emulator Robotium Test Runner.
0797: 	 * <p><pre>
0798: 	 * (in ):KEY_TARGET=target_solo
0799: 	 * (in ):KEY_COMMAND=cmd_clicklongpressontext
0800: 	 * (out):KEY_ISREMOTERESULT=true
0801: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0802: 	 * (out):KEY_REMOTERESULTINFO=String  
0803: 	 * (in ):PARAM_TEXT=String text 
0804: 	 * (in ):PARAM_INDEX=int 
0805: 	 * </pre>
0806: 	 * @throws RemoteException -- if remote execution raised an Exception
0807: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0808: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0809: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0810: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0811: 	 * @see #_last_remote_result
0812: 	 * @see Message
0813: 	 */
0814: 	public boolean clickLongOnTextAndPress(String text, int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0815: 		Properties props = prepSoloDispatch(Message.cmd_clicklongpressontext);
0816: 		props.setProperty(Message.PARAM_TEXT, text);
0817: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
0818: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0819: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0820: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0821: 		catch(NumberFormatException e){}
0822: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0823: 	}
0824: 	
0825: 	/**
0826: 	 * Long clicks on a given View. 
0827: 	 * @param String UID reference to the View that should be long clicked.
0828: 	 * @return true if the command executed successfully, false if it did not.  
0829: 	 * Field _last_remote_result contains the returned Properties object.
0830: 	 * <p>
0831: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0832: 	 * used here and in the device/emulator Robotium Test Runner.
0833: 	 * <p><pre>
0834: 	 * (in ):KEY_TARGET=target_solo
0835: 	 * (in ):KEY_COMMAND=cmd_clicklongonview
0836: 	 * (out):KEY_ISREMOTERESULT=true
0837: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0838: 	 * (out):KEY_REMOTERESULTINFO=String  
0839: 	 * (in ):PARAM_REFERENCE=String UID reference 
0840: 	 * (out):PARAM_CLASS=String The view's full qualified class name 
0841: 	 * </pre>
0842: 	 * @throws RemoteException -- if remote execution raised an Exception
0843: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0844: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0845: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0846: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0847: 	 * @see #_last_remote_result
0848: 	 * @see Message
0849: 	 */
0850: 	public boolean clickLongOnView(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0851: 		return runBooleanResultWithUID(Message.cmd_clicklongonview, uidView);
0852: 	}
0853: 	
0854: 	/**
0855: 	 * Long clicks on a given View for a specified amount of time. 
0856: 	 * @param String UID reference to the View that should be long clicked.
0857: 	 * @param time in milliseconds to hold the click.
0858: 	 * @return true if the command executed successfully, false if it did not.  
0859: 	 * Field _last_remote_result contains the returned Properties object.
0860: 	 * <p>
0861: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0862: 	 * used here and in the device/emulator Robotium Test Runner.
0863: 	 * <p><pre>
0864: 	 * (in ):KEY_TARGET=target_solo
0865: 	 * (in ):KEY_COMMAND=cmd_clicklongtimeonview
0866: 	 * (out):KEY_ISREMOTERESULT=true
0867: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0868: 	 * (out):KEY_REMOTERESULTINFO=String  
0869: 	 * (in ):PARAM_REFERENCE=String UID reference 
0870: 	 * (in ):PARAM_TIME=int 
0871: 	 * (out):PARAM_CLASS=String The view's full qualified class name 
0872: 	 * </pre>
0873: 	 * @throws RemoteException -- if remote execution raised an Exception
0874: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0875: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0876: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0877: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0878: 	 * @see #_last_remote_result
0879: 	 * @see Message
0880: 	 */
0881: 	public boolean clickLongOnView(String uidView, int time) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0882: 		Properties props = prepSoloDispatch(Message.cmd_clicklongtimeonview);
0883: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
0884: 		props.setProperty(Message.PARAM_TIME, String.valueOf(time));
0885: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0886: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0887: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0888: 		catch(NumberFormatException e){}
0889: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
0890: 	}
0891: 	
0892: 	/**
0893: 	 * Clicks on a Button at a given index. 
0894: 	 * @param index of the Button to be clicked. 0 if only one is available.
0895: 	 * @return true if the command executed successfully, false if it did not.  
0896: 	 * Field _last_remote_result contains the returned Properties object.
0897: 	 * <p>
0898: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0899: 	 * used here and in the device/emulator Robotium Test Runner.
0900: 	 * <p><pre>
0901: 	 * (in ):KEY_TARGET=target_solo
0902: 	 * (in ):KEY_COMMAND=cmd_clickonbuttonindex
0903: 	 * (out):KEY_ISREMOTERESULT=true
0904: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0905: 	 * (out):KEY_REMOTERESULTINFO=String  
0906: 	 * (in ):PARAM_INDEX=int 
0907: 	 * </pre>
0908: 	 * @throws RemoteException -- if remote execution raised an Exception
0909: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0910: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0911: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0912: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0913: 	 * @see #_last_remote_result
0914: 	 * @see Message
0915: 	 */
0916: 	public boolean clickOnButton(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0917: 		return runBooleanResultWithIndex(Message.cmd_clickonbuttonindex, index);
0918: 	}
0919: 	
0920: 	/**
0921: 	 * Clicks on the Action Bar Home button.
0922: 	 * Requires Robotium 3.4.1. 
0923: 	 * @return true if the command executed successfully, false if it did not.  
0924: 	 * Field _last_remote_result contains the returned Properties object.
0925: 	 * <p>
0926: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0927: 	 * used here and in the device/emulator Robotium Test Runner.
0928: 	 * <p><pre>
0929: 	 * (in ):KEY_TARGET=target_solo
0930: 	 * (in ):KEY_COMMAND=cmd_clickonactionbarhomebutton
0931: 	 * (out):KEY_ISREMOTERESULT=true
0932: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0933: 	 * (out):KEY_REMOTERESULTINFO=String  
0934: 	 * </pre>
0935: 	 * @throws RemoteException -- if remote execution raised an Exception
0936: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0937: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0938: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0939: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0940: 	 * @see #_last_remote_result
0941: 	 * @see Message
0942: 	 */
0943: 	public boolean clickOnActionBarHomeButton() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0944: 		return runNoArgCommand(Message.cmd_clickonactionbarhomebutton);
0945: 	}
0946: 	
0947: 	/**
0948: 	 * Clicks on an ActionBar item with a given resource id.
0949: 	 * Requires Robotium 3.6.
0950: 	 * @param resourceID, the R.id of the ActionBar item.
0951: 	 * @return true if the command executed successfully, false if it did not.  
0952: 	 * Field _last_remote_result contains the returned Properties object.
0953: 	 * <p>
0954: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0955: 	 * used here and in the device/emulator Robotium Test Runner.
0956: 	 * <p><pre>
0957: 	 * (in ):KEY_TARGET=target_solo
0958: 	 * (in ):KEY_COMMAND=cmd_clickonactionbaritem
0959: 	 * (out):KEY_ISREMOTERESULT=true
0960: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0961: 	 * (out):KEY_REMOTERESULTINFO=String
0962: 	 * (in ):PARAM_RESID=int
0963: 	 * </pre>
0964: 	 * @throws RemoteException -- if remote execution raised an Exception
0965: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
0966: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
0967: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
0968: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
0969: 	 * @see #_last_remote_result
0970: 	 * @see Message
0971: 	 */
0972: 	public boolean clickOnActionBarItem(int resourceID) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
0973: 		Properties props = prepSoloDispatch(Message.cmd_clickonactionbaritem);
0974: 		props.setProperty(Message.PARAM_RESID, String.valueOf(resourceID));
0975: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
0976: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
0977: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
0978: 		catch(NumberFormatException x){}
0979: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
0980: 	}	
0981: 	
0982: 	/**
0983: 	 * Clicks on a Button with the given text. Will automatically scroll when needed. 
0984: 	 * @param text name of the button presented to the user.  The parameter will be interpretted as a regular expression.
0985: 	 * @return true if the command executed successfully, false if it did not.  
0986: 	 * Field _last_remote_result contains the returned Properties object.
0987: 	 * <p>
0988: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
0989: 	 * used here and in the device/emulator Robotium Test Runner.
0990: 	 * <p><pre>
0991: 	 * (in ):KEY_TARGET=target_solo
0992: 	 * (in ):KEY_COMMAND=cmd_clickonbutton
0993: 	 * (out):KEY_ISREMOTERESULT=true
0994: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
0995: 	 * (out):KEY_REMOTERESULTINFO=String  
0996: 	 * (in ):PARAM_NAME=String
0997: 	 * </pre>
0998: 	 * @throws RemoteException -- if remote execution raised an Exception
0999: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1000: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1001: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1002: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1003: 	 * @see #_last_remote_result
1004: 	 * @see Message
1005: 	 */
1006: 	public boolean clickOnButton(String name) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1007: 		return runBooleanResultWithName(Message.cmd_clickonbutton, name);
1008: 	}
1009: 	
1010: 	/**
1011: 	 * Clicks on a CheckBox at a given index. 
1012: 	 * @param index of the CheckBox to be clicked. 0 if only one is available.
1013: 	 * @return true if the command executed successfully, false if it did not.  
1014: 	 * Field _last_remote_result contains the returned Properties object.
1015: 	 * <p>
1016: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1017: 	 * used here and in the device/emulator Robotium Test Runner.
1018: 	 * <p><pre>
1019: 	 * (in ):KEY_TARGET=target_solo
1020: 	 * (in ):KEY_COMMAND=cmd_clickoncheckboxindex
1021: 	 * (out):KEY_ISREMOTERESULT=true
1022: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1023: 	 * (out):KEY_REMOTERESULTINFO=String  
1024: 	 * (in ):PARAM_INDEX=int 
1025: 	 * </pre>
1026: 	 * @throws RemoteException -- if remote execution raised an Exception
1027: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1028: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1029: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1030: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1031: 	 * @see #_last_remote_result
1032: 	 * @see Message
1033: 	 */
1034: 	public boolean clickOnCheckBox(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1035: 		return runBooleanResultWithIndex(Message.cmd_clickoncheckboxindex, index);
1036: 	}
1037: 	
1038: 	/**
1039: 	 * Clicks on an EditText at a given index. 
1040: 	 * @param index of the EditText to be clicked. 0 if only one is available.
1041: 	 * @return true if the command executed successfully, false if it did not.  
1042: 	 * Field _last_remote_result contains the returned Properties object.
1043: 	 * <p>
1044: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1045: 	 * used here and in the device/emulator Robotium Test Runner.
1046: 	 * <p><pre>
1047: 	 * (in ):KEY_TARGET=target_solo
1048: 	 * (in ):KEY_COMMAND=cmd_clickonedittextindex
1049: 	 * (out):KEY_ISREMOTERESULT=true
1050: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1051: 	 * (out):KEY_REMOTERESULTINFO=String  
1052: 	 * (in ):PARAM_INDEX=int 
1053: 	 * </pre>
1054: 	 * @throws RemoteException -- if remote execution raised an Exception
1055: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1056: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1057: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1058: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1059: 	 * @see #_last_remote_result
1060: 	 * @see Message
1061: 	 */
1062: 	public boolean clickOnEditText(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1063: 		return runBooleanResultWithIndex(Message.cmd_clickonedittextindex, index);
1064: 	}
1065: 	
1066: 	/**
1067: 	 * Clicks on Image at a given index. 
1068: 	 * @param index of the Image to be clicked. 0 if only one is available.
1069: 	 * @return true if the command executed successfully, false if it did not.  
1070: 	 * Field _last_remote_result contains the returned Properties object.
1071: 	 * <p>
1072: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1073: 	 * used here and in the device/emulator Robotium Test Runner.
1074: 	 * <p><pre>
1075: 	 * (in ):KEY_TARGET=target_solo
1076: 	 * (in ):KEY_COMMAND=cmd_clickonimage
1077: 	 * (out):KEY_ISREMOTERESULT=true
1078: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1079: 	 * (out):KEY_REMOTERESULTINFO=String  
1080: 	 * (in ):PARAM_INDEX=int 
1081: 	 * </pre>
1082: 	 * @throws RemoteException -- if remote execution raised an Exception
1083: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1084: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1085: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1086: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1087: 	 * @see #_last_remote_result
1088: 	 * @see Message
1089: 	 */
1090: 	public boolean clickOnImage(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1091: 		return runBooleanResultWithIndex(Message.cmd_clickonimage, index);
1092: 	}
1093: 	
1094: 	/**
1095: 	 * Clicks on a ImageButton at a given index. 
1096: 	 * @param index of the ImageButton to be clicked. 0 if only one is available.
1097: 	 * @return true if the command executed successfully, false if it did not.  
1098: 	 * Field _last_remote_result contains the returned Properties object.
1099: 	 * <p>
1100: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1101: 	 * used here and in the device/emulator Robotium Test Runner.
1102: 	 * <p><pre>
1103: 	 * (in ):KEY_TARGET=target_solo
1104: 	 * (in ):KEY_COMMAND=cmd_clickonimagebutton
1105: 	 * (out):KEY_ISREMOTERESULT=true
1106: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1107: 	 * (out):KEY_REMOTERESULTINFO=String  
1108: 	 * (in ):PARAM_INDEX=int 
1109: 	 * </pre>
1110: 	 * @throws RemoteException -- if remote execution raised an Exception
1111: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1112: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1113: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1114: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1115: 	 * @see #_last_remote_result
1116: 	 * @see Message
1117: 	 */
1118: 	public boolean clickOnImageButton(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1119: 		return runBooleanResultWithIndex(Message.cmd_clickonimagebutton, index);
1120: 	}
1121: 	
1122: 	/**
1123: 	 * Clicks on a menuitem with a given text. 
1124: 	 * @param text of the menuitem to be clicked. The parameter will be interpretted as a regular expression.
1125: 	 * @return true if the command executed successfully, false if it did not.  
1126: 	 * Field _last_remote_result contains the returned Properties object.
1127: 	 * <p>
1128: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1129: 	 * used here and in the device/emulator Robotium Test Runner.
1130: 	 * <p><pre>
1131: 	 * (in ):KEY_TARGET=target_solo
1132: 	 * (in ):KEY_COMMAND=cmd_clickonmenuitem
1133: 	 * (out):KEY_ISREMOTERESULT=true
1134: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1135: 	 * (out):KEY_REMOTERESULTINFO=String  
1136: 	 * (in ):PARAM_TEXT=String 
1137: 	 * </pre>
1138: 	 * @throws RemoteException -- if remote execution raised an Exception
1139: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1140: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1141: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1142: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1143: 	 * @see #_last_remote_result
1144: 	 * @see Message
1145: 	 */
1146: 	public boolean clickOnMenuItem(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1147: 		return runBooleanResultWithText(Message.cmd_clickonmenuitem, text);
1148: 	}
1149: 	
1150: 	/**
1151: 	 * Clicks on a MenuItem with a given text. 
1152: 	 * @param text of the menuitem to be clicked. The parameter will be interpretted as a regular expression.
1153: 	 * @param submenu true if the menu item could be located in a sub menu.
1154: 	 * @return true if the command executed successfully, false if it did not.  
1155: 	 * Field _last_remote_result contains the returned Properties object.
1156: 	 * <p>
1157: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1158: 	 * used here and in the device/emulator Robotium Test Runner.
1159: 	 * <p><pre>
1160: 	 * (in ):KEY_TARGET=target_solo
1161: 	 * (in ):KEY_COMMAND=cmd_clickonsubmenuitem
1162: 	 * (out):KEY_ISREMOTERESULT=true
1163: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1164: 	 * (out):KEY_REMOTERESULTINFO=String  
1165: 	 * (in ):PARAM_TEXT=String
1166: 	 * (in ):PARAM_SUBMENU=boolean 
1167: 	 * </pre>
1168: 	 * @throws RemoteException -- if remote execution raised an Exception
1169: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1170: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1171: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1172: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1173: 	 * @see #_last_remote_result
1174: 	 * @see Message
1175: 	 */
1176: 	public boolean clickOnMenuItem(String text, boolean subMenu) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1177: 		Properties props = prepSoloDispatch(Message.cmd_clickonsubmenuitem);
1178: 		props.setProperty(Message.PARAM_TEXT, text);
1179: 		props.setProperty(Message.PARAM_SUBMENU, String.valueOf(subMenu));
1180: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1181: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1182: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1183: 		catch(NumberFormatException e){}
1184: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1185: 	}
1186: 	
1187: 	/**
1188: 	 * Clicks on a RadioButton at a given index. 
1189: 	 * @param index of the RadioButton to be clicked. 0 if only one is available.
1190: 	 * @return true if the command executed successfully, false if it did not.  
1191: 	 * Field _last_remote_result contains the returned Properties object.
1192: 	 * <p>
1193: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1194: 	 * used here and in the device/emulator Robotium Test Runner.
1195: 	 * <p><pre>
1196: 	 * (in ):KEY_TARGET=target_solo
1197: 	 * (in ):KEY_COMMAND=cmd_clickonradiobuttonindex
1198: 	 * (out):KEY_ISREMOTERESULT=true
1199: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1200: 	 * (out):KEY_REMOTERESULTINFO=String  
1201: 	 * (in ):PARAM_INDEX=int 
1202: 	 * </pre>
1203: 	 * @throws RemoteException -- if remote execution raised an Exception
1204: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1205: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1206: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1207: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1208: 	 * @see #_last_remote_result
1209: 	 * @see Message
1210: 	 */
1211: 	public boolean clickOnRadioButton(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1212: 		return runBooleanResultWithIndex(Message.cmd_clickonradiobuttonindex, index);
1213: 	}
1214: 	
1215: 	/**
1216: 	 * Clicks on a given coordinate on the screen. 
1217: 	 * @param float x coordinate
1218: 	 * @param float y coordinate
1219: 	 * @return true if the command executed successfully, false if it did not.  
1220: 	 * Field _last_remote_result contains the returned Properties object.
1221: 	 * <p>
1222: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1223: 	 * used here and in the device/emulator Robotium Test Runner.
1224: 	 * <p><pre>
1225: 	 * (in ):KEY_TARGET=target_solo
1226: 	 * (in ):KEY_COMMAND=cmd_clickonscreen
1227: 	 * (out):KEY_ISREMOTERESULT=true
1228: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1229: 	 * (out):KEY_REMOTERESULTINFO=String  
1230: 	 * (in ):PARAM_FLOATX=float 
1231: 	 * (in ):PARAM_FLOATY=float 
1232: 	 * </pre>
1233: 	 * @throws RemoteException -- if remote execution raised an Exception
1234: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1235: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1236: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1237: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1238: 	 * @see #_last_remote_result
1239: 	 * @see Message
1240: 	 */
1241: 	public boolean clickOnScreen(float x, float y) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1242: 		Properties props = prepSoloDispatch(Message.cmd_clickonscreen);
1243: 		props.setProperty(Message.PARAM_FLOATX, String.valueOf(x));
1244: 		props.setProperty(Message.PARAM_FLOATY, String.valueOf(y));
1245: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1246: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1247: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1248: 		catch(NumberFormatException e){}
1249: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1250: 	}
1251: 	
1252: 	/**
1253: 	 * Clicks on a View displaying the given text.  Will automatically scroll when needed. 
1254: 	 * @param text that should be clicked. The parameter will be treated like a regular expression.
1255: 	 * @return true if the command executed successfully, false if it did not.  
1256: 	 * Field _last_remote_result contains the returned Properties object.
1257: 	 * <p>
1258: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1259: 	 * used here and in the device/emulator Robotium Test Runner.
1260: 	 * <p><pre>
1261: 	 * (in ):KEY_TARGET=target_solo
1262: 	 * (in ):KEY_COMMAND=cmd_clickontext
1263: 	 * (out):KEY_ISREMOTERESULT=true
1264: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1265: 	 * (out):KEY_REMOTERESULTINFO=String  
1266: 	 * (in ):PARAM_TEXT=String 
1267: 	 * </pre>
1268: 	 * @throws RemoteException -- if remote execution raised an Exception
1269: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1270: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1271: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1272: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1273: 	 * @see #_last_remote_result
1274: 	 * @see Message
1275: 	 */
1276: 	public boolean clickOnText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1277: 		return runBooleanResultWithText(Message.cmd_clickontext, text);
1278: 	}
1279: 	
1280: 	/**
1281: 	 * Clicks on a View displaying the given text.  Will automatically scroll when needed. 
1282: 	 * @param text that should be clicked.  The parameter will be treated as a regular expression.
1283: 	 * @param int match of the text that should be clicked.
1284: 	 * @return true if the command executed successfully, false if it did not.  
1285: 	 * Field _last_remote_result contains the returned Properties object.
1286: 	 * <p>
1287: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1288: 	 * used here and in the device/emulator Robotium Test Runner.
1289: 	 * <p><pre>
1290: 	 * (in ):KEY_TARGET=target_solo
1291: 	 * (in ):KEY_COMMAND=cmd_clickontextmatch
1292: 	 * (out):KEY_ISREMOTERESULT=true
1293: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1294: 	 * (out):KEY_REMOTERESULTINFO=String  
1295: 	 * (in ):PARAM_TEXT=String 
1296: 	 * (in ):PARAM_MATCH=int 
1297: 	 * </pre>
1298: 	 * @throws RemoteException -- if remote execution raised an Exception
1299: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1300: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1301: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1302: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1303: 	 * @see #_last_remote_result
1304: 	 * @see Message
1305: 	 */
1306: 	public boolean clickOnText(String text, int match) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1307: 		Properties props = prepSoloDispatch(Message.cmd_clickontextmatch);
1308: 		props.setProperty(Message.PARAM_TEXT, text);
1309: 		props.setProperty(Message.PARAM_MATCH, String.valueOf(match));
1310: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1311: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1312: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1313: 		catch(NumberFormatException e){}
1314: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1315: 	}
1316: 	
1317: 	/**
1318: 	 * Clicks on a View displaying the given text. 
1319: 	 * @param text that should be clicked.  The parameter will be treated as a regular expression.
1320: 	 * @param int match of the text that should be clicked.
1321: 	 * @param scroll true if scrolling should be performed.
1322: 	 * @return true if the command executed successfully, false if it did not.  
1323: 	 * Field _last_remote_result contains the returned Properties object.
1324: 	 * <p>
1325: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1326: 	 * used here and in the device/emulator Robotium Test Runner.
1327: 	 * <p><pre>
1328: 	 * (in ):KEY_TARGET=target_solo
1329: 	 * (in ):KEY_COMMAND=cmd_clickontextmatchscroll
1330: 	 * (out):KEY_ISREMOTERESULT=true
1331: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1332: 	 * (out):KEY_REMOTERESULTINFO=String  
1333: 	 * (in ):PARAM_TEXT=String 
1334: 	 * (in ):PARAM_MATCH=int 
1335: 	 * (in ):PARAM_SCROLL=true/false 
1336: 	 * </pre>
1337: 	 * @throws RemoteException -- if remote execution raised an Exception
1338: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1339: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1340: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1341: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1342: 	 * @see #_last_remote_result
1343: 	 * @see Message
1344: 	 */
1345: 	public boolean clickOnText(String text, int match, boolean scroll) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1346: 		Properties props = prepSoloDispatch(Message.cmd_clickontextmatchscroll);
1347: 		props.setProperty(Message.PARAM_TEXT, text);
1348: 		props.setProperty(Message.PARAM_MATCH, String.valueOf(match));
1349: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
1350: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1351: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1352: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1353: 		catch(NumberFormatException e){}
1354: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1355: 	}
1356: 	
1357: 	/**
1358: 	 * Clicks on a ToggleButton displaying the given text. 
1359: 	 * @param name of the ToggleButton presented to the user.  The parameter will be treated as a regular expression.
1360: 	 * @return true if the command executed successfully, false if it did not.  
1361: 	 * Field _last_remote_result contains the returned Properties object.
1362: 	 * <p>
1363: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1364: 	 * used here and in the device/emulator Robotium Test Runner.
1365: 	 * <p><pre>
1366: 	 * (in ):KEY_TARGET=target_solo
1367: 	 * (in ):KEY_COMMAND=cmd_clickontogglebutton
1368: 	 * (out):KEY_ISREMOTERESULT=true
1369: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1370: 	 * (out):KEY_REMOTERESULTINFO=String  
1371: 	 * (in ):PARAM_NAME=String 
1372: 	 * </pre>
1373: 	 * @throws RemoteException -- if remote execution raised an Exception
1374: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1375: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1376: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1377: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1378: 	 * @see #_last_remote_result
1379: 	 * @see Message
1380: 	 */
1381: 	public boolean clickOnToggleButton(String name) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1382: 		return runBooleanResultWithName(Message.cmd_clickontogglebutton, name);
1383: 	}
1384: 	
1385: 	/**
1386: 	 * Clicks on the specified View. 
1387: 	 * @param String UID reference of the View that should be clicked.
1388: 	 * @return true if the command executed successfully, false if it did not.  
1389: 	 * Field _last_remote_result contains the returned Properties object.
1390: 	 * <p>
1391: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1392: 	 * used here and in the device/emulator Robotium Test Runner.
1393: 	 * <p><pre>
1394: 	 * (in ):KEY_TARGET=target_solo
1395: 	 * (in ):KEY_COMMAND=cmd_clickonview
1396: 	 * (out):KEY_ISREMOTERESULT=true
1397: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1398: 	 * (out):KEY_REMOTERESULTINFO=String  
1399: 	 * (in ):PARAM_REFERENCE=String UID 
1400: 	 * (out):PARAM_CLASS=String The view's full qualified class name 
1401: 	 * </pre>
1402: 	 * @throws RemoteException -- if remote execution raised an Exception
1403: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1404: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1405: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1406: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1407: 	 * @see #_last_remote_result
1408: 	 * @see Message
1409: 	 */
1410: 	public boolean clickOnView(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1411: 		return runBooleanResultWithUID(Message.cmd_clickonview, uidView);
1412: 	}
1413: 	
1414: 	/**
1415: 	 * Simulate touching a given location and dragging it to a new location. 
1416: 	 * @param fromX coordinate of the initial touch, in screen coordinates.
1417: 	 * @param toX coordinate of the drag destination, in screen coordinates.
1418: 	 * @param fromY coordinate of the initial touch, in screen coordinates.
1419: 	 * @param toY coordinate of the drag destination, in screen coordinates.
1420: 	 * @param stepCount How many move steps to include in the drag.
1421: 	 * @return true if the command executed successfully, false if it did not.  
1422: 	 * Field _last_remote_result contains the returned Properties object.
1423: 	 * <p>
1424: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1425: 	 * used here and in the device/emulator Robotium Test Runner.
1426: 	 * <p><pre>
1427: 	 * (in ):KEY_TARGET=target_solo
1428: 	 * (in ):KEY_COMMAND=cmd_drag
1429: 	 * (out):KEY_ISREMOTERESULT=true
1430: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1431: 	 * (out):KEY_REMOTERESULTINFO=String  
1432: 	 * (in ):PARAM_FROMX=float 
1433: 	 * (in ):PARAM_TOX=float 
1434: 	 * (in ):PARAM_FROMY=float 
1435: 	 * (in ):PARAM_TOY=float 
1436: 	 * (in ):PARAM_STEPCOUNT=int 
1437: 	 * </pre>
1438: 	 * @throws RemoteException -- if remote execution raised an Exception
1439: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1440: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1441: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1442: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1443: 	 * @see #_last_remote_result
1444: 	 * @see Message
1445: 	 */
1446: 	public boolean drag(float fromX, float toX, float fromY, float toY, int stepCount) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1447: 		Properties props = prepSoloDispatch(Message.cmd_drag);
1448: 		props.setProperty(Message.PARAM_FROMX, String.valueOf(fromX));
1449: 		props.setProperty(Message.PARAM_TOX, String.valueOf(toX));
1450: 		props.setProperty(Message.PARAM_FROMY, String.valueOf(fromY));
1451: 		props.setProperty(Message.PARAM_TOY, String.valueOf(toY));
1452: 		props.setProperty(Message.PARAM_STEPCOUNT, String.valueOf(stepCount));
1453: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1454: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1455: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1456: 		catch(NumberFormatException e){}
1457: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1458: 	}
1459: 	
1460: 	/**
1461: 	 * Enter text into a given EditText.
1462: 	 * @param String UID reference for the EditText to enter text into. 
1463: 	 * @param text String to enter into the EditText field.
1464: 	 * @return true if the command executed successfully, false if it did not.  
1465: 	 * Field _last_remote_result contains the returned Properties object.
1466: 	 * <p>
1467: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1468: 	 * used here and in the device/emulator Robotium Test Runner.
1469: 	 * <p><pre>
1470: 	 * (in ):KEY_TARGET=target_solo
1471: 	 * (in ):KEY_COMMAND=cmd_entertextreference
1472: 	 * (out):KEY_ISREMOTERESULT=true
1473: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1474: 	 * (out):KEY_REMOTERESULTINFO=String  
1475: 	 * (in ):PARAM_REFERENCE=String UID 
1476: 	 * (in ):PARAM_TEXT=String 
1477: 	 * </pre>
1478: 	 * @throws RemoteException -- if remote execution raised an Exception
1479: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1480: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1481: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1482: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1483: 	 * @see #_last_remote_result
1484: 	 * @see Message
1485: 	 */
1486: 	public boolean enterText(String uidEditText, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1487: 		Properties props = prepSoloDispatch(Message.cmd_entertextreference);
1488: 		props.setProperty(Message.PARAM_REFERENCE, uidEditText);
1489: 		props.setProperty(Message.PARAM_TEXT, text);
1490: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1491: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1492: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1493: 		catch(NumberFormatException e){}
1494: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1495: 	}
1496: 	
1497: 	/**
1498: 	 * Enter text into an EditText with the given index.
1499: 	 * @param index of the EditText. 0 if only one is available. 
1500: 	 * @param text String to enter into the EditText field.
1501: 	 * @return true if the command executed successfully, false if it did not.  
1502: 	 * Field _last_remote_result contains the returned Properties object.
1503: 	 * <p>
1504: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1505: 	 * used here and in the device/emulator Robotium Test Runner.
1506: 	 * <p><pre>
1507: 	 * (in ):KEY_TARGET=target_solo
1508: 	 * (in ):KEY_COMMAND=cmd_entertextindex
1509: 	 * (out):KEY_ISREMOTERESULT=true
1510: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1511: 	 * (out):KEY_REMOTERESULTINFO=String  
1512: 	 * (in ):PARAM_INDEX=int 
1513: 	 * (in ):PARAM_TEXT=String 
1514: 	 * </pre>
1515: 	 * @throws RemoteException -- if remote execution raised an Exception
1516: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1517: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1518: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1519: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1520: 	 * @see #_last_remote_result
1521: 	 * @see Message
1522: 	 */
1523: 	public boolean enterText(int index, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1524: 		Properties props = prepSoloDispatch(Message.cmd_entertextindex);
1525: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
1526: 		props.setProperty(Message.PARAM_TEXT, text);
1527: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1528: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1529: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1530: 		catch(NumberFormatException e){}
1531: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
1532: 	}
1533: 
1534: 	/**
1535: 	 * Returns a String UID for the Robotium Solo Activity Monitor.  
1536: 	 * Not yet sure if we are going to do anything with it.
1537: 	 * @return String UID for ActivityMonitor.  
1538: 	 * Field _last_remote_result contains the returned Properties object.
1539: 	 * <p>
1540: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1541: 	 * used here and in the device/emulator Robotium Test Runner.
1542: 	 * <p><pre>
1543: 	 * (in ):KEY_TARGET=target_solo
1544: 	 * (in ):KEY_COMMAND=cmd_getactivitymonitor
1545: 	 * (out):KEY_ISREMOTERESULT=true
1546: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1547: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the stored object 
1548: 	 * </pre>
1549: 	 * @throws RemoteException -- if remote execution raised an Exception
1550: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1551: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1552: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1553: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1554: 	 * @see #_last_remote_result
1555: 	 * @see Message
1556: 	 */
1557: 	public String getActivityMonitor() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1558: 		String uid = null;
1559: 		Properties props = prepSoloDispatch(Message.cmd_getactivitymonitor);
1560: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1561: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1562: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1563: 		catch(NumberFormatException x){}
1564: 		if(rc==Message.STATUS_REMOTERESULT_OK){
1565: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
1566: 		}
1567: 		return uid;
1568: 	}
1569: 	
1570: 	/**
1571: 	 * Returns a String UID for the Button at the given index. 
1572: 	 * @param index of the Button to get.
1573: 	 * @return String UID for Button at the given index, or null if index is invalid.  
1574: 	 * Field _last_remote_result contains the returned Properties object.
1575: 	 * <p>
1576: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1577: 	 * used here and in the device/emulator Robotium Test Runner.
1578: 	 * <p><pre>
1579: 	 * (in ):KEY_TARGET=target_solo
1580: 	 * (in ):KEY_COMMAND=cmd_getbutton
1581: 	 * (out):KEY_ISREMOTERESULT=true
1582: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1583: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
1584: 	 * (in ):PARAM_INDEX=int
1585: 	 * </pre>
1586: 	 * @throws RemoteException -- if remote execution raised an Exception
1587: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1588: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1589: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1590: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1591: 	 * @see #_last_remote_result
1592: 	 * @see Message
1593: 	 */
1594: 	public String getButton(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1595: 		return getSingleObject(Message.cmd_getbutton, index);
1596: 	}
1597: 	
1598: 	/**
1599: 	 * Returns a String UID for the Button showing the given text.
1600: 	 * @param text that is shown. 
1601: 	 * @return String UID for Button showing the given text, or null if not found.  
1602: 	 * Field _last_remote_result contains the returned Properties object.
1603: 	 * <p>
1604: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1605: 	 * used here and in the device/emulator Robotium Test Runner.
1606: 	 * <p><pre>
1607: 	 * (in ):KEY_TARGET=target_solo
1608: 	 * (in ):KEY_COMMAND=cmd_getbuttontext
1609: 	 * (out):KEY_ISREMOTERESULT=true
1610: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1611: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
1612: 	 * (in ):PARAM_TEXT=String
1613: 	 * </pre>
1614: 	 * @throws RemoteException -- if remote execution raised an Exception
1615: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1616: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1617: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1618: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1619: 	 * @see #_last_remote_result
1620: 	 * @see Message
1621: 	 */
1622: 	public String getButton(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1623: 		return getSingleObject(Message.cmd_getbuttontext, text);
1624: 	}
1625: 	
1626: 	/**
1627: 	 * Returns a String UID for the Button showing the given text.
1628: 	 * @param text that is shown. 
1629: 	 * @param onlyVisible true if only visible buttons on the screen should be returned.
1630: 	 * @return String UID for visible Button with the given text, or null if not found.  
1631: 	 * Field _last_remote_result contains the returned Properties object.
1632: 	 * <p>
1633: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1634: 	 * used here and in the device/emulator Robotium Test Runner.
1635: 	 * <p><pre>
1636: 	 * (in ):KEY_TARGET=target_solo
1637: 	 * (in ):KEY_COMMAND=cmd_getbuttonvisible
1638: 	 * (out):KEY_ISREMOTERESULT=true
1639: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1640: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
1641: 	 * (in ):PARAM_TEXT=String
1642: 	 * (in ):PARAM_ONLYVISIBLE=true/false
1643: 	 * </pre>
1644: 	 * @throws RemoteException -- if remote execution raised an Exception
1645: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1646: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1647: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1648: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1649: 	 * @see #_last_remote_result
1650: 	 * @see Message
1651: 	 */
1652: 	public String getButton(String text, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1653: 		String uid = null;
1654: 		Properties props = prepSoloDispatch(Message.cmd_getbuttonvisible);
1655: 		props.setProperty(Message.PARAM_TEXT, text);
1656: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
1657: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
1658: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
1659: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
1660: 		catch(NumberFormatException x){}
1661: 		if(rc==Message.STATUS_REMOTERESULT_OK){
1662: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
1663: 		}
1664: 		return uid;
1665: 	}
1666: 	
1667: 	/**
1668: 	 * Returns an ArrayList of String UIDs for all the current Buttons in the focused Activity or Dialog. 
1669: 	 * @return ArrayList of 0 or more String UIDs for all the current Buttons shown in the focused window.  
1670: 	 * Field _last_remote_result contains the returned Properties object.
1671: 	 * <p>
1672: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1673: 	 * used here and in the device/emulator Robotium Test Runner.
1674: 	 * <p><pre>
1675: 	 * (in ):KEY_TARGET=target_solo
1676: 	 * (in ):KEY_COMMAND=cmd_getcurrentbuttons
1677: 	 * (out):KEY_ISREMOTERESULT=true
1678: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1679: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1680: 	 * stored in a remote cache.
1681: 	 * <p>
1682: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1683: 	 * <p>
1684: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1685: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1686: 	 * </pre>
1687: 	 * @throws RemoteException -- if remote execution raised an Exception
1688: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1689: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1690: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1691: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1692: 	 * @see #_last_remote_result
1693: 	 * @see Message
1694: 	 */
1695: 	public ArrayList getCurrentButtons() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1696: 		return getCurrentObjects(Message.cmd_getcurrentbuttons);
1697: 	}
1698: 	
1699: 	/**
1700: 	 * Returns an ArrayList of String UIDs for all the current CheckBoxes in the focused Activity or Dialog. 
1701: 	 * @return ArrayList of 0 or more String UIDs for all the current CheckBoxes shown in the focused window.  
1702: 	 * Field _last_remote_result contains the returned Properties object.
1703: 	 * <p>
1704: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1705: 	 * used here and in the device/emulator Robotium Test Runner.
1706: 	 * <p><pre>
1707: 	 * (in ):KEY_TARGET=target_solo
1708: 	 * (in ):KEY_COMMAND=cmd_getcurrentcheckboxes
1709: 	 * (out):KEY_ISREMOTERESULT=true
1710: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1711: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1712: 	 * stored in a remote cache.
1713: 	 * <p>
1714: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1715: 	 * <p>
1716: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1717: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1718: 	 * </pre>
1719: 	 * @throws RemoteException -- if remote execution raised an Exception
1720: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1721: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1722: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1723: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1724: 	 * @see #_last_remote_result
1725: 	 * @see Message
1726: 	 */
1727: 	public ArrayList getCurrentCheckBoxes() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1728: 		return getCurrentObjects(Message.cmd_getcurrentcheckboxes);
1729: 	}
1730: 	
1731: 	/**
1732: 	 * Returns an ArrayList of String UIDs for all the current DatePickers in the focused Activity or Dialog. 
1733: 	 * @return ArrayList of 0 or more String UIDs for all the current DatePickers shown in the focused window.  
1734: 	 * Field _last_remote_result contains the returned Properties object.
1735: 	 * <p>
1736: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1737: 	 * used here and in the device/emulator Robotium Test Runner.
1738: 	 * <p><pre>
1739: 	 * (in ):KEY_TARGET=target_solo
1740: 	 * (in ):KEY_COMMAND=cmd_getcurrentdatepickers
1741: 	 * (out):KEY_ISREMOTERESULT=true
1742: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1743: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1744: 	 * stored in a remote cache.
1745: 	 * <p>
1746: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1747: 	 * <p>
1748: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1749: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1750: 	 * </pre>
1751: 	 * @throws RemoteException -- if remote execution raised an Exception
1752: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1753: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1754: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1755: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1756: 	 * @see #_last_remote_result
1757: 	 * @see Message
1758: 	 */
1759: 	public ArrayList getCurrentDatePickers() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1760: 		return getCurrentObjects(Message.cmd_getcurrentdatepickers);
1761: 	}
1762: 	
1763: 	/**
1764: 	 * Returns an ArrayList of String UIDs for all the current EditTexts in the focused Activity or Dialog. 
1765: 	 * @return ArrayList of 0 or more String UIDs for all the current EditTexts shown in the focused window.  
1766: 	 * Field _last_remote_result contains the returned Properties object.
1767: 	 * <p>
1768: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1769: 	 * used here and in the device/emulator Robotium Test Runner.
1770: 	 * <p><pre>
1771: 	 * (in ):KEY_TARGET=target_solo
1772: 	 * (in ):KEY_COMMAND=cmd_getcurrentedittexts
1773: 	 * (out):KEY_ISREMOTERESULT=true
1774: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1775: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1776: 	 * stored in a remote cache.
1777: 	 * <p>
1778: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1779: 	 * <p>
1780: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1781: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1782: 	 * </pre>
1783: 	 * @throws RemoteException -- if remote execution raised an Exception
1784: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1785: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1786: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1787: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1788: 	 * @see #_last_remote_result
1789: 	 * @see Message
1790: 	 */
1791: 	public ArrayList getCurrentEditTexts() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1792: 		return getCurrentObjects(Message.cmd_getcurrentedittexts);
1793: 	}
1794: 	
1795: 	/**
1796: 	 * Returns an ArrayList of String UIDs for all the current GridViews in the focused Activity or Dialog. 
1797: 	 * @return ArrayList of 0 or more String UIDs for all the current GridViews shown in the focused window.  
1798: 	 * Field _last_remote_result contains the returned Properties object.
1799: 	 * <p>
1800: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1801: 	 * used here and in the device/emulator Robotium Test Runner.
1802: 	 * <p><pre>
1803: 	 * (in ):KEY_TARGET=target_solo
1804: 	 * (in ):KEY_COMMAND=cmd_getcurrentgridviews
1805: 	 * (out):KEY_ISREMOTERESULT=true
1806: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1807: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1808: 	 * stored in a remote cache.
1809: 	 * <p>
1810: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1811: 	 * <p>
1812: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1813: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1814: 	 * </pre>
1815: 	 * @throws RemoteException -- if remote execution raised an Exception
1816: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1817: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1818: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1819: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1820: 	 * @see #_last_remote_result
1821: 	 * @see Message
1822: 	 */
1823: 	public ArrayList getCurrentGridViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1824: 		return getCurrentObjects(Message.cmd_getcurrentgridviews);
1825: 	}
1826: 	
1827: 	/**
1828: 	 * Returns an ArrayList of String UIDs for all the current ImageButtons in the focused Activity or Dialog. 
1829: 	 * @return ArrayList of 0 or more String UIDs for all the current ImageButtons shown in the focused window.  
1830: 	 * Field _last_remote_result contains the returned Properties object.
1831: 	 * <p>
1832: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1833: 	 * used here and in the device/emulator Robotium Test Runner.
1834: 	 * <p><pre>
1835: 	 * (in ):KEY_TARGET=target_solo
1836: 	 * (in ):KEY_COMMAND=cmd_getcurrentimagebuttons
1837: 	 * (out):KEY_ISREMOTERESULT=true
1838: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1839: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1840: 	 * stored in a remote cache.
1841: 	 * <p>
1842: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1843: 	 * <p>
1844: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1845: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1846: 	 * </pre>
1847: 	 * @throws RemoteException -- if remote execution raised an Exception
1848: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1849: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1850: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1851: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1852: 	 * @see #_last_remote_result
1853: 	 * @see Message
1854: 	 */
1855: 	public ArrayList getCurrentImageButtons() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1856: 		return getCurrentObjects(Message.cmd_getcurrentimagebuttons);
1857: 	}
1858: 	
1859: 	/**
1860: 	 * Returns an ArrayList of String UIDs for all the current ImageViews in the focused Activity or Dialog. 
1861: 	 * @return ArrayList of 0 or more String UIDs for all the current ImageViews shown in the focused window.  
1862: 	 * Field _last_remote_result contains the returned Properties object.
1863: 	 * <p>
1864: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1865: 	 * used here and in the device/emulator Robotium Test Runner.
1866: 	 * <p><pre>
1867: 	 * (in ):KEY_TARGET=target_solo
1868: 	 * (in ):KEY_COMMAND=cmd_getcurrentimageviews
1869: 	 * (out):KEY_ISREMOTERESULT=true
1870: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1871: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1872: 	 * stored in a remote cache.
1873: 	 * <p>
1874: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1875: 	 * <p>
1876: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1877: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1878: 	 * </pre>
1879: 	 * @throws RemoteException -- if remote execution raised an Exception
1880: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1881: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1882: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1883: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1884: 	 * @see #_last_remote_result
1885: 	 * @see Message
1886: 	 */
1887: 	public ArrayList getCurrentImageViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1888: 		return getCurrentObjects(Message.cmd_getcurrentimageviews);
1889: 	}
1890: 	
1891: 	/**
1892: 	 * Returns an ArrayList of String UIDs for all the current ListViews in the focused Activity or Dialog. 
1893: 	 * @return ArrayList of 0 or more String UIDs for all the current ListViews shown in the focused window.  
1894: 	 * Field _last_remote_result contains the returned Properties object.
1895: 	 * <p>
1896: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1897: 	 * used here and in the device/emulator Robotium Test Runner.
1898: 	 * <p><pre>
1899: 	 * (in ):KEY_TARGET=target_solo
1900: 	 * (in ):KEY_COMMAND=cmd_getcurrentlistviews
1901: 	 * (out):KEY_ISREMOTERESULT=true
1902: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1903: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1904: 	 * stored in a remote cache.
1905: 	 * <p>
1906: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1907: 	 * <p>
1908: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1909: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1910: 	 * </pre>
1911: 	 * @throws RemoteException -- if remote execution raised an Exception
1912: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1913: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1914: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1915: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1916: 	 * @see #_last_remote_result
1917: 	 * @see Message
1918: 	 */
1919: 	public ArrayList getCurrentListViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1920: 		return getCurrentObjects(Message.cmd_getcurrentlistviews);
1921: 	}
1922: 	
1923: 	/**
1924: 	 * Returns an ArrayList of String UIDs for all the current ProgressBars in the focused Activity or Dialog. 
1925: 	 * @return ArrayList of 0 or more String UIDs for all the current ProgressBars shown in the focused window.  
1926: 	 * Field _last_remote_result contains the returned Properties object.
1927: 	 * <p>
1928: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1929: 	 * used here and in the device/emulator Robotium Test Runner.
1930: 	 * <p><pre>
1931: 	 * (in ):KEY_TARGET=target_solo
1932: 	 * (in ):KEY_COMMAND=cmd_getcurrentprogressbars
1933: 	 * (out):KEY_ISREMOTERESULT=true
1934: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1935: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1936: 	 * stored in a remote cache.
1937: 	 * <p>
1938: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1939: 	 * <p>
1940: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1941: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1942: 	 * </pre>
1943: 	 * @throws RemoteException -- if remote execution raised an Exception
1944: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1945: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1946: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1947: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1948: 	 * @see #_last_remote_result
1949: 	 * @see Message
1950: 	 */
1951: 	public ArrayList getCurrentProgressBars() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1952: 		return getCurrentObjects(Message.cmd_getcurrentprogressbars);
1953: 	}
1954: 	
1955: 	/**
1956: 	 * Returns an ArrayList of String UIDs for all the current RadioButtons in the focused Activity or Dialog. 
1957: 	 * @return ArrayList of 0 or more String UIDs for all the current RadioButtons shown in the focused window.  
1958: 	 * Field _last_remote_result contains the returned Properties object.
1959: 	 * <p>
1960: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1961: 	 * used here and in the device/emulator Robotium Test Runner.
1962: 	 * <p><pre>
1963: 	 * (in ):KEY_TARGET=target_solo
1964: 	 * (in ):KEY_COMMAND=cmd_getcurrentradiobuttons
1965: 	 * (out):KEY_ISREMOTERESULT=true
1966: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1967: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
1968: 	 * stored in a remote cache.
1969: 	 * <p>
1970: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
1971: 	 * <p>
1972: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
1973: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
1974: 	 * </pre>
1975: 	 * @throws RemoteException -- if remote execution raised an Exception
1976: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
1977: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
1978: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
1979: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
1980: 	 * @see #_last_remote_result
1981: 	 * @see Message
1982: 	 */
1983: 	public ArrayList getCurrentRadioButtons() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
1984: 		return getCurrentObjects(Message.cmd_getcurrentradiobuttons);
1985: 	}
1986: 	
1987: 	/**
1988: 	 * Returns an ArrayList of String UIDs for all the current ScrollViews in the focused Activity or Dialog. 
1989: 	 * @return ArrayList of 0 or more String UIDs for all the current ScrollViews shown in the focused window.  
1990: 	 * Field _last_remote_result contains the returned Properties object.
1991: 	 * <p>
1992: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
1993: 	 * used here and in the device/emulator Robotium Test Runner.
1994: 	 * <p><pre>
1995: 	 * (in ):KEY_TARGET=target_solo
1996: 	 * (in ):KEY_COMMAND=cmd_getcurrentscrollviews
1997: 	 * (out):KEY_ISREMOTERESULT=true
1998: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
1999: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2000: 	 * stored in a remote cache.
2001: 	 * <p>
2002: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2003: 	 * <p>
2004: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2005: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2006: 	 * </pre>
2007: 	 * @throws RemoteException -- if remote execution raised an Exception
2008: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2009: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2010: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2011: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2012: 	 * @see #_last_remote_result
2013: 	 * @see Message
2014: 	 */
2015: 	public ArrayList getCurrentScrollViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2016: 		return getCurrentObjects(Message.cmd_getcurrentscrollviews);
2017: 	}
2018: 	
2019: 	/**
2020: 	 * Returns an ArrayList of String UIDs for all the current SlidingDrawers in the focused Activity or Dialog. 
2021: 	 * @return ArrayList of 0 or more String UIDs for all the current SlidingDrawers shown in the focused window.  
2022: 	 * Field _last_remote_result contains the returned Properties object.
2023: 	 * <p>
2024: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2025: 	 * used here and in the device/emulator Robotium Test Runner.
2026: 	 * <p><pre>
2027: 	 * (in ):KEY_TARGET=target_solo
2028: 	 * (in ):KEY_COMMAND=cmd_getcurrentslidingdrawers
2029: 	 * (out):KEY_ISREMOTERESULT=true
2030: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2031: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2032: 	 * stored in a remote cache.
2033: 	 * <p>
2034: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2035: 	 * <p>
2036: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2037: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2038: 	 * </pre>
2039: 	 * @throws RemoteException -- if remote execution raised an Exception
2040: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2041: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2042: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2043: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2044: 	 * @see #_last_remote_result
2045: 	 * @see Message
2046: 	 */
2047: 	public ArrayList getCurrentSlidingDrawers() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2048: 		return getCurrentObjects(Message.cmd_getcurrentslidingdrawers);
2049: 	}
2050: 	
2051: 	/**
2052: 	 * Returns an ArrayList of String UIDs for all the current Spinners in the focused Activity or Dialog. 
2053: 	 * @return ArrayList of 0 or more String UIDs for all the current Spinners shown in the focused window.  
2054: 	 * Field _last_remote_result contains the returned Properties object.
2055: 	 * <p>
2056: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2057: 	 * used here and in the device/emulator Robotium Test Runner.
2058: 	 * <p><pre>
2059: 	 * (in ):KEY_TARGET=target_solo
2060: 	 * (in ):KEY_COMMAND=cmd_getcurrentspinners
2061: 	 * (out):KEY_ISREMOTERESULT=true
2062: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2063: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2064: 	 * stored in a remote cache.
2065: 	 * <p>
2066: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2067: 	 * <p>
2068: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2069: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2070: 	 * </pre>
2071: 	 * @throws RemoteException -- if remote execution raised an Exception
2072: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2073: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2074: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2075: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2076: 	 * @see #_last_remote_result
2077: 	 * @see Message
2078: 	 */
2079: 	public ArrayList getCurrentSpinners() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2080: 		return getCurrentObjects(Message.cmd_getcurrentspinners);
2081: 	}
2082: 	
2083: 	/**
2084: 	 * Returns an ArrayList of String UIDs for all the current TextViews in the focused Activity or Dialog. 
2085: 	 * @return ArrayList of 0 or more String UIDs for all the current TextViews shown in the focused window.  
2086: 	 * Field _last_remote_result contains the returned Properties object.
2087: 	 * <p>
2088: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2089: 	 * used here and in the device/emulator Robotium Test Runner.
2090: 	 * <p><pre>
2091: 	 * (in ):KEY_TARGET=target_solo
2092: 	 * (in ):KEY_COMMAND=cmd_getcurrenttextviews
2093: 	 * (out):KEY_ISREMOTERESULT=true
2094: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2095: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2096: 	 * stored in a remote cache.
2097: 	 * <p>
2098: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2099: 	 * <p>
2100: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2101: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2102: 	 * </pre>
2103: 	 * @throws RemoteException -- if remote execution raised an Exception
2104: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2105: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2106: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2107: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2108: 	 * @see #_last_remote_result
2109: 	 * @see Message
2110: 	 */
2111: 	public ArrayList getCurrentTextViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2112: 		return getCurrentObjects(Message.cmd_getcurrenttextviews);
2113: 	}
2114: 	
2115: 	/**
2116: 	 * Returns an ArrayList of String UIDs for all the current TimePickers in the focused Activity or Dialog. 
2117: 	 * @return ArrayList of 0 or more String UIDs for all the current TimePickers shown in the focused window.  
2118: 	 * Field _last_remote_result contains the returned Properties object.
2119: 	 * <p>
2120: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2121: 	 * used here and in the device/emulator Robotium Test Runner.
2122: 	 * <p><pre>
2123: 	 * (in ):KEY_TARGET=target_solo
2124: 	 * (in ):KEY_COMMAND=cmd_getcurrenttimepickers
2125: 	 * (out):KEY_ISREMOTERESULT=true
2126: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2127: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2128: 	 * stored in a remote cache.
2129: 	 * <p>
2130: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2131: 	 * <p>
2132: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2133: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2134: 	 * </pre>
2135: 	 * @throws RemoteException -- if remote execution raised an Exception
2136: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2137: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2138: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2139: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2140: 	 * @see #_last_remote_result
2141: 	 * @see Message
2142: 	 */
2143: 	public ArrayList getCurrentTimePickers() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2144: 		return getCurrentObjects(Message.cmd_getcurrenttimepickers);
2145: 	}
2146: 	
2147: 	/**
2148: 	 * Returns an ArrayList of String UIDs for all the current NumberPickers in the focused Activity or Dialog. 
2149: 	 * @return ArrayList of 0 or more String UIDs for all the current NumberPickers shown in the focused window.  
2150: 	 * Field _last_remote_result contains the returned Properties object.
2151: 	 * <p>
2152: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2153: 	 * used here and in the device/emulator Robotium Test Runner.
2154: 	 * <p><pre>
2155: 	 * (in ):KEY_TARGET=target_solo
2156: 	 * (in ):KEY_COMMAND=cmd_getcurrenttimepickers
2157: 	 * (out):KEY_ISREMOTERESULT=true
2158: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2159: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2160: 	 * stored in a remote cache.
2161: 	 * <p>
2162: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2163: 	 * <p>
2164: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2165: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2166: 	 * </pre>
2167: 	 * @throws RemoteException -- if remote execution raised an Exception
2168: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2169: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2170: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2171: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2172: 	 * @see #_last_remote_result
2173: 	 * @see Message
2174: 	 */
2175: 	public ArrayList getCurrentNumberPickers() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2176: 		return getCurrentObjects(Message.cmd_getcurrentnumberpickers);
2177: 	}
2178: 	
2179: 	/**
2180: 	 * Returns an ArrayList of String UIDs for all the current ToggleButtons in the focused Activity or Dialog. 
2181: 	 * @return ArrayList of 0 or more String UIDs for all the current ToggleButtons shown in the focused window.  
2182: 	 * Field _last_remote_result contains the returned Properties object.
2183: 	 * <p>
2184: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2185: 	 * used here and in the device/emulator Robotium Test Runner.
2186: 	 * <p><pre>
2187: 	 * (in ):KEY_TARGET=target_solo
2188: 	 * (in ):KEY_COMMAND=cmd_getcurrenttogglebuttons
2189: 	 * (out):KEY_ISREMOTERESULT=true
2190: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2191: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2192: 	 * stored in a remote cache.
2193: 	 * <p>
2194: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2195: 	 * <p>
2196: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2197: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2198: 	 * </pre>
2199: 	 * @throws RemoteException -- if remote execution raised an Exception
2200: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2201: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2202: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2203: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2204: 	 * @see #_last_remote_result
2205: 	 * @see Message
2206: 	 */
2207: 	public ArrayList getCurrentToggleButtons() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2208: 		return getCurrentObjects(Message.cmd_getcurrenttogglebuttons);
2209: 	}
2210: 	
2211: 	/**
2212: 	 * Returns an ArrayList of String UIDs for all the current Views in the focused Activity or Dialog. 
2213: 	 * @return ArrayList of 0 or more String UIDs for all the current Views shown in the focused window.  
2214: 	 * Field _last_remote_result contains the returned Properties object.
2215: 	 * <p>
2216: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2217: 	 * used here and in the device/emulator Robotium Test Runner.
2218: 	 * <p><pre>
2219: 	 * (in ):KEY_TARGET=target_solo
2220: 	 * (in ):KEY_COMMAND=cmd_getcurrentviews
2221: 	 * (out):KEY_ISREMOTERESULT=true
2222: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2223: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2224: 	 * stored in a remote cache.
2225: 	 * <p>
2226: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2227: 	 * <p>
2228: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2229: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2230: 	 * </pre>
2231: 	 * @throws RemoteException -- if remote execution raised an Exception
2232: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2233: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2234: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2235: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2236: 	 * @see #_last_remote_result
2237: 	 * @see Message
2238: 	 */
2239: 	public ArrayList getCurrentViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2240: 		return getCurrentObjects(Message.cmd_getcurrentviews);
2241: 	}
2242: 	
2243: 	/**
2244: 	 * Returns a String UID for the EditText at the given index.
2245: 	 * @param index of the EditText. 0 if only one is available. 
2246: 	 * @return String UID for EditText at the given index, or null if index is invalid.  
2247: 	 * Field _last_remote_result contains the returned Properties object.
2248: 	 * <p>
2249: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2250: 	 * used here and in the device/emulator Robotium Test Runner.
2251: 	 * <p><pre>
2252: 	 * (in ):KEY_TARGET=target_solo
2253: 	 * (in ):KEY_COMMAND=cmd_getedittext
2254: 	 * (out):KEY_ISREMOTERESULT=true
2255: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2256: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2257: 	 * (in ):PARAM_INDEX=int
2258: 	 * </pre>
2259: 	 * @throws RemoteException -- if remote execution raised an Exception
2260: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2261: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2262: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2263: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2264: 	 * @see #_last_remote_result
2265: 	 * @see Message
2266: 	 */
2267: 	public String getEditText(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2268: 		return getSingleObject(Message.cmd_getedittext, index);
2269: 	}
2270: 	
2271: 	/**
2272: 	 * Returns a String UID for the EditText item with the given text. 
2273: 	 * @param text that is shown
2274: 	 * @return String UID for EditText, or null if given text was not found.  
2275: 	 * Field _last_remote_result contains the returned Properties object.
2276: 	 * <p>
2277: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2278: 	 * used here and in the device/emulator Robotium Test Runner.
2279: 	 * <p><pre>
2280: 	 * (in ):KEY_TARGET=target_solo
2281: 	 * (in ):KEY_COMMAND=cmd_getedittexttext
2282: 	 * (out):KEY_ISREMOTERESULT=true
2283: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2284: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2285: 	 * stored in remote cache. 
2286: 	 * (in ):PARAM_TEXT=String
2287: 	 * </pre>
2288: 	 * @throws RemoteException -- if remote execution raised an Exception
2289: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2290: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2291: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2292: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2293: 	 * @see #_last_remote_result
2294: 	 * @see Message
2295: 	 */
2296: 	public String getEditText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2297: 		return getSingleObject(Message.cmd_getedittexttext, text);
2298: 	}
2299: 	
2300: 	/**
2301: 	 * Returns a String UID for the EditText item with the given text. 
2302: 	 * @param text that is shown
2303: 	 * @param onlyVisible true if only visible EditTexts on the screen should be returned.
2304: 	 * @return String UID for EditText, or null if given text was not found.  
2305: 	 * Field _last_remote_result contains the returned Properties object.
2306: 	 * <p>
2307: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2308: 	 * used here and in the device/emulator Robotium Test Runner.
2309: 	 * <p><pre>
2310: 	 * (in ):KEY_TARGET=target_solo
2311: 	 * (in ):KEY_COMMAND=cmd_getedittextvisible
2312: 	 * (out):KEY_ISREMOTERESULT=true
2313: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2314: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2315: 	 * stored in remote cache. 
2316: 	 * (in ):PARAM_TEXT=String
2317: 	 * (in ):PARAM_ONLYVISIBLE=true/false
2318: 	 * </pre>
2319: 	 * @throws RemoteException -- if remote execution raised an Exception
2320: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2321: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2322: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2323: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2324: 	 * @see #_last_remote_result
2325: 	 * @see Message
2326: 	 */
2327: 	public String getEditText(String text, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2328: 		String uid = null;
2329: 		Properties props = prepSoloDispatch(Message.cmd_getedittextvisible);
2330: 		props.setProperty(Message.PARAM_TEXT, text);
2331: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
2332: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2333: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2334: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2335: 		catch(NumberFormatException x){}
2336: 		if(rc==Message.STATUS_REMOTERESULT_OK){
2337: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
2338: 		}
2339: 		return uid;
2340: 	}
2341: 	
2342: 	/**
2343: 	 * Returns a String UID for the Image at the given index.
2344: 	 * @param index of the Image.  0 if only one is available. 
2345: 	 * @return String UID for Image at the given index, or null if index is invalid.  
2346: 	 * Field _last_remote_result contains the returned Properties object.
2347: 	 * <p>
2348: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2349: 	 * used here and in the device/emulator Robotium Test Runner.
2350: 	 * <p><pre>
2351: 	 * (in ):KEY_TARGET=target_solo
2352: 	 * (in ):KEY_COMMAND=cmd_getimage
2353: 	 * (out):KEY_ISREMOTERESULT=true
2354: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2355: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2356: 	 * (in ):PARAM_INDEX=int
2357: 	 * </pre>
2358: 	 * @throws RemoteException -- if remote execution raised an Exception
2359: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2360: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2361: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2362: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2363: 	 * @see #_last_remote_result
2364: 	 * @see Message
2365: 	 */
2366: 	public String getImage(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2367: 		return getSingleObject(Message.cmd_getimage, index);
2368: 	}
2369: 	
2370: 	/**
2371: 	 * Returns a String UID for the ImageButton at the given index. 
2372: 	 * @param index of the ImageButton.  0 if only one is available. 
2373: 	 * @return String UID for ImageButton at the given index, or null if index is invalid.  
2374: 	 * Field _last_remote_result contains the returned Properties object.
2375: 	 * <p>
2376: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2377: 	 * used here and in the device/emulator Robotium Test Runner.
2378: 	 * <p><pre>
2379: 	 * (in ):KEY_TARGET=target_solo
2380: 	 * (in ):KEY_COMMAND=cmd_getimagebutton
2381: 	 * (out):KEY_ISREMOTERESULT=true
2382: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2383: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2384: 	 * (in ):PARAM_INDEX=int
2385: 	 * </pre>
2386: 	 * @throws RemoteException -- if remote execution raised an Exception
2387: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2388: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2389: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2390: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2391: 	 * @see #_last_remote_result
2392: 	 * @see Message
2393: 	 */
2394: 	public String getImageButton(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2395: 		return getSingleObject(Message.cmd_getimagebutton, index);
2396: 	}
2397: 	
2398: 	/**
2399: 	 * Returns a String UID for the Text at the given index.
2400: 	 * @param index of the Text View. 0 if only one is available.
2401: 	 * @return String UID for Text at the given index, or null if index is invalid.  
2402: 	 * Field _last_remote_result contains the returned Properties object.
2403: 	 * <p>
2404: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2405: 	 * used here and in the device/emulator Robotium Test Runner.
2406: 	 * <p><pre>
2407: 	 * (in ):KEY_TARGET=target_solo
2408: 	 * (in ):KEY_COMMAND=cmd_gettext
2409: 	 * (out):KEY_ISREMOTERESULT=true
2410: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2411: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2412: 	 * (in ):PARAM_INDEX=int
2413: 	 * </pre>
2414: 	 * @throws RemoteException -- if remote execution raised an Exception
2415: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2416: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2417: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2418: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2419: 	 * @see #_last_remote_result
2420: 	 * @see Message
2421: 	 */
2422: 	public String getText(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2423: 		return getSingleObject(Message.cmd_gettext, index);
2424: 	}
2425: 	
2426: 	/**
2427: 	 * Returns a String UID for the Text item with the given text. 
2428: 	 * @param text that is shown
2429: 	 * @return String UID for Text, or null if given text was not found.  
2430: 	 * Field _last_remote_result contains the returned Properties object.
2431: 	 * <p>
2432: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2433: 	 * used here and in the device/emulator Robotium Test Runner.
2434: 	 * <p><pre>
2435: 	 * (in ):KEY_TARGET=target_solo
2436: 	 * (in ):KEY_COMMAND=cmd_getetexttext
2437: 	 * (out):KEY_ISREMOTERESULT=true
2438: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2439: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2440: 	 * stored in remote cache. 
2441: 	 * (in ):PARAM_TEXT=String
2442: 	 * </pre>
2443: 	 * @throws RemoteException -- if remote execution raised an Exception
2444: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2445: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2446: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2447: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2448: 	 * @see #_last_remote_result
2449: 	 * @see Message
2450: 	 */
2451: 	public String getText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2452: 		return getSingleObject(Message.cmd_gettexttext, text);
2453: 	}
2454: 	
2455: 	/**
2456: 	 * Returns a String UID for the Text item with the given text. 
2457: 	 * @param text that is shown
2458: 	 * @param onlyVisible tru if only visible Texts on the screen should be shown.
2459: 	 * @return String UID for Text, or null if given text was not found.  
2460: 	 * Field _last_remote_result contains the returned Properties object.
2461: 	 * <p>
2462: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2463: 	 * used here and in the device/emulator Robotium Test Runner.
2464: 	 * <p><pre>
2465: 	 * (in ):KEY_TARGET=target_solo
2466: 	 * (in ):KEY_COMMAND=cmd_gettextvisible
2467: 	 * (out):KEY_ISREMOTERESULT=true
2468: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2469: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2470: 	 * stored in remote cache. 
2471: 	 * (in ):PARAM_TEXT=String
2472: 	 * (in ):PARAM_ONLYVISIBLE=true/false
2473: 	 * </pre>
2474: 	 * @throws RemoteException -- if remote execution raised an Exception
2475: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2476: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2477: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2478: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2479: 	 * @see #_last_remote_result
2480: 	 * @see Message
2481: 	 */
2482: 	public String getText(String text, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2483: 		String uid = null;
2484: 		Properties props = prepSoloDispatch(Message.cmd_gettextvisible);
2485: 		props.setProperty(Message.PARAM_TEXT, text);
2486: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
2487: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2488: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2489: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2490: 		catch(NumberFormatException x){}
2491: 		if(rc==Message.STATUS_REMOTERESULT_OK){
2492: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
2493: 		}
2494: 		return uid;
2495: 	}
2496: 	
2497: 	/**
2498: 	 * Returns the absolute top parent View for a given View. 
2499: 	 * @param uidView the String UID Reference whose top parent is requested.
2500: 	 * @return String UID for the top parent View, or null if not found.  
2501: 	 * Field _last_remote_result contains the returned Properties object.
2502: 	 * <p>
2503: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2504: 	 * used here and in the device/emulator Robotium Test Runner.
2505: 	 * <p><pre>
2506: 	 * (in ):KEY_TARGET=target_solo
2507: 	 * (in ):KEY_COMMAND=cmd_gettopparent
2508: 	 * (out):KEY_ISREMOTERESULT=true
2509: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2510: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2511: 	 * stored in remote cache. 
2512: 	 * (in ):PARAM_REFERENCE=String
2513: 	 * (out):PARAM_CLASS=String The top parent View's full qualified class name
2514: 	 * </pre>
2515: 	 * @throws RemoteException -- if remote execution raised an Exception
2516: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2517: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2518: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2519: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2520: 	 * @see #_last_remote_result
2521: 	 * @see Message
2522: 	 */
2523: 	public String getTopParent(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2524: 		String uid = null;
2525: 		Properties props = prepSoloDispatch(Message.cmd_gettopparent);
2526: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
2527: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2528: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2529: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2530: 		catch(NumberFormatException x){}
2531: 		if(rc==Message.STATUS_REMOTERESULT_OK){
2532: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
2533: 		}
2534: 		return uid;
2535: 	}
2536: 	
2537: 	/**
2538: 	 * Returns a View of a given class and index. 
2539: 	 * @param classname of the requested View.
2540: 	 * @param index of the View. 0 if only one is available.
2541: 	 * @return String UID for the View, or null if not found.  
2542: 	 * Field _last_remote_result contains the returned Properties object.
2543: 	 * <p>
2544: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2545: 	 * used here and in the device/emulator Robotium Test Runner.
2546: 	 * <p><pre>
2547: 	 * (in ):KEY_TARGET=target_solo
2548: 	 * (in ):KEY_COMMAND=cmd_getviewclass
2549: 	 * (out):KEY_ISREMOTERESULT=true
2550: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2551: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2552: 	 * stored in remote cache. 
2553: 	 * (in ):PARAM_CLASS=String classname
2554: 	 * (in ):PARAM_INDEX=int
2555: 	 * </pre>
2556: 	 * @throws RemoteException -- if remote execution raised an Exception
2557: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2558: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2559: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2560: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2561: 	 * @see #_last_remote_result
2562: 	 * @see Message
2563: 	 */
2564: 	public String getView(String classname, int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2565: 		String uid = null;
2566: 		Properties props = prepSoloDispatch(Message.cmd_getviewclass);
2567: 		props.setProperty(Message.PARAM_CLASS, classname);
2568: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
2569: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2570: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2571: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2572: 		catch(NumberFormatException x){}
2573: 		if(rc==Message.STATUS_REMOTERESULT_OK){
2574: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
2575: 		}
2576: 		return uid;
2577: 	}
2578: 	
2579: 	/**
2580: 	 * Returns a View with the given id. 
2581: 	 * @param id the R.id of the View to be returned.
2582: 	 * @return String UID for the View, or null if not found.  
2583: 	 * Field _last_remote_result contains the returned Properties object.
2584: 	 * <p>
2585: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2586: 	 * used here and in the device/emulator Robotium Test Runner.
2587: 	 * <p><pre>
2588: 	 * (in ):KEY_TARGET=target_solo
2589: 	 * (in ):KEY_COMMAND=cmd_getviewid
2590: 	 * (out):KEY_ISREMOTERESULT=true
2591: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2592: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference for the actual object 
2593: 	 * stored in remote cache.
2594: 	 * (out):PARAM_CLASS=String full Classname of the actual View. 
2595: 	 * (in ):PARAM_ID=int
2596: 	 * </pre>
2597: 	 * @throws RemoteException -- if remote execution raised an Exception
2598: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2599: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2600: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2601: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2602: 	 * @see #_last_remote_result
2603: 	 * @see Message
2604: 	 */
2605: 	public String getView(int id) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2606: 		String uid = null;
2607: 		Properties props = prepSoloDispatch(Message.cmd_getviewid);
2608: 		props.setProperty(Message.PARAM_ID, String.valueOf(id));
2609: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2610: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2611: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2612: 		catch(NumberFormatException x){}
2613: 		if(rc==Message.STATUS_REMOTERESULT_OK){
2614: 			uid = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
2615: 		}
2616: 		return uid;
2617: 	}
2618: 	
2619: 	/**
2620: 	 * Returns an ArrayList of String UIDs for all the View objects located in the focused Activity or Dialog. 
2621: 	 * This is the same as {@link #getCurrentViews()}. 
2622: 	 * @return ArrayList of 0 or more String UIDs for all the opened/active Views.  
2623: 	 * Field _last_remote_result contains the returned Properties object.
2624: 	 * <p>
2625: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2626: 	 * used here and in the device/emulator Robotium Test Runner.
2627: 	 * <p><pre>
2628: 	 * (in ):KEY_TARGET=target_solo
2629: 	 * (in ):KEY_COMMAND=cmd_getcurrentviews
2630: 	 * (in ):PARAM_REFERENCE=String
2631: 	 * (out):KEY_ISREMOTERESULT=true
2632: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2633: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2634: 	 * stored in a remote cache.
2635: 	 * <p>
2636: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2637: 	 * <p>
2638: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2639: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2640: 	 * </pre>
2641: 	 * @throws RemoteException -- if remote execution raised an Exception
2642: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2643: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2644: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2645: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2646: 	 * @see #_last_remote_result
2647: 	 * @see Message
2648: 	 * @see #getCurrentViews()
2649: 	 */
2650: 	public ArrayList getViews() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2651: 		return this.getCurrentObjects(Message.cmd_getviews);
2652: 	}
2653: 	
2654: 	/**
2655: 	 * Returns an ArrayList of String UIDs for all the View objects contained in the parent View.
2656: 	 * @param parent String UID of the parent View from which to return the Views' String UIDs. 
2657: 	 * @return ArrayList of 0 or more String UIDs for all the View objects contained in the given View.  
2658: 	 * Field _last_remote_result contains the returned Properties object.
2659: 	 * <p>
2660: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2661: 	 * used here and in the device/emulator Robotium Test Runner.
2662: 	 * <p><pre>
2663: 	 * (in ):KEY_TARGET=target_solo
2664: 	 * (in ):KEY_COMMAND=cmd_getparentviews
2665: 	 * (in ):PARAM_REFERENCE=String
2666: 	 * (out):KEY_ISREMOTERESULT=true
2667: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2668: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
2669: 	 * stored in a remote cache.
2670: 	 * <p>
2671: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
2672: 	 * <p>
2673: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
2674: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
2675: 	 * </pre>
2676: 	 * @throws RemoteException -- if remote execution raised an Exception
2677: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2678: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2679: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2680: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2681: 	 * @see #_last_remote_result
2682: 	 * @see Message
2683: 	 */
2684: 	public ArrayList getViews(String uidParent) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
2685: 		ArrayList list = null;
2686: 		Properties props = prepSoloDispatch(Message.cmd_getparentviews);
2687: 		props.setProperty(Message.PARAM_REFERENCE, uidParent);
2688: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2689: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2690: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2691: 		catch(NumberFormatException x){}
2692: 		if(rc==Message.STATUS_REMOTERESULT_OK){
2693: 			list = parseStringArrayList(props.getProperty(Message.KEY_REMOTERESULTINFO));
2694: 		}
2695: 		return list;
2696: 	}
2697: 	
2698: 	/**
2699: 	 * Checks if the CheckBox with a given index is checked. 
2700: 	 * @param index of the CheckBox to check. 0 if only one is available.
2701: 	 * @return true if the object is checked. false if it is not.  
2702: 	 * Field _last_remote_result contains the returned Properties object.
2703: 	 * <p>
2704: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2705: 	 * used here and in the device/emulator Robotium Test Runner.
2706: 	 * <p><pre>
2707: 	 * (in ):KEY_TARGET=target_solo
2708: 	 * (in ):KEY_COMMAND=cmd_ischeckboxchecked
2709: 	 * (out):KEY_ISREMOTERESULT=true
2710: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2711: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked  
2712: 	 * (in ):PARAM_INDEX=int
2713: 	 * </pre>
2714: 	 * @throws RemoteException -- if remote execution raised an Exception
2715: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2716: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2717: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2718: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
2719: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2720: 	 * @see #_last_remote_result
2721: 	 * @see Message
2722: 	 */
2723: 	public boolean isCheckBoxChecked(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2724: 		boolean success = runBooleanResultWithIndex(Message.cmd_ischeckboxchecked, index); 
2725: 		return getRemoteBooleanResult(success,Message.cmd_ischeckboxchecked,Message.KEY_REMOTERESULTINFO);
2726: 	}
2727: 	
2728: 	/**
2729: 	 * Checks if the CheckBox with the given text is checked. 
2730: 	 * @param text shown on the CheckBox.
2731: 	 * @return true if the object is checked. false if it is not.  
2732: 	 * Field _last_remote_result contains the returned Properties object.
2733: 	 * <p>
2734: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2735: 	 * used here and in the device/emulator Robotium Test Runner.
2736: 	 * <p><pre>
2737: 	 * (in ):KEY_TARGET=target_solo
2738: 	 * (in ):KEY_COMMAND=cmd_ischeckboxcheckedtext
2739: 	 * (out):KEY_ISREMOTERESULT=true
2740: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2741: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2742: 	 * (in ):PARAM_TEXT=String
2743: 	 * </pre>
2744: 	 * @throws RemoteException -- if remote execution raised an Exception
2745: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2746: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2747: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2748: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2749: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2750: 	 * @see #_last_remote_result
2751: 	 * @see Message
2752: 	 */
2753: 	public boolean isCheckBoxChecked(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2754: 		boolean success = runBooleanResultWithText(Message.cmd_ischeckboxcheckedtext, text); 
2755: 		return getRemoteBooleanResult(success,Message.cmd_ischeckboxcheckedtext,Message.KEY_REMOTERESULTINFO);
2756: 	}
2757: 	
2758: 	/**
2759: 	 * Checks if the RadioButton with a given index is checked. 
2760: 	 * @param index of the RadioButton to check. 0 if only one is available.
2761: 	 * @return true if the object is checked. false if it is not.  
2762: 	 * Field _last_remote_result contains the returned Properties object.
2763: 	 * <p>
2764: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2765: 	 * used here and in the device/emulator Robotium Test Runner.
2766: 	 * <p><pre>
2767: 	 * (in ):KEY_TARGET=target_solo
2768: 	 * (in ):KEY_COMMAND=cmd_isradiobuttonchecked
2769: 	 * (out):KEY_ISREMOTERESULT=true
2770: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2771: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2772: 	 * (in ):PARAM_INDEX=int
2773: 	 * </pre>
2774: 	 * @throws RemoteException -- if remote execution raised an Exception
2775: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2776: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2777: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2778: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2779: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2780: 	 * @see #_last_remote_result
2781: 	 * @see Message
2782: 	 */
2783: 	public boolean isRadioButtonChecked(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2784: 		boolean success = runBooleanResultWithIndex(Message.cmd_isradiobuttonchecked, index); 
2785: 		return getRemoteBooleanResult(success,Message.cmd_isradiobuttonchecked,Message.KEY_REMOTERESULTINFO);
2786: 	}
2787: 	
2788: 	/**
2789: 	 * Checks if the RadioButton with the given text is checked. 
2790: 	 * @param text shown on the RadioButton.
2791: 	 * @return true if the object is checked. false if it is not.  
2792: 	 * Field _last_remote_result contains the returned Properties object.
2793: 	 * <p>
2794: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2795: 	 * used here and in the device/emulator Robotium Test Runner.
2796: 	 * <p><pre>
2797: 	 * (in ):KEY_TARGET=target_solo
2798: 	 * (in ):KEY_COMMAND=cmd_isradiobuttoncheckedtext
2799: 	 * (out):KEY_ISREMOTERESULT=true
2800: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2801: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2802: 	 * (in ):PARAM_TEXT=String 
2803: 	 * </pre>
2804: 	 * @throws RemoteException -- if remote execution raised an Exception
2805: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2806: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2807: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2808: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2809: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2810: 	 * @see #_last_remote_result
2811: 	 * @see Message
2812: 	 */
2813: 	public boolean isRadioButtonChecked(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2814: 		boolean success = runBooleanResultWithText(Message.cmd_isradiobuttoncheckedtext, text); 
2815: 		return getRemoteBooleanResult(success,Message.cmd_isradiobuttoncheckedtext, Message.KEY_REMOTERESULTINFO);
2816: 	}
2817: 	
2818: 	/**
2819: 	 * Checks if the given text is selected in the given Spinner. 
2820: 	 * @param text that is expected to be selected.
2821: 	 * @param index of the Spinner to check. 0 if only one is available.
2822: 	 * @return true if the given text is selected, false if it is not.  
2823: 	 * Field _last_remote_result contains the returned Properties object.
2824: 	 * <p>
2825: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2826: 	 * used here and in the device/emulator Robotium Test Runner.
2827: 	 * <p><pre>
2828: 	 * (in ):KEY_TARGET=target_solo
2829: 	 * (in ):KEY_COMMAND=cmd_isspinnertextselectedindex
2830: 	 * (out):KEY_ISREMOTERESULT=true
2831: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2832: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2833: 	 * (in ):PARAM_TEXT=String 
2834: 	 * (in ):PARAM_INDEX=int 
2835: 	 * </pre>
2836: 	 * @throws RemoteException -- if remote execution raised an Exception
2837: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2838: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2839: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2840: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2841: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2842: 	 * @see #_last_remote_result
2843: 	 * @see Message
2844: 	 */
2845: 	public boolean isSpinnerTextSelected(int index, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2846: 		Properties props = prepSoloDispatch(Message.cmd_isspinnertextselectedindex);
2847: 		props.setProperty(Message.PARAM_TEXT, text);
2848: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
2849: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
2850: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
2851: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
2852: 		catch(NumberFormatException x){}
2853: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
2854: 		return getRemoteBooleanResult(success,Message.cmd_isspinnertextselectedindex, Message.KEY_REMOTERESULTINFO);
2855: 	}
2856: 	
2857: 	/**
2858: 	 * Checks if the given text is selected in any Spinner located in the current screen. 
2859: 	 * @param text that is expected to be selected.
2860: 	 * @return true if the given text is selected in any Spinner, false if it is not.  
2861: 	 * Field _last_remote_result contains the returned Properties object.
2862: 	 * <p>
2863: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2864: 	 * used here and in the device/emulator Robotium Test Runner.
2865: 	 * <p><pre>
2866: 	 * (in ):KEY_TARGET=target_solo
2867: 	 * (in ):KEY_COMMAND=cmd_isspinnertextselected
2868: 	 * (out):KEY_ISREMOTERESULT=true
2869: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2870: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2871: 	 * (in ):PARAM_TEXT=String 
2872: 	 * </pre>
2873: 	 * @throws RemoteException -- if remote execution raised an Exception
2874: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2875: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2876: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2877: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2878: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2879: 	 * @see #_last_remote_result
2880: 	 * @see Message
2881: 	 */
2882: 	public boolean isSpinnerTextSelected(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2883: 		boolean success = runBooleanResultWithText(Message.cmd_isspinnertextselected, text); 
2884: 		return getRemoteBooleanResult(success,Message.cmd_isspinnertextselected, Message.KEY_REMOTERESULTINFO);
2885: 	}
2886: 	
2887: 	/**
2888: 	 * Checks if the given Text is checked. 
2889: 	 * @param text shown on a CheckedTextView or CompoundButton.
2890: 	 * @return true if the given text is checked. false if it is not.  
2891: 	 * Field _last_remote_result contains the returned Properties object.
2892: 	 * <p>
2893: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2894: 	 * used here and in the device/emulator Robotium Test Runner.
2895: 	 * <p><pre>
2896: 	 * (in ):KEY_TARGET=target_solo
2897: 	 * (in ):KEY_COMMAND=cmd_istextchecked
2898: 	 * (out):KEY_ISREMOTERESULT=true
2899: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2900: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2901: 	 * (in ):PARAM_TEXT=String 
2902: 	 * </pre>
2903: 	 * @throws RemoteException -- if remote execution raised an Exception
2904: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2905: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2906: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2907: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2908: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2909: 	 * @see #_last_remote_result
2910: 	 * @see Message
2911: 	 */
2912: 	public boolean isTextChecked(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2913: 		boolean success = runBooleanResultWithText(Message.cmd_istextchecked, text); 
2914: 		return getRemoteBooleanResult(success,Message.cmd_istextchecked, Message.KEY_REMOTERESULTINFO);
2915: 	}
2916: 	
2917: 	/**
2918: 	 * Checks if a ToggleButton with the give text is checked. 
2919: 	 * @param text shown on a ToggleButton.
2920: 	 * @return true if a ToggleButton with the given text is checked. false if it is not.  
2921: 	 * Field _last_remote_result contains the returned Properties object.
2922: 	 * <p>
2923: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2924: 	 * used here and in the device/emulator Robotium Test Runner.
2925: 	 * <p><pre>
2926: 	 * (in ):KEY_TARGET=target_solo
2927: 	 * (in ):KEY_COMMAND=cmd_istogglebuttoncheckedtext
2928: 	 * (out):KEY_ISREMOTERESULT=true
2929: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2930: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2931: 	 * (in ):PARAM_TEXT=String 
2932: 	 * </pre>
2933: 	 * @throws RemoteException -- if remote execution raised an Exception
2934: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2935: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2936: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2937: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2938: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2939: 	 * @see #_last_remote_result
2940: 	 * @see Message
2941: 	 */
2942: 	public boolean isToggleButtonChecked(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2943: 		boolean success = runBooleanResultWithText(Message.cmd_istogglebuttoncheckedtext, text); 
2944: 		return getRemoteBooleanResult(success,Message.cmd_istogglebuttoncheckedtext, Message.KEY_REMOTERESULTINFO);
2945: 	}
2946: 	
2947: 	/**
2948: 	 * Checks if the ToggleButton at the give index is checked. 
2949: 	 * @param index of the ToggleButton.  0 if only one is available.
2950: 	 * @return true if the ToggleButton is checked. false if it is not.  
2951: 	 * Field _last_remote_result contains the returned Properties object.
2952: 	 * <p>
2953: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2954: 	 * used here and in the device/emulator Robotium Test Runner.
2955: 	 * <p><pre>
2956: 	 * (in ):KEY_TARGET=target_solo
2957: 	 * (in ):KEY_COMMAND=cmd_istogglebuttonchecked
2958: 	 * (out):KEY_ISREMOTERESULT=true
2959: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2960: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether checked
2961: 	 * (in ):PARAM_INDEX=int 
2962: 	 * </pre>
2963: 	 * @throws RemoteException -- if remote execution raised an Exception
2964: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2965: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2966: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2967: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
2968: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2969: 	 * @see #_last_remote_result
2970: 	 * @see Message
2971: 	 */
2972: 	public boolean isToggleButtonChecked(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
2973: 		boolean success = runBooleanResultWithIndex(Message.cmd_istogglebuttonchecked, index); 
2974: 		return getRemoteBooleanResult(success,Message.cmd_istogglebuttonchecked, Message.KEY_REMOTERESULTINFO);
2975: 	}
2976: 	
2977: 	/**
2978: 	 * Presses a MenuItem with a given index. Index 0 is the first item in the first row.  Index 3 is the first item 
2979: 	 * in the second row, and Index 6 is the first item in the third row.
2980: 	 * @param index of the MenuItem to be pressed. 
2981: 	 * @return true if the command was successfully executed, false if not.  
2982: 	 * Field _last_remote_result contains the returned Properties object.
2983: 	 * <p>
2984: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
2985: 	 * used here and in the device/emulator Robotium Test Runner.
2986: 	 * <p><pre>
2987: 	 * (in ):KEY_TARGET=target_solo
2988: 	 * (in ):KEY_COMMAND=cmd_pressmenuitem
2989: 	 * (out):KEY_ISREMOTERESULT=true
2990: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
2991: 	 * (out):KEY_REMOTERESULTINFO=String 
2992: 	 * (in ):PARAM_INDEX=int 
2993: 	 * </pre>
2994: 	 * @throws RemoteException -- if remote execution raised an Exception
2995: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
2996: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
2997: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
2998: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
2999: 	 * @see #_last_remote_result
3000: 	 * @see Message
3001: 	 */
3002: 	public boolean pressMenuItem(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3003: 		return runBooleanResultWithIndex(Message.cmd_pressmenuitem, index); 
3004: 	}
3005: 	
3006: 	/**
3007: 	 * Presses a MenuItem with a given index. Supports three rows with a given amount of items.  If itemsPerRow 
3008: 	 * equals 5 then Index 0 is the first item in the first row, Index 5 is the first item in the second row, and 
3009: 	 * Index 10 is the first item in the third row.
3010: 	 * @param index of the MenuItem to be pressed. 
3011: 	 * @return true if the command was successfully executed, false if not.  
3012: 	 * Field _last_remote_result contains the returned Properties object.
3013: 	 * <p>
3014: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3015: 	 * used here and in the device/emulator Robotium Test Runner.
3016: 	 * <p><pre>
3017: 	 * (in ):KEY_TARGET=target_solo
3018: 	 * (in ):KEY_COMMAND=cmd_presssubmenuitem
3019: 	 * (out):KEY_ISREMOTERESULT=true
3020: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3021: 	 * (out):KEY_REMOTERESULTINFO=String 
3022: 	 * (in ):PARAM_INDEX=int 
3023: 	 * (in ):PARAM_ITEMSPERROW=int 
3024: 	 * 
3025: 	 * </pre>
3026: 	 * @throws RemoteException -- if remote execution raised an Exception
3027: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3028: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3029: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3030: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3031: 	 * @see #_last_remote_result
3032: 	 * @see Message
3033: 	 */
3034: 	public boolean pressMenuItem(int index, int itemsPerRow) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3035: 		Properties props = prepSoloDispatch(Message.cmd_presssubmenuitem);
3036: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
3037: 		props.setProperty(Message.PARAM_ITEMSPERROW, String.valueOf(itemsPerRow));
3038: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3039: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3040: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3041: 		catch(NumberFormatException x){}
3042: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
3043: 	}
3044: 	
3045: 	/**
3046: 	 * Presses on a Spinner (drop-down menu) item.
3047: 	 * @param index of the Spinner menu to be used.
3048: 	 * @param itemindex of the Spinner item to be pressed relative to the currently selected item. 
3049: 	 * A negative number moves up the Spinner.  A positive number moves down. 
3050: 	 * @return true if the command was successfully executed, false if not.  
3051: 	 * Field _last_remote_result contains the returned Properties object.
3052: 	 * <p>
3053: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3054: 	 * used here and in the device/emulator Robotium Test Runner.
3055: 	 * <p><pre>
3056: 	 * (in ):KEY_TARGET=target_solo
3057: 	 * (in ):KEY_COMMAND=cmd_pressspinneritem
3058: 	 * (out):KEY_ISREMOTERESULT=true
3059: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3060: 	 * (out):KEY_REMOTERESULTINFO=String 
3061: 	 * (in ):PARAM_INDEX=int 
3062: 	 * (in ):PARAM_ITEMINDEX=int 
3063: 	 * 
3064: 	 * </pre>
3065: 	 * @throws RemoteException -- if remote execution raised an Exception
3066: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3067: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3068: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3069: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3070: 	 * @see #_last_remote_result
3071: 	 * @see Message
3072: 	 */
3073: 	public boolean pressSpinnerItem(int spinnerIndex, int itemIndex) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3074: 		Properties props = prepSoloDispatch(Message.cmd_pressspinneritem);
3075: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(spinnerIndex));
3076: 		props.setProperty(Message.PARAM_ITEMINDEX, String.valueOf(itemIndex));
3077: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3078: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3079: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3080: 		catch(NumberFormatException x){}
3081: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
3082: 	}
3083: 	
3084: 	/**
3085: 	 * Scrolls down the screen. 
3086: 	 * @return true if more scrolling can be done. false if it is at the end of the screen.  
3087: 	 * Field _last_remote_result contains the returned Properties object.
3088: 	 * <p>
3089: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3090: 	 * used here and in the device/emulator Robotium Test Runner.
3091: 	 * <p><pre>
3092: 	 * (in ):KEY_TARGET=target_solo
3093: 	 * (in ):KEY_COMMAND=cmd_scrolldown
3094: 	 * (out):KEY_ISREMOTERESULT=true
3095: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3096: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3097: 	 * </pre>
3098: 	 * @throws RemoteException -- if remote execution raised an Exception
3099: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3100: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3101: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3102: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3103: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3104: 	 * @see #_last_remote_result
3105: 	 * @see Message
3106: 	 */
3107: 	public boolean scrollDown() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3108: 		boolean success = runNoArgCommand(Message.cmd_scrolldown);
3109: 		return getRemoteBooleanResult(success,Message.cmd_scrolldown, Message.KEY_REMOTERESULTINFO);
3110: 	}
3111: 	
3112: 	/**
3113: 	 * Scrolls to the top of the screen. 
3114: 	 * @return true if successful. false otherwise.  
3115: 	 * Field _last_remote_result contains the returned Properties object.
3116: 	 * <p>
3117: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3118: 	 * used here and in the device/emulator Robotium Test Runner.
3119: 	 * <p><pre>
3120: 	 * (in ):KEY_TARGET=target_solo
3121: 	 * (in ):KEY_COMMAND=cmd_scrolltotop
3122: 	 * (out):KEY_ISREMOTERESULT=true
3123: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3124: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled. Always false. 
3125: 	 * </pre>
3126: 	 * @throws RemoteException -- if remote execution raised an Exception
3127: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3128: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3129: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3130: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3131: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3132: 	 * @see #_last_remote_result
3133: 	 * @see Message
3134: 	 */
3135: 	public boolean scrollToTop() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3136: 		return runNoArgCommand(Message.cmd_scrolltotop);
3137: 	}
3138: 	
3139: 	/**
3140: 	 * Scrolls to the bottom of the screen. 
3141: 	 * @return true if successful. false otherwise.  
3142: 	 * Field _last_remote_result contains the returned Properties object.
3143: 	 * <p>
3144: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3145: 	 * used here and in the device/emulator Robotium Test Runner.
3146: 	 * <p><pre>
3147: 	 * (in ):KEY_TARGET=target_solo
3148: 	 * (in ):KEY_COMMAND=cmd_scrolltobottom
3149: 	 * (out):KEY_ISREMOTERESULT=true
3150: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3151: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled. Always false. 
3152: 	 * </pre>
3153: 	 * @throws RemoteException -- if remote execution raised an Exception
3154: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3155: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3156: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3157: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3158: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3159: 	 * @see #_last_remote_result
3160: 	 * @see Message
3161: 	 */
3162: 	public boolean scrollToBottom() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3163: 		return runNoArgCommand(Message.cmd_scrolltobottom);
3164: 	}
3165: 	
3166: 	/**
3167: 	 * Scrolls down a list with the given index.
3168: 	 * @param index of the ListView to be scrolled. 0 if only one is available. 
3169: 	 * @return true if more scrolling can be done.  
3170: 	 * Field _last_remote_result contains the returned Properties object.
3171: 	 * <p>
3172: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3173: 	 * used here and in the device/emulator Robotium Test Runner.
3174: 	 * <p><pre>
3175: 	 * (in ):KEY_TARGET=target_solo
3176: 	 * (in ):KEY_COMMAND=cmd_scrolldownlist
3177: 	 * (out):KEY_ISREMOTERESULT=true
3178: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3179: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3180: 	 * (in ):PARAM_INDEX=int
3181: 	 * </pre>
3182: 	 * @throws RemoteException -- if remote execution raised an Exception
3183: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3184: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3185: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3186: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3187: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3188: 	 * @see #_last_remote_result
3189: 	 * @see Message
3190: 	 */
3191: 	public boolean scrollDownList(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3192: 		boolean success = runBooleanResultWithIndex(Message.cmd_scrolldownlist,index);
3193: 		return getRemoteBooleanResult(success,Message.cmd_scrolldownlist, Message.KEY_REMOTERESULTINFO);
3194: 	}
3195: 	
3196: 	/**
3197: 	 * Scrolls down a list with the given Reference UID. 
3198: 	 * @param uidView - the reference id of ListView to scroll down.
3199: 	 * @return true if more scrolling can be done. 
3200: 	 * Field _last_remote_result contains the returned Properties object.
3201: 	 * <p>
3202: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3203: 	 * used here and in the device/emulator Robotium Test Runner.
3204: 	 * <p><pre>
3205: 	 * (in ):KEY_TARGET=target_solo
3206: 	 * (in ):KEY_COMMAND=cmd_scrolldownlistuid
3207: 	 * (out):KEY_ISREMOTERESULT=true
3208: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3209: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3210: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
3211: 	 * </pre>
3212: 	 * @throws RemoteException -- if remote execution raised an Exception
3213: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3214: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3215: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3216: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3217: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3218: 	 * @see #_last_remote_result
3219: 	 * @see Message
3220: 	 */
3221: 	public boolean scrollDownListUID(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3222: 		Properties props = prepSoloDispatch(Message.cmd_scrolldownlistuid);
3223: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
3224: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3225: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3226: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3227: 		catch(NumberFormatException x){}
3228: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
3229: 		return getRemoteBooleanResult(success, Message.cmd_scrolldownlistuid, Message.KEY_REMOTERESULTINFO);
3230: 	}	
3231: 	
3232: 	/**
3233: 	 * Scrolls down a list with the given index all the way to the bottom.
3234: 	 * @param index of the ListView to be scrolled. 0 if only one is available. 
3235: 	 * @return true if more scrolling can be done.  
3236: 	 * Field _last_remote_result contains the returned Properties object.
3237: 	 * <p>
3238: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3239: 	 * used here and in the device/emulator Robotium Test Runner.
3240: 	 * <p><pre>
3241: 	 * (in ):KEY_TARGET=target_solo
3242: 	 * (in ):KEY_COMMAND=cmd_scrolllisttobottom
3243: 	 * (out):KEY_ISREMOTERESULT=true
3244: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3245: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3246: 	 * (in ):PARAM_INDEX=int
3247: 	 * </pre>
3248: 	 * @throws RemoteException -- if remote execution raised an Exception
3249: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3250: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3251: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3252: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3253: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3254: 	 * @see #_last_remote_result
3255: 	 * @see Message
3256: 	 */
3257: 	public boolean scrollListToBottom(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3258: 		boolean success = runBooleanResultWithIndex(Message.cmd_scrolllisttobottom,index);
3259: 		return getRemoteBooleanResult(success,Message.cmd_scrolllisttobottom, Message.KEY_REMOTERESULTINFO);
3260: 	}
3261: 	
3262: 	/**
3263: 	 * Scrolls down a list with the given UID all the way to the bottom. 
3264: 	 * @param uidView - the reference id of ListView to scroll down.
3265: 	 * @return true if more scrolling can be done. 
3266: 	 * Field _last_remote_result contains the returned Properties object.
3267: 	 * <p>
3268: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3269: 	 * used here and in the device/emulator Robotium Test Runner.
3270: 	 * <p><pre>
3271: 	 * (in ):KEY_TARGET=target_solo
3272: 	 * (in ):KEY_COMMAND=cmd_scrolllisttobottomuid
3273: 	 * (out):KEY_ISREMOTERESULT=true
3274: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3275: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3276: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
3277: 	 * </pre>
3278: 	 * @throws RemoteException -- if remote execution raised an Exception
3279: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3280: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3281: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3282: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3283: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3284: 	 * @see #_last_remote_result
3285: 	 * @see Message
3286: 	 */
3287: 	public boolean scrollListToBottomUID(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3288: 		Properties props = prepSoloDispatch(Message.cmd_scrolllisttobottomuid);
3289: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
3290: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3291: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3292: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3293: 		catch(NumberFormatException x){}
3294: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
3295: 		return getRemoteBooleanResult(success, Message.cmd_scrolllisttobottomuid, Message.KEY_REMOTERESULTINFO);
3296: 	}
3297: 	
3298: 	/**
3299: 	 * Scrolls a list with the given index to the specified line. 
3300: 	 * @param index - the index of the AbsListView to scroll.
3301: 	 * @param line	- the line to scroll to
3302: 	 * @return true if the command executed successfully, false if not.
3303: 	 * Field _last_remote_result contains the returned Properties object.
3304: 	 * <p>
3305: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3306: 	 * used here and in the device/emulator Robotium Test Runner.
3307: 	 * <p><pre>
3308: 	 * (in ):KEY_TARGET=target_solo
3309: 	 * (in ):KEY_COMMAND=cmd_scrolllisttoline
3310: 	 * (out):KEY_ISREMOTERESULT=true
3311: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3312: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3313: 	 * (in ):PARAM_INDEX=String the index of the AbsListView to scroll.
3314: 	 * (in ):PARAM_LINE=Int the line to scroll to
3315: 	 * </pre>
3316: 	 * @throws RemoteException -- if remote execution raised an Exception
3317: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3318: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3319: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3320: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3321: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3322: 	 * @see #_last_remote_result
3323: 	 * @see Message
3324: 	 */
3325: 	public boolean scrollListToLine(int index, int line) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3326: 		Properties props = prepSoloDispatch(Message.cmd_scrolllisttoline);
3327: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
3328: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
3329: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3330: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3331: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3332: 		catch(NumberFormatException x){}
3333: 		return(rc==Message.STATUS_REMOTERESULT_OK);
3334: 	}
3335: 
3336: 	/**
3337: 	 * Scrolls a list with the given UID to the specified line. 
3338: 	 * @param uidView - the reference id of ListView to scroll.
3339: 	 * @param line	- the line to scroll to
3340: 	 * @return true if the command executed successfully, false if not.
3341: 	 * Field _last_remote_result contains the returned Properties object.
3342: 	 * <p>
3343: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3344: 	 * used here and in the device/emulator Robotium Test Runner.
3345: 	 * <p><pre>
3346: 	 * (in ):KEY_TARGET=target_solo
3347: 	 * (in ):KEY_COMMAND=cmd_scrolllisttolineuid
3348: 	 * (out):KEY_ISREMOTERESULT=true
3349: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3350: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3351: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
3352: 	 * (in ):PARAM_LINE=Int the line to scroll to
3353: 	 * </pre>
3354: 	 * @throws RemoteException -- if remote execution raised an Exception
3355: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3356: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3357: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3358: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3359: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3360: 	 * @see #_last_remote_result
3361: 	 * @see Message
3362: 	 */
3363: 	public boolean scrollListToLineUID(String uidView, int line) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3364: 		Properties props = prepSoloDispatch(Message.cmd_scrolllisttolineuid);
3365: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
3366: 		props.setProperty(Message.PARAM_LINE, String.valueOf(line));
3367: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3368: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3369: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3370: 		catch(NumberFormatException x){}
3371: 		return(rc==Message.STATUS_REMOTERESULT_OK);
3372: 	}	
3373: 	
3374: 	/**
3375: 	 * Scrolls up a list with the given index all the way to the top.
3376: 	 * @param index of the ListView to be scrolled. 0 if only one is available. 
3377: 	 * @return true if more scrolling can be done.  
3378: 	 * Field _last_remote_result contains the returned Properties object.
3379: 	 * <p>
3380: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3381: 	 * used here and in the device/emulator Robotium Test Runner.
3382: 	 * <p><pre>
3383: 	 * (in ):KEY_TARGET=target_solo
3384: 	 * (in ):KEY_COMMAND=cmd_scrolllisttotop
3385: 	 * (out):KEY_ISREMOTERESULT=true
3386: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3387: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled up
3388: 	 * (in ):PARAM_INDEX=int
3389: 	 * </pre>
3390: 	 * @throws RemoteException -- if remote execution raised an Exception
3391: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3392: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3393: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3394: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3395: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3396: 	 * @see #_last_remote_result
3397: 	 * @see Message
3398: 	 */
3399: 	public boolean scrollListToTop(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3400: 		boolean success = runBooleanResultWithIndex(Message.cmd_scrolllisttotop,index);
3401: 		return getRemoteBooleanResult(success,Message.cmd_scrolllisttotop, Message.KEY_REMOTERESULTINFO);
3402: 	}
3403: 	
3404: 	/**
3405: 	 * Scrolls up a list with the given UID all the way to the top. 
3406: 	 * @param uidView - the reference id of ListView to scroll up.
3407: 	 * @return true if more scrolling can be done. 
3408: 	 * Field _last_remote_result contains the returned Properties object.
3409: 	 * <p>
3410: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3411: 	 * used here and in the device/emulator Robotium Test Runner.
3412: 	 * <p><pre>
3413: 	 * (in ):KEY_TARGET=target_solo
3414: 	 * (in ):KEY_COMMAND=cmd_scrolllisttotopuid
3415: 	 * (out):KEY_ISREMOTERESULT=true
3416: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3417: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled up
3418: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
3419: 	 * </pre>
3420: 	 * @throws RemoteException -- if remote execution raised an Exception
3421: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3422: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3423: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3424: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3425: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3426: 	 * @see #_last_remote_result
3427: 	 * @see Message
3428: 	 */
3429: 	public boolean scrollListToTopUID(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3430: 		Properties props = prepSoloDispatch(Message.cmd_scrolllisttotopuid);
3431: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
3432: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3433: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3434: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3435: 		catch(NumberFormatException x){}
3436: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
3437: 		return getRemoteBooleanResult(success, Message.cmd_scrolllisttotopuid, Message.KEY_REMOTERESULTINFO);
3438: 	}
3439: 	
3440: 	/**
3441: 	 * Scrolls horizontally.
3442: 	 * @param side to which to scroll; {@link #RIGHT} or {@link #LEFT}
3443: 	 * @return true if the command executed successfully, false if not.  
3444: 	 * Field _last_remote_result contains the returned Properties object.
3445: 	 * <p>
3446: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3447: 	 * used here and in the device/emulator Robotium Test Runner.
3448: 	 * <p><pre>
3449: 	 * (in ):KEY_TARGET=target_solo
3450: 	 * (in ):KEY_COMMAND=cmd_scrolltoside
3451: 	 * (out):KEY_ISREMOTERESULT=true
3452: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3453: 	 * (out):KEY_REMOTERESULTINFO=String 
3454: 	 * (in ):PARAM_SIDE=int 
3455: 	 * </pre>
3456: 	 * @throws RemoteException -- if remote execution raised an Exception
3457: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3458: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3459: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3460: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3461: 	 * @see #_last_remote_result
3462: 	 * @see Message
3463: 	 */
3464: 	public boolean scrollToSide(int side) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3465: 		Properties props = prepSoloDispatch(Message.cmd_scrolltoside);
3466: 		props.setProperty(Message.PARAM_SIDE, String.valueOf(side));
3467: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3468: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3469: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3470: 		catch(NumberFormatException x){}
3471: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
3472: 	}
3473: 	
3474: 	/**
3475: 	 * Scrolls up the screen. 
3476: 	 * @return true if more scrolling can be done. false if it is at the top of the screen.  
3477: 	 * Field _last_remote_result contains the returned Properties object.
3478: 	 * <p>
3479: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3480: 	 * used here and in the device/emulator Robotium Test Runner.
3481: 	 * <p><pre>
3482: 	 * (in ):KEY_TARGET=target_solo
3483: 	 * (in ):KEY_COMMAND=cmd_scrollup
3484: 	 * (out):KEY_ISREMOTERESULT=true
3485: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3486: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled up
3487: 	 * </pre>
3488: 	 * @throws RemoteException -- if remote execution raised an Exception
3489: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3490: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3491: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3492: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3493: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3494: 	 * @see #_last_remote_result
3495: 	 * @see Message
3496: 	 */
3497: 	public boolean scrollUp() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3498: 		boolean success = runNoArgCommand(Message.cmd_scrollup);
3499: 		return getRemoteBooleanResult(success,Message.cmd_scrollup, Message.KEY_REMOTERESULTINFO);
3500: 	}
3501: 	
3502: 	/**
3503: 	 * Scrolls up a list with the given index.
3504: 	 * @param index of the ListView to be scrolled. 0 if only one is available. 
3505: 	 * @return true if more scrolling can be done.  
3506: 	 * Field _last_remote_result contains the returned Properties object.
3507: 	 * <p>
3508: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3509: 	 * used here and in the device/emulator Robotium Test Runner.
3510: 	 * <p><pre>
3511: 	 * (in ):KEY_TARGET=target_solo
3512: 	 * (in ):KEY_COMMAND=cmd_scrolluplist
3513: 	 * (out):KEY_ISREMOTERESULT=true
3514: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3515: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled up
3516: 	 * (in ):PARAM_INDEX=int 
3517: 	 * </pre>
3518: 	 * @throws RemoteException -- if remote execution raised an Exception
3519: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3520: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3521: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3522: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
3523: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3524: 	 * @see #_last_remote_result
3525: 	 * @see Message
3526: 	 */
3527: 	public boolean scrollUpList(int index) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3528: 		boolean success = runBooleanResultWithIndex(Message.cmd_scrolluplist,index);
3529: 		return getRemoteBooleanResult(success,Message.cmd_scrolluplist, Message.KEY_REMOTERESULTINFO);
3530: 	}
3531: 	
3532: 	/**
3533: 	 * Scrolls up a list with the given reference id. 
3534: 	 * @param uidView - the reference id of ListView to scroll up.
3535: 	 * @return true if more scrolling can be done. 
3536: 	 * Field _last_remote_result contains the returned Properties object.
3537: 	 * <p>
3538: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3539: 	 * used here and in the device/emulator Robotium Test Runner.
3540: 	 * <p><pre>
3541: 	 * (in ):KEY_TARGET=target_solo
3542: 	 * (in ):KEY_COMMAND=cmd_scrolluplistuid
3543: 	 * (out):KEY_ISREMOTERESULT=true
3544: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3545: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled up
3546: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
3547: 	 * </pre>
3548: 	 * @throws RemoteException -- if remote execution raised an Exception
3549: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3550: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3551: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3552: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3553: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3554: 	 * @see #_last_remote_result
3555: 	 * @see Message
3556: 	 */
3557: 	public boolean scrollUpListUID(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3558: 		Properties props = prepSoloDispatch(Message.cmd_scrolluplistuid);
3559: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
3560: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3561: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3562: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3563: 		catch(NumberFormatException x){}
3564: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
3565: 		return getRemoteBooleanResult(success, Message.cmd_scrolllisttobottomuid, Message.KEY_REMOTERESULTINFO);
3566: 	}
3567: 	
3568: 	/**
3569: 	 * Scrolls horizontally a view with the given UID. 
3570: 	 * @param uidView - the reference id of View to scroll.
3571: 	 * @param side	- the side to which to scroll; {@link #RIGHT} or {@link #LEFT}
3572: 	 * @return true if the command executed successfully, false if not.
3573: 	 * Field _last_remote_result contains the returned Properties object.
3574: 	 * <p>
3575: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3576: 	 * used here and in the device/emulator Robotium Test Runner.
3577: 	 * <p><pre>
3578: 	 * (in ):KEY_TARGET=target_solo
3579: 	 * (in ):KEY_COMMAND=cmd_scrollviewtoside
3580: 	 * (out):KEY_ISREMOTERESULT=true
3581: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3582: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:whether can still be scrolled down
3583: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
3584: 	 * (in ):PARAM_SIDE=Int the side to scroll to
3585: 	 * </pre>
3586: 	 * @throws RemoteException -- if remote execution raised an Exception
3587: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3588: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3589: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3590: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3591: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3592: 	 * @see #_last_remote_result
3593: 	 * @see Message
3594: 	 */
3595: 	public boolean scrollViewToSide(String uidView, int side) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3596: 		Properties props = prepSoloDispatch(Message.cmd_scrollviewtoside);
3597: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
3598: 		props.setProperty(Message.PARAM_SIDE, String.valueOf(side));
3599: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3600: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3601: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3602: 		catch(NumberFormatException x){}
3603: 		return(rc==Message.STATUS_REMOTERESULT_OK);
3604: 	}
3605: 	
3606: 	/**
3607: 	 * Searches for a Button with the given text and returns true if at least one is found. 
3608: 	 * Will automatically scroll when needed.
3609: 	 * @param text to search for. The parameter will be interpretted as a regular expression. 
3610: 	 * @return true if at least one such Button is found.  
3611: 	 * Field _last_remote_result contains the returned Properties object.
3612: 	 * <p>
3613: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3614: 	 * used here and in the device/emulator Robotium Test Runner.
3615: 	 * <p><pre>
3616: 	 * (in ):KEY_TARGET=target_solo
3617: 	 * (in ):KEY_COMMAND=cmd_searchbutton
3618: 	 * (out):KEY_ISREMOTERESULT=true
3619: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3620: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3621: 	 * (in ):PARAM_TEXT=String 
3622: 	 * </pre>
3623: 	 * @throws RemoteException -- if remote execution raised an Exception
3624: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3625: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3626: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3627: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3628: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3629: 	 * @see #_last_remote_result
3630: 	 * @see Message
3631: 	 */
3632: 	public boolean searchButton(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3633: 		boolean success = runBooleanResultWithText(Message.cmd_searchbutton,text);
3634: 		return getRemoteBooleanResult(success, Message.cmd_searchbutton, Message.KEY_REMOTERESULTINFO);
3635: 	}
3636: 
3637: 	/*
3638: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
3639: 	 */
3640: 	private boolean searchVisibleObjectText(String cmd, String text, boolean onlyVisible)throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3641: 		Properties props = prepSoloDispatch(cmd);
3642: 		props.setProperty(Message.PARAM_TEXT, text);
3643: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
3644: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3645: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3646: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3647: 		catch(NumberFormatException x){}
3648: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
3649: 	}
3650: 
3651: 	/*
3652: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
3653: 	 */
3654: 	private boolean searchMinimumObjectText(String cmd, String text, int minimumNumberOfMatches)throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3655: 		Properties props = prepSoloDispatch(cmd);
3656: 		props.setProperty(Message.PARAM_TEXT, text);
3657: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
3658: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3659: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3660: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3661: 		catch(NumberFormatException x){}
3662: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
3663: 	}
3664: 	
3665: 	/*
3666: 	 * Runs the specified command with default_ready_stimeout, default_running_stimeout, default_result_stimeout
3667: 	 */
3668: 	private boolean searchMinimumVisibleObjectText(String cmd, String text, int minimumNumberOfMatches, boolean onlyVisible)throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
3669: 		Properties props = prepSoloDispatch(cmd);
3670: 		props.setProperty(Message.PARAM_TEXT, text);
3671: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
3672: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
3673: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3674: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3675: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3676: 		catch(NumberFormatException x){}
3677: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
3678: 	}
3679: 	
3680: 	/**
3681: 	 * Searches for a Button with the given text and returns true if at least one is found. 
3682: 	 * Will automatically scroll when needed.
3683: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3684: 	 * @param onlyVisible true if only visible Buttons should be searched. 
3685: 	 * @return true if at least one such Button is found.  
3686: 	 * Field _last_remote_result contains the returned Properties object.
3687: 	 * <p>
3688: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3689: 	 * used here and in the device/emulator Robotium Test Runner.
3690: 	 * <p><pre>
3691: 	 * (in ):KEY_TARGET=target_solo
3692: 	 * (in ):KEY_COMMAND=cmd_searchbuttonvisible
3693: 	 * (out):KEY_ISREMOTERESULT=true
3694: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3695: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3696: 	 * (in ):PARAM_TEXT=String 
3697: 	 * (in ):PARAM_ONLYVISIBLE=true/false 
3698: 	 * </pre>
3699: 	 * @throws RemoteException -- if remote execution raised an Exception
3700: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3701: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3702: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3703: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3704: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3705: 	 * @see #_last_remote_result
3706: 	 * @see Message
3707: 	 */
3708: 	public boolean searchButton(String text, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3709: 		boolean success = searchVisibleObjectText(Message.cmd_searchbuttonvisible, text, onlyVisible);
3710: 		return getRemoteBooleanResult(success, Message.cmd_searchbuttonvisible, Message.KEY_REMOTERESULTINFO);
3711: 	}
3712: 	
3713: 	/**
3714: 	 * Searches for a Button with the given text and returns true if found at least a given number of times. 
3715: 	 * Will automatically scroll when needed.
3716: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3717: 	 * @param minimumNumberOfMatches expected to be found. 0 matches means that one or more matches are expected. 
3718: 	 * @return true if the Button is found the given number of times, false if it is not.  
3719: 	 * Field _last_remote_result contains the returned Properties object.
3720: 	 * <p>
3721: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3722: 	 * used here and in the device/emulator Robotium Test Runner.
3723: 	 * <p><pre>
3724: 	 * (in ):KEY_TARGET=target_solo
3725: 	 * (in ):KEY_COMMAND=cmd_searchbuttonmatch
3726: 	 * (out):KEY_ISREMOTERESULT=true
3727: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3728: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3729: 	 * (in ):PARAM_TEXT=String 
3730: 	 * (in ):PARAM_MINIMUMMATCHES=int 
3731: 	 * </pre>
3732: 	 * @throws RemoteException -- if remote execution raised an Exception
3733: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3734: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3735: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3736: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3737: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3738: 	 * @see #_last_remote_result
3739: 	 * @see Message
3740: 	 */
3741: 	public boolean searchButton(String text, int minimumNumberOfMatches) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3742: 		boolean success = searchMinimumObjectText(Message.cmd_searchbuttonmatch, text, minimumNumberOfMatches);
3743: 		return getRemoteBooleanResult(success, Message.cmd_searchbuttonmatch, Message.KEY_REMOTERESULTINFO);
3744: 	}
3745: 	
3746: 	/**
3747: 	 * Searches for a Button with the given text and returns true if found at least a given number of times. 
3748: 	 * Will automatically scroll when needed.
3749: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3750: 	 * @param minimumNumberOfMatches expected to be found. 0 matches means that one or more matches are expected. 
3751: 	 * @param onlyVisible true if only visible Buttons are to be sought. 
3752: 	 * @return true if the Button is found the given number of times, false if it is not.  
3753: 	 * Field _last_remote_result contains the returned Properties object.
3754: 	 * <p>
3755: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3756: 	 * used here and in the device/emulator Robotium Test Runner.
3757: 	 * <p><pre>
3758: 	 * (in ):KEY_TARGET=target_solo
3759: 	 * (in ):KEY_COMMAND=cmd_searchbuttonmatchvisible
3760: 	 * (out):KEY_ISREMOTERESULT=true
3761: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3762: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3763: 	 * (in ):PARAM_TEXT=String 
3764: 	 * (in ):PARAM_MINIMUMMATCHES=int 
3765: 	 * (in ):PARAM_ONLYVISIBLE=true/false 
3766: 	 * </pre>
3767: 	 * @throws RemoteException -- if remote execution raised an Exception
3768: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3769: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3770: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3771: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3772: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3773: 	 * @see #_last_remote_result
3774: 	 * @see Message
3775: 	 */
3776: 	public boolean searchButton(String text, int minimumNumberOfMatches, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3777: 		boolean success = searchMinimumVisibleObjectText(Message.cmd_searchbuttonmatchvisible, text, minimumNumberOfMatches, onlyVisible);
3778: 		return getRemoteBooleanResult(success, Message.cmd_searchbuttonmatchvisible, Message.KEY_REMOTERESULTINFO);
3779: 	}
3780: 	
3781: 	/**
3782: 	 * Searches for an EditText with the given text and returns true if at least one is found. 
3783: 	 * Will automatically scroll when needed.
3784: 	 * @param text to search for. The parameter will be interpretted as a regular expression. 
3785: 	 * @return true if at least one such EditText is found.  
3786: 	 * Field _last_remote_result contains the returned Properties object.
3787: 	 * <p>
3788: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3789: 	 * used here and in the device/emulator Robotium Test Runner.
3790: 	 * <p><pre>
3791: 	 * (in ):KEY_TARGET=target_solo
3792: 	 * (in ):KEY_COMMAND=cmd_searchedittext
3793: 	 * (out):KEY_ISREMOTERESULT=true
3794: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3795: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3796: 	 * (in ):PARAM_TEXT=String 
3797: 	 * </pre>
3798: 	 * @throws RemoteException -- if remote execution raised an Exception
3799: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3800: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3801: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3802: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
3803: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3804: 	 * @see #_last_remote_result
3805: 	 * @see Message
3806: 	 */
3807: 	public boolean searchEditText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3808: 		boolean success = runBooleanResultWithText(Message.cmd_searchedittext, text);
3809: 		return getRemoteBooleanResult(success, Message.cmd_searchedittext, Message.KEY_REMOTERESULTINFO);
3810: 	}
3811: 	
3812: 	/**
3813: 	 * Searches for a TextView with the given text and returns true if at least one is found. 
3814: 	 * Will automatically scroll when needed.
3815: 	 * @param text to search for. The parameter will be interpretted as a regular expression. 
3816: 	 * @return true if at least one such TextView is found.  
3817: 	 * Field _last_remote_result contains the returned Properties object.
3818: 	 * <p>
3819: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3820: 	 * used here and in the device/emulator Robotium Test Runner.
3821: 	 * <p><pre>
3822: 	 * (in ):KEY_TARGET=target_solo
3823: 	 * (in ):KEY_COMMAND=cmd_searchtext
3824: 	 * (out):KEY_ISREMOTERESULT=true
3825: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3826: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3827: 	 * (in ):PARAM_TEXT=String 
3828: 	 * </pre>
3829: 	 * @throws RemoteException -- if remote execution raised an Exception
3830: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3831: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3832: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3833: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3834: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3835: 	 * @see #_last_remote_result
3836: 	 * @see Message
3837: 	 */
3838: 	public boolean searchText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3839: 		boolean success = runBooleanResultWithText(Message.cmd_searchtext, text);
3840: 		return getRemoteBooleanResult(success, Message.cmd_searchtext, Message.KEY_REMOTERESULTINFO);
3841: 	}
3842: 	
3843: 	/**
3844: 	 * Searches for a TextView with the given text and returns true if at least one is found. 
3845: 	 * Will automatically scroll when needed.
3846: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3847: 	 * @param onlyVisible true if only visible TextViews should be searched. 
3848: 	 * @return true if at least one such TextView is found.  
3849: 	 * Field _last_remote_result contains the returned Properties object.
3850: 	 * <p>
3851: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3852: 	 * used here and in the device/emulator Robotium Test Runner.
3853: 	 * <p><pre>
3854: 	 * (in ):KEY_TARGET=target_solo
3855: 	 * (in ):KEY_COMMAND=cmd_searchtextvisible
3856: 	 * (out):KEY_ISREMOTERESULT=true
3857: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3858: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3859: 	 * (in ):PARAM_TEXT=String 
3860: 	 * (in ):PARAM_ONLYVISIBLE=true/false 
3861: 	 * </pre>
3862: 	 * @throws RemoteException -- if remote execution raised an Exception
3863: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3864: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3865: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3866: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
3867: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3868: 	 * @see #_last_remote_result
3869: 	 * @see Message
3870: 	 */
3871: 	public boolean searchText(String text, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3872: 		boolean success = searchVisibleObjectText(Message.cmd_searchtextvisible, text, onlyVisible);
3873: 		return getRemoteBooleanResult(success, Message.cmd_searchtextvisible, Message.KEY_REMOTERESULTINFO);
3874: 	}
3875: 	
3876: 	/**
3877: 	 * Searches for a TextView with the given text and returns true if found at least a given number of times. 
3878: 	 * Will automatically scroll when needed.
3879: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3880: 	 * @param minimumNumberOfMatches expected to be found. 0 matches means that one or more matches are expected. 
3881: 	 * @return true if the TextView is found the given number of times, false if it is not.  
3882: 	 * Field _last_remote_result contains the returned Properties object.
3883: 	 * <p>
3884: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3885: 	 * used here and in the device/emulator Robotium Test Runner.
3886: 	 * <p><pre>
3887: 	 * (in ):KEY_TARGET=target_solo
3888: 	 * (in ):KEY_COMMAND=cmd_searchtextmatch
3889: 	 * (out):KEY_ISREMOTERESULT=true
3890: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3891: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3892: 	 * (in ):PARAM_TEXT=String 
3893: 	 * (in ):PARAM_MINIMUMMATCHES=int 
3894: 	 * </pre>
3895: 	 * @throws RemoteException -- if remote execution raised an Exception
3896: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3897: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3898: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3899: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
3900: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3901: 	 * @see #_last_remote_result
3902: 	 * @see Message
3903: 	 */
3904: 	public boolean searchText(String text, int minimumNumberOfMatches) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3905: 		boolean success = searchMinimumObjectText(Message.cmd_searchtextmatch, text, minimumNumberOfMatches);
3906: 		return getRemoteBooleanResult(success, Message.cmd_searchtextmatch, Message.KEY_REMOTERESULTINFO);
3907: 	}
3908: 	
3909: 	/**
3910: 	 * Searches for a TextView with the given text and returns true if found at least a given number of times. 
3911: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3912: 	 * @param minimumNumberOfMatches expected to be found. 0 matches means that one or more matches are expected.
3913: 	 * @param scroll true if scrolling should be performed.
3914: 	 * @return true if the TextView is found the given number of times, false if it is not.  
3915: 	 * Field _last_remote_result contains the returned Properties object.
3916: 	 * <p>
3917: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3918: 	 * used here and in the device/emulator Robotium Test Runner.
3919: 	 * <p><pre>
3920: 	 * (in ):KEY_TARGET=target_solo
3921: 	 * (in ):KEY_COMMAND=cmd_searchtextmatchscroll
3922: 	 * (out):KEY_ISREMOTERESULT=true
3923: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3924: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3925: 	 * (in ):PARAM_TEXT=String 
3926: 	 * (in ):PARAM_MINIMUMMATCHES=int 
3927: 	 * (in ):PARAM_SCROLL=true/false
3928: 	 * </pre>
3929: 	 * @throws RemoteException -- if remote execution raised an Exception
3930: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3931: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3932: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3933: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
3934: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3935: 	 * @see #_last_remote_result
3936: 	 * @see Message
3937: 	 */
3938: 	public boolean searchText(String text, int minimumNumberOfMatches, boolean scroll) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3939: 		Properties props = prepSoloDispatch(Message.cmd_searchtextmatchscroll);
3940: 		props.setProperty(Message.PARAM_TEXT, text);
3941: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
3942: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
3943: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3944: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3945: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3946: 		catch(NumberFormatException x){}
3947: 		boolean success = (rc == Message.STATUS_REMOTERESULT_OK );
3948: 		return getRemoteBooleanResult(success, Message.cmd_searchtextmatchscroll, Message.KEY_REMOTERESULTINFO);
3949: 	}
3950: 	
3951: 	/**
3952: 	 * Searches for a TextView with the given text and returns true if found at least a given number of times. 
3953: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
3954: 	 * @param minimumNumberOfMatches expected to be found. 0 matches means that one or more matches are expected.
3955: 	 * @param scroll true if scrolling should be performed.
3956: 	 * @param onlyVisible true if only visible TextView objects should be sought.
3957: 	 * @return true if the TextView is found the given number of times, false if it is not.  
3958: 	 * Field _last_remote_result contains the returned Properties object.
3959: 	 * <p>
3960: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
3961: 	 * used here and in the device/emulator Robotium Test Runner.
3962: 	 * <p><pre>
3963: 	 * (in ):KEY_TARGET=target_solo
3964: 	 * (in ):KEY_COMMAND=cmd_searchtextmatchscrollvisible
3965: 	 * (out):KEY_ISREMOTERESULT=true
3966: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
3967: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
3968: 	 * (in ):PARAM_TEXT=String 
3969: 	 * (in ):PARAM_MINIMUMMATCHES=int 
3970: 	 * (in ):PARAM_SCROLL=true/false
3971: 	 * (in ):PARAM_ONLYVISIBLE=true/false
3972: 	 * </pre>
3973: 	 * @throws RemoteException -- if remote execution raised an Exception
3974: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
3975: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
3976: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
3977: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
3978: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
3979: 	 * @see #_last_remote_result
3980: 	 * @see Message
3981: 	 */
3982: 	public boolean searchText(String text, int minimumNumberOfMatches, boolean scroll, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
3983: 		Properties props = prepSoloDispatch(Message.cmd_searchtextmatchscrollvisible);
3984: 		props.setProperty(Message.PARAM_TEXT, text);
3985: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
3986: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
3987: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
3988: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
3989: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
3990: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
3991: 		catch(NumberFormatException x){}
3992: 		boolean success = (rc == Message.STATUS_REMOTERESULT_OK );
3993: 		return getRemoteBooleanResult(success, Message.cmd_searchtextmatchscrollvisible, Message.KEY_REMOTERESULTINFO);
3994: 	}
3995: 	
3996: 	/**
3997: 	 * Searches for a ToggleButton with the given text and returns true if at least one is found. 
3998: 	 * Will automatically scroll when needed.
3999: 	 * @param text to search for. The parameter will be interpretted as a regular expression. 
4000: 	 * @return true if at least one such ToggleButton is found.  
4001: 	 * Field _last_remote_result contains the returned Properties object.
4002: 	 * <p>
4003: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4004: 	 * used here and in the device/emulator Robotium Test Runner.
4005: 	 * <p><pre>
4006: 	 * (in ):KEY_TARGET=target_solo
4007: 	 * (in ):KEY_COMMAND=cmd_searchtogglebutton
4008: 	 * (out):KEY_ISREMOTERESULT=true
4009: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4010: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
4011: 	 * (in ):PARAM_TEXT=String 
4012: 	 * </pre>
4013: 	 * @throws RemoteException -- if remote execution raised an Exception
4014: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4015: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4016: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4017: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
4018: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4019: 	 * @see #_last_remote_result
4020: 	 * @see Message
4021: 	 */
4022: 	public boolean searchToggleButton(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
4023: 		boolean success = runBooleanResultWithText(Message.cmd_searchtogglebutton, text);
4024: 		return getRemoteBooleanResult(success, Message.cmd_searchtogglebutton, Message.KEY_REMOTERESULTINFO);
4025: 	}
4026: 	
4027: 	/**
4028: 	 * Searches for a ToggleButton with the given text and returns true if found at least a given number of times. 
4029: 	 * Will automatically scroll when needed.
4030: 	 * @param text to search for. The parameter will be interpretted as a regular expression.
4031: 	 * @param minimumNumberOfMatches expected to be found. 0 matches means that one or more matches are expected. 
4032: 	 * @return true if the ToggleButton is found the given number of times, false if it is not.  
4033: 	 * Field _last_remote_result contains the returned Properties object.
4034: 	 * <p>
4035: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4036: 	 * used here and in the device/emulator Robotium Test Runner.
4037: 	 * <p><pre>
4038: 	 * (in ):KEY_TARGET=target_solo
4039: 	 * (in ):KEY_COMMAND=cmd_searchtogglebuttonmatch
4040: 	 * (out):KEY_ISREMOTERESULT=true
4041: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4042: 	 * (out):KEY_REMOTERESULTINFO=String:boolean: whether found or not
4043: 	 * (in ):PARAM_TEXT=String 
4044: 	 * (in ):PARAM_MINIMUMMATCHES=int 
4045: 	 * </pre>
4046: 	 * @throws RemoteException -- if remote execution raised an Exception
4047: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4048: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4049: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4050: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side.
4051: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4052: 	 * @see #_last_remote_result
4053: 	 * @see Message
4054: 	 */
4055: 	public boolean searchToggleButton(String text, int minimumNumberOfMatches) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
4056: 		boolean success = searchMinimumObjectText(Message.cmd_searchtogglebuttonmatch, text, minimumNumberOfMatches);
4057: 		return getRemoteBooleanResult(success, Message.cmd_searchtogglebuttonmatch, Message.KEY_REMOTERESULTINFO);
4058: 	}
4059: 	
4060: 	/**
4061: 	 * Send a key: {@link #RIGHT}, {@link #LEFT}, {@link #UP}, {@link #DOWN}, {@link #ENTER}, {@link #MENU}, {@link #DELETE}
4062: 	 * @param key to be sent.
4063: 	 * @return true if the command was successfully executed, false if not.  
4064: 	 * Field _last_remote_result contains the returned Properties object.
4065: 	 * <p>
4066: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4067: 	 * used here and in the device/emulator Robotium Test Runner.
4068: 	 * <p><pre>
4069: 	 * (in ):KEY_TARGET=target_solo
4070: 	 * (in ):KEY_COMMAND=cmd_sendkey
4071: 	 * (out):KEY_ISREMOTERESULT=true
4072: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4073: 	 * (out):KEY_REMOTERESULTINFO=String 
4074: 	 * (in ):PARAM_KEY=int 
4075: 	 * </pre>
4076: 	 * @throws RemoteException -- if remote execution raised an Exception
4077: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4078: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4079: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4080: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4081: 	 * @see #_last_remote_result
4082: 	 * @see Message
4083: 	 */
4084: 	public boolean sendKey(int key) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4085: 		Properties props = prepSoloDispatch(Message.cmd_sendkey);
4086: 		props.setProperty(Message.PARAM_KEY, String.valueOf(key));
4087: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4088: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4089: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4090: 		catch(NumberFormatException x){}
4091: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4092: 	}
4093: 	
4094: 	/**
4095: 	 * Set the Orientation ({@link #LANDSCAPE}/{@link #PORTRAIT}) for the current Activity.
4096: 	 * @param orientation to be set.
4097: 	 * @return true if the command was successfully executed, false if not.  
4098: 	 * Field _last_remote_result contains the returned Properties object.
4099: 	 * <p>
4100: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4101: 	 * used here and in the device/emulator Robotium Test Runner.
4102: 	 * <p><pre>
4103: 	 * (in ):KEY_TARGET=target_solo
4104: 	 * (in ):KEY_COMMAND=cmd_setactivityorientation
4105: 	 * (out):KEY_ISREMOTERESULT=true
4106: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4107: 	 * (out):KEY_REMOTERESULTINFO=String 
4108: 	 * (in ):PARAM_ORIENTATION=int 
4109: 	 * </pre>
4110: 	 * @throws RemoteException -- if remote execution raised an Exception
4111: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4112: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4113: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4114: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4115: 	 * @see #_last_remote_result
4116: 	 * @see Message
4117: 	 */
4118: 	public boolean setActivityOrientation(int orientation) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4119: 		Properties props = prepSoloDispatch(Message.cmd_setactivityorientation);
4120: 		props.setProperty(Message.PARAM_ORIENTATION, String.valueOf(orientation));
4121: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4122: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4123: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4124: 		catch(NumberFormatException x){}
4125: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4126: 	}
4127: 	
4128: 	/**
4129: 	 * Sets the date in a given DatePicker.
4130: 	 * @param uidDatePicker String UID reference to a DatePicker object.
4131: 	 * @param years to set e.g. 2011
4132: 	 * @param monthOfYear the month e.g. 03
4133: 	 * @param dayOfMonth the day e.g. 10
4134: 	 * @return true if the command was successfully executed, false if not.  
4135: 	 * Field _last_remote_result contains the returned Properties object.
4136: 	 * <p>
4137: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4138: 	 * used here and in the device/emulator Robotium Test Runner.
4139: 	 * <p><pre>
4140: 	 * (in ):KEY_TARGET=target_solo
4141: 	 * (in ):KEY_COMMAND=cmd_setdatepickerreference
4142: 	 * (out):KEY_ISREMOTERESULT=true
4143: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4144: 	 * (out):KEY_REMOTERESULTINFO=String 
4145: 	 * (in ):PARAM_REFERENCE=String UID 
4146: 	 * (in ):PARAM_YEAR=int 
4147: 	 * (in ):PARAM_YEARMONTH=int 
4148: 	 * (in ):PARAM_MONTHDAY=int 
4149: 	 * </pre>
4150: 	 * @throws RemoteException -- if remote execution raised an Exception
4151: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4152: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4153: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4154: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4155: 	 * @see #_last_remote_result
4156: 	 * @see Message
4157: 	 */
4158: 	public boolean setDatePicker(String uidDatePicker, int year, int monthOfYear, int dayOfMonth) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4159: 		Properties props = prepSoloDispatch(Message.cmd_setdatepickerreference);
4160: 		props.setProperty(Message.PARAM_REFERENCE, uidDatePicker);
4161: 		props.setProperty(Message.PARAM_YEAR, String.valueOf(year));
4162: 		props.setProperty(Message.PARAM_YEARMONTH, String.valueOf(monthOfYear));
4163: 		props.setProperty(Message.PARAM_MONTHDAY, String.valueOf(dayOfMonth));
4164: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4165: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4166: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4167: 		catch(NumberFormatException x){}
4168: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4169: 	}
4170: 	
4171: 	/**
4172: 	 * Sets the date in a given DatePicker.
4173: 	 * @param index of the DatePicker to set. 0 if only one is available.
4174: 	 * @param years to set e.g. 2011
4175: 	 * @param monthOfYear the month e.g. 03
4176: 	 * @param dayOfMonth the day e.g. 10
4177: 	 * @return true if the command was successfully executed, false if not.  
4178: 	 * Field _last_remote_result contains the returned Properties object.
4179: 	 * <p>
4180: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4181: 	 * used here and in the device/emulator Robotium Test Runner.
4182: 	 * <p><pre>
4183: 	 * (in ):KEY_TARGET=target_solo
4184: 	 * (in ):KEY_COMMAND=cmd_setdatepickerindex
4185: 	 * (out):KEY_ISREMOTERESULT=true
4186: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4187: 	 * (out):KEY_REMOTERESULTINFO=String 
4188: 	 * (in ):PARAM_INDEX=int 
4189: 	 * (in ):PARAM_YEAR=int 
4190: 	 * (in ):PARAM_YEARMONTH=int 
4191: 	 * (in ):PARAM_MONTHDAY=int 
4192: 	 * </pre>
4193: 	 * @throws RemoteException -- if remote execution raised an Exception
4194: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4195: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4196: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4197: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4198: 	 * @see #_last_remote_result
4199: 	 * @see Message
4200: 	 */
4201: 	public boolean setDatePicker(int index, int year, int monthOfYear, int dayOfMonth) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4202: 		Properties props = prepSoloDispatch(Message.cmd_setdatepickerindex);
4203: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
4204: 		props.setProperty(Message.PARAM_YEAR, String.valueOf(year));
4205: 		props.setProperty(Message.PARAM_YEARMONTH, String.valueOf(monthOfYear));
4206: 		props.setProperty(Message.PARAM_MONTHDAY, String.valueOf(dayOfMonth));
4207: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4208: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4209: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4210: 		catch(NumberFormatException x){}
4211: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4212: 	}
4213: 	
4214: 	/**
4215: 	 * Sets the status in a given ProgressBar. Examples are SeekBar and RatingBar.
4216: 	 * @param index of the ProgressBar to set. 0 if only one is available.
4217: 	 * @param progress that the ProgressBar should be set to.
4218: 	 * @return true if the command was successfully executed, false if not.  
4219: 	 * Field _last_remote_result contains the returned Properties object.
4220: 	 * <p>
4221: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4222: 	 * used here and in the device/emulator Robotium Test Runner.
4223: 	 * <p><pre>
4224: 	 * (in ):KEY_TARGET=target_solo
4225: 	 * (in ):KEY_COMMAND=cmd_setprogressbarindex
4226: 	 * (out):KEY_ISREMOTERESULT=true
4227: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4228: 	 * (out):KEY_REMOTERESULTINFO=String 
4229: 	 * (in ):PARAM_INDEX=int 
4230: 	 * (in ):PARAM_PROGRESS=int 
4231: 	 * </pre>
4232: 	 * @throws RemoteException -- if remote execution raised an Exception
4233: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4234: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4235: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4236: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4237: 	 * @see #_last_remote_result
4238: 	 * @see Message
4239: 	 */
4240: 	public boolean setProgressBar(int index, int progress) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4241: 		Properties props = prepSoloDispatch(Message.cmd_setprogressbarindex);
4242: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
4243: 		props.setProperty(Message.PARAM_PROGRESS, String.valueOf(progress));
4244: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4245: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4246: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4247: 		catch(NumberFormatException x){}
4248: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4249: 	}
4250: 	
4251: 	/**
4252: 	 * Sets the status in a given ProgressBar. Examples are SeekBar and RatingBar.
4253: 	 * @param uidProgressBar String UID reference to the desired ProgressBar.
4254: 	 * @param progress that the ProgressBar should be set to.
4255: 	 * @return true if the command was successfully executed, false if not.  
4256: 	 * Field _last_remote_result contains the returned Properties object.
4257: 	 * <p>
4258: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4259: 	 * used here and in the device/emulator Robotium Test Runner.
4260: 	 * <p><pre>
4261: 	 * (in ):KEY_TARGET=target_solo
4262: 	 * (in ):KEY_COMMAND=cmd_setprogressbarreference
4263: 	 * (out):KEY_ISREMOTERESULT=true
4264: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4265: 	 * (out):KEY_REMOTERESULTINFO=String 
4266: 	 * (in ):PARAM_REFERENCE=String UID 
4267: 	 * (in ):PARAM_PROGRESS=int 
4268: 	 * </pre>
4269: 	 * @throws RemoteException -- if remote execution raised an Exception
4270: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4271: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4272: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4273: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4274: 	 * @see #_last_remote_result
4275: 	 * @see Message
4276: 	 */
4277: 	public boolean setProgressBar(String uidProgressBar, int progress) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4278: 		Properties props = prepSoloDispatch(Message.cmd_setprogressbarreference);
4279: 		props.setProperty(Message.PARAM_REFERENCE, uidProgressBar);
4280: 		props.setProperty(Message.PARAM_PROGRESS, String.valueOf(progress));
4281: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4282: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4283: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4284: 		catch(NumberFormatException x){}
4285: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4286: 	}
4287: 	
4288: 	/**
4289: 	 * Sets the status in a given SlidingDrawer. Settings are {@link #CLOSED} and {@link #OPENED}
4290: 	 * @param index of the SlidingDrawer to be set. 0 if only 1 is available.
4291: 	 * @param status of {@link #CLOSED} or {@link #OPENED} to be set.
4292: 	 * @return true if the command was successfully executed, false if not.  
4293: 	 * Field _last_remote_result contains the returned Properties object.
4294: 	 * <p>
4295: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4296: 	 * used here and in the device/emulator Robotium Test Runner.
4297: 	 * <p><pre>
4298: 	 * (in ):KEY_TARGET=target_solo
4299: 	 * (in ):KEY_COMMAND=cmd_setslidingdrawerindex
4300: 	 * (out):KEY_ISREMOTERESULT=true
4301: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4302: 	 * (out):KEY_REMOTERESULTINFO=String 
4303: 	 * (in ):PARAM_INDEX=int 
4304: 	 * (in ):PARAM_STATUS=int 
4305: 	 * </pre>
4306: 	 * @throws RemoteException -- if remote execution raised an Exception
4307: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4308: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4309: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4310: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4311: 	 * @see #_last_remote_result
4312: 	 * @see Message
4313: 	 */
4314: 	public boolean setSlidingDrawer(int index, int status) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4315: 		Properties props = prepSoloDispatch(Message.cmd_setslidingdrawerindex);
4316: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
4317: 		props.setProperty(Message.PARAM_STATUS, String.valueOf(status));
4318: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4319: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4320: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4321: 		catch(NumberFormatException x){}
4322: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4323: 	}
4324: 	
4325: 	/**
4326: 	 * Sets the status in a given SlidingDrawer. Settings are {@link #CLOSED} and {@link #OPENED}
4327: 	 * @param uidSlidingDrawer String UID reference to the desired SlidingDrawer.
4328: 	 * @param status of {@link #CLOSED} or {@link #OPENED} to be set.
4329: 	 * @return true if the command was successfully executed, false if not.  
4330: 	 * Field _last_remote_result contains the returned Properties object.
4331: 	 * <p>
4332: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4333: 	 * used here and in the device/emulator Robotium Test Runner.
4334: 	 * <p><pre>
4335: 	 * (in ):KEY_TARGET=target_solo
4336: 	 * (in ):KEY_COMMAND=cmd_setslidingdrawerreference
4337: 	 * (out):KEY_ISREMOTERESULT=true
4338: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4339: 	 * (out):KEY_REMOTERESULTINFO=String 
4340: 	 * (in ):PARAM_REFERENCE=String UID 
4341: 	 * (in ):PARAM_STATUS=int 
4342: 	 * </pre>
4343: 	 * @throws RemoteException -- if remote execution raised an Exception
4344: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4345: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4346: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4347: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4348: 	 * @see #_last_remote_result
4349: 	 * @see Message
4350: 	 */
4351: 	public boolean setSlidingDrawer(String uidSlidingDrawer, int status) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4352: 		Properties props = prepSoloDispatch(Message.cmd_setslidingdrawerreference);
4353: 		props.setProperty(Message.PARAM_REFERENCE, uidSlidingDrawer);
4354: 		props.setProperty(Message.PARAM_STATUS, String.valueOf(status));
4355: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4356: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4357: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4358: 		catch(NumberFormatException x){}
4359: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4360: 	}
4361: 	
4362: 	/**
4363: 	 * Sets the time in a given TimePicker.
4364: 	 * @param index of the TimePicker to set. 0 if only one is available.
4365: 	 * @param hour to be set e.g. 15
4366: 	 * @param minute to be set e.g. 30
4367: 	 * @return true if the command was successfully executed, false if not.  
4368: 	 * Field _last_remote_result contains the returned Properties object.
4369: 	 * <p>
4370: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4371: 	 * used here and in the device/emulator Robotium Test Runner.
4372: 	 * <p><pre>
4373: 	 * (in ):KEY_TARGET=target_solo
4374: 	 * (in ):KEY_COMMAND=cmd_settimepickerindex
4375: 	 * (out):KEY_ISREMOTERESULT=true
4376: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4377: 	 * (out):KEY_REMOTERESULTINFO=String 
4378: 	 * (in ):PARAM_INDEX=int 
4379: 	 * (in ):PARAM_HOUR=int 
4380: 	 * (in ):PARAM_MINUTE=int 
4381: 	 * </pre>
4382: 	 * @throws RemoteException -- if remote execution raised an Exception
4383: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4384: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4385: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4386: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4387: 	 * @see #_last_remote_result
4388: 	 * @see Message
4389: 	 */
4390: 	public boolean setTimePicker(int index, int hour, int minute) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4391: 		Properties props = prepSoloDispatch(Message.cmd_settimepickerindex);
4392: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
4393: 		props.setProperty(Message.PARAM_HOUR, String.valueOf(hour));
4394: 		props.setProperty(Message.PARAM_MINUTE, String.valueOf(minute));
4395: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4396: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4397: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4398: 		catch(NumberFormatException x){}
4399: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4400: 	}
4401: 	
4402: 	/**
4403: 	 * Sets the time in a given TimePicker.
4404: 	 * @param uidTimePicker String UID reference to the desired TimePicker.
4405: 	 * @param hour to be set e.g. 15
4406: 	 * @param minute to be set e.g. 30
4407: 	 * @return true if the command was successfully executed, false if not.  
4408: 	 * Field _last_remote_result contains the returned Properties object.
4409: 	 * <p>
4410: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4411: 	 * used here and in the device/emulator Robotium Test Runner.
4412: 	 * <p><pre>
4413: 	 * (in ):KEY_TARGET=target_solo
4414: 	 * (in ):KEY_COMMAND=cmd_settimepickerreference
4415: 	 * (out):KEY_ISREMOTERESULT=true
4416: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4417: 	 * (out):KEY_REMOTERESULTINFO=String 
4418: 	 * (in ):PARAM_REFERENCE=String UID 
4419: 	 * (in ):PARAM_HOUR=int 
4420: 	 * (in ):PARAM_MINUTE=int 
4421: 	 * </pre>
4422: 	 * @throws RemoteException -- if remote execution raised an Exception
4423: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4424: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4425: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4426: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4427: 	 * @see #_last_remote_result
4428: 	 * @see Message
4429: 	 */
4430: 	public boolean setTimePicker(String uidTimePicker, int hour, int minute) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4431: 		Properties props = prepSoloDispatch(Message.cmd_settimepickerreference);
4432: 		props.setProperty(Message.PARAM_REFERENCE, uidTimePicker);
4433: 		props.setProperty(Message.PARAM_HOUR, String.valueOf(hour));
4434: 		props.setProperty(Message.PARAM_MINUTE, String.valueOf(minute));
4435: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4436: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4437: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4438: 		catch(NumberFormatException x){}
4439: 		return rc == Message.STATUS_REMOTERESULT_OK ? true:false;
4440: 	}
4441: 	
4442: 	/**
4443: 	 * Start the AUT app by launching its main launcher Activity. 
4444: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4445: 	 * <p>
4446: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4447: 	 * used here and in the device/emulator Robotium Test Runner.
4448: 	 * <p><pre>
4449: 	 * (in ):KEY_TARGET=target_solo
4450: 	 * (in ):KEY_COMMAND=cmd_startmainlauncher
4451: 	 * (out):KEY_ISREMOTERESULT=true
4452: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4453: 	 * (out):KEY_REMOTERESULTINFO=String
4454: 	 * (in/out):PARAM_ERRORMSG=String
4455: 	 * (out):PARAM_NAME=String Name of the Activity that was launched.
4456: 	 * (out):PARAM_CLASS=String full Classname of the Activity that was launched.
4457: 	 * </pre>
4458: 	 * @throws RemoteException -- if remote execution raised an Exception
4459: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4460: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4461: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4462: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int) 
4463: 	 * @see #_last_remote_result 
4464: 	 * @see Message
4465: 	 */
4466: 	public boolean startMainLauncher() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4467: 		return runNoArgCommand(Message.cmd_startmainlauncher);
4468: 	}
4469: 	
4470: 	/**
4471: 	 * All Activities that have been active are finished. 
4472: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4473: 	 * <p>
4474: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4475: 	 * used here and in the device/emulator Robotium Test Runner.
4476: 	 * <p><pre>
4477: 	 * (in ):KEY_TARGET=target_solo
4478: 	 * (in ):KEY_COMMAND=cmd_finishopenedactivities
4479: 	 * (out):KEY_ISREMOTERESULT=true
4480: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4481: 	 * (out):KEY_REMOTERESULTINFO=String
4482: 	 * </pre>
4483: 	 * @throws RemoteException -- if remote execution raised an Exception
4484: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4485: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4486: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4487: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4488: 	 * @see #_last_remote_result
4489: 	 * @see Message
4490: 	 */
4491: 	public boolean finishOpenedActivities() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4492: 		Properties props = prepSoloDispatch(Message.cmd_finishopenedactivities);
4493: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4494: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4495: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4496: 		catch(NumberFormatException x){}
4497: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
4498: 	}
4499: 	
4500: 	/**
4501: 	 * Finalizes the remote Solo object and removes the ActivityMonitor. 
4502: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4503: 	 * <p>
4504: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4505: 	 * used here and in the device/emulator Robotium Test Runner.
4506: 	 * <p><pre>
4507: 	 * (in ):KEY_TARGET=target_solo
4508: 	 * (in ):KEY_COMMAND=cmd_finalizeremotesolo
4509: 	 * (out):KEY_ISREMOTERESULT=true
4510: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4511: 	 * (out):KEY_REMOTERESULTINFO=String
4512: 	 * </pre>
4513: 	 * @throws RemoteException -- if remote execution raised an Exception
4514: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4515: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4516: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4517: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4518: 	 * @see #finishOpenedActivities()
4519: 	 * @see #_last_remote_result
4520: 	 * @see Message
4521: 	 */
4522: 	public boolean finalizeRemoteSolo() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4523: 		Properties props = prepSoloDispatch(Message.cmd_finalizeremotesolo);
4524: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4525: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4526: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4527: 		catch(NumberFormatException x){}
4528: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
4529: 	}
4530: 	
4531: 	/**
4532: 	 * Returns an ArrayList of String UIDs for all the opened/active Activities. 
4533: 	 * @return ArrayList of 0 or more String UIDs for all the opened/active Activities.  
4534: 	 * Field _last_remote_result contains the returned Properties object.
4535: 	 * <p>
4536: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4537: 	 * used here and in the device/emulator Robotium Test Runner.
4538: 	 * <p><pre>
4539: 	 * (in ):KEY_TARGET=target_solo
4540: 	 * (in ):KEY_COMMAND=cmd_getallopenactivities
4541: 	 * (out):KEY_ISREMOTERESULT=true
4542: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4543: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference keys for actual Activity objects 
4544: 	 * stored in a remote cache.
4545: 	 * <p>
4546: 	 * REMOTERESULTINFO content format: ";UID;UID;UID"
4547: 	 * <p>
4548: 	 * The first character is the delimiter used to delimit each UID followed by each UID separated by the delimiter. 
4549: 	 * &nbsp;Each UID must be a unique String reference key to an object in the remote cache.
4550: 	 * </pre>
4551: 	 * @throws RemoteException -- if remote execution raised an Exception
4552: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4553: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4554: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4555: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4556: 	 * @see #_last_remote_result
4557: 	 * @see Message
4558: 	 */
4559: 	public ArrayList getAllOpenActivities() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4560: 		ArrayList list = new ArrayList(0);
4561: 		Properties props = prepSoloDispatch(Message.cmd_getallopenactivities);
4562: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4563: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4564: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4565: 		catch(NumberFormatException x){}
4566: 		if(rc==Message.STATUS_REMOTERESULT_OK){
4567: 			String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
4568: 			list = parseStringArrayList(info);
4569: 		}
4570: 		return list;
4571: 	}
4572: 	
4573: 	/**
4574: 	 * Returns a String UID reference to the current Activity. 
4575: 	 * @return string UID reference to the current Activity, or null.
4576: 	 * Field _last_remote_result contains the returned Properties object.
4577: 	 * <p>
4578: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4579: 	 * used here and in the device/emulator Robotium Test Runner.
4580: 	 * <p><pre>
4581: 	 * (in ):KEY_TARGET=target_solo
4582: 	 * (in ):KEY_COMMAND=cmd_getcurrentactivity
4583: 	 * (out):KEY_ISREMOTERESULT=true
4584: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4585: 	 * (out):KEY_REMOTERESULTINFO=String containing the UID (unique ID) reference key for current Activity object 
4586: 	 * stored in a remote cache.
4587: 	 * (out):PARM_CLASS=ClassName of retrieved Activity.
4588: 	 * (out):PARM_NAME=Name of retrieved Activity.
4589: 	 * </pre>
4590: 	 * @throws RemoteException -- if remote execution raised an Exception
4591: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4592: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4593: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4594: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4595: 	 * @see #_last_remote_result
4596: 	 * @see Message
4597: 	 */
4598: 	public String getCurrentActivity() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4599: 		Properties props = prepSoloDispatch(Message.cmd_getcurrentactivity);
4600: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4601: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4602: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4603: 		catch(NumberFormatException x){}
4604: 		return rc==Message.STATUS_REMOTERESULT_OK ? 
4605: 			   _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO):null;
4606: 	}
4607: 	
4608: 	/**
4609: 	 * Returns a localized String from localized String resources.
4610: 	 * @param resourceId of the localized String resource. 
4611: 	 * @return String or null if not found.  
4612: 	 * Field _last_remote_result contains the returned Properties object.
4613: 	 * <p>
4614: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4615: 	 * used here and in the device/emulator Robotium Test Runner.
4616: 	 * <p><pre>
4617: 	 * (in ):KEY_TARGET=target_solo
4618: 	 * (in ):KEY_COMMAND=cmd_getstring
4619: 	 * (out):KEY_ISREMOTERESULT=true
4620: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4621: 	 * (out):KEY_REMOTERESULTINFO=localized String or null if it does not exist.
4622: 	 * (in ):PARAM_RESID=int
4623: 	 * </pre>
4624: 	 * @throws RemoteException -- if remote execution raised an Exception
4625: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4626: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4627: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4628: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4629: 	 * @see #_last_remote_result
4630: 	 * @see Message
4631: 	 */
4632: 	public String getString(String resourceId) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4633: 		Properties props = prepSoloDispatch(Message.cmd_getstring);
4634: 		props.setProperty(Message.PARAM_RESID, resourceId);
4635: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4636: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4637: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4638: 		catch(NumberFormatException x){}
4639: 		return _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
4640: 	}
4641: 	
4642: 	/**
4643: 	 * Make Robotium sleep for a specified number of milliseconds.
4644: 	 * @param time in milliseconds for Robotium to sleep.
4645: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4646: 	 * <p>
4647: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4648: 	 * used here and in the device/emulator Robotium Test Runner.
4649: 	 * <p><pre>
4650: 	 * (in ):KEY_TARGET=target_solo
4651: 	 * (in ):KEY_COMMAND=cmd_sleep
4652: 	 * (out):KEY_ISREMOTERESULT=true
4653: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4654: 	 * (out):KEY_REMOTERESULTINFO=String
4655: 	 * (in ):PARAM_TIME=millis
4656: 	 * </pre>
4657: 	 * @throws RemoteException -- if remote execution raised an Exception
4658: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4659: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4660: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4661: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4662: 	 * @see #_last_remote_result
4663: 	 * @see Message
4664: 	 */
4665: 	public boolean sleep(int millis) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4666: 		Properties props = prepSoloDispatch(Message.cmd_sleep);
4667: 		props.setProperty(Message.PARAM_TIME, String.valueOf(millis));
4668: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4669: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4670: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4671: 		catch(NumberFormatException x){}
4672: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
4673: 	}
4674: 	
4675: 	/**
4676: 	 * Asserts that the expected Activity is the current active one. 
4677: 	 * @param errormsg - the message to display/log if the assertion fails.
4678: 	 * @param activityname - the name of the Activity that is expected to be active e.g. "MyActivity"
4679: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4680: 	 * <p>
4681: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4682: 	 * used here and in the device/emulator Robotium Test Runner.
4683: 	 * <p><pre>
4684: 	 * (in ):KEY_TARGET=target_solo
4685: 	 * (in ):KEY_COMMAND=cmd_assertcurrentactivityname
4686: 	 * (out):KEY_ISREMOTERESULT=true
4687: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4688: 	 * (out):KEY_REMOTERESULTINFO=String
4689: 	 * (in/out):PARAM_ERRORMSG=String
4690: 	 * (in/out):PARAM_NAME=String (in: the expected Activity name, out: the actual Activity name)
4691: 	 * (out):PARAM_CLASS=String full Classname of the actual current Activity.
4692: 	 * </pre>
4693: 	 * @throws RemoteException -- if remote execution raised an Exception
4694: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4695: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4696: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4697: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4698: 	 * @see #_last_remote_result
4699: 	 * @see Message
4700: 	 */
4701: 	public boolean assertCurrentActivityName(String errormsg, String activityname) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4702: 		Properties props = prepSoloDispatch(Message.cmd_assertcurrentactivityname);
4703: 		props.setProperty(Message.PARAM_ERRORMSG, errormsg);
4704: 		props.setProperty(Message.PARAM_NAME, activityname);
4705: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4706: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4707: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4708: 		catch(NumberFormatException x){}
4709: 		if(rc == Message.STATUS_REMOTERESULT_OK) {
4710: 			processSuccess(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_NAME));
4711: 		}else{
4712: 			processFailure(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_ERRORMSG));
4713: 			return false;
4714: 		}
4715: 		return true;
4716: 	}
4717: 
4718: 	/**
4719: 	 * Asserts that the expected Activity is the current active one, with the possibility to verify that 
4720: 	 * the expected Activity is a new instance of the Activity.  
4721: 	 * @param errormsg - the message to display/log if the assertion fails.
4722: 	 * @param activityname - the name of the Activity that is expected to be active e.g. "MyActivity"
4723: 	 * @param isnewinstance - true if the expected Activity is a new instance of the Activity.
4724: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4725: 	 * <p>
4726: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4727: 	 * used here and in the device/emulator Robotium Test Runner.
4728: 	 * <p><pre>
4729: 	 * (in ):KEY_TARGET=target_solo
4730: 	 * (in ):KEY_COMMAND=cmd_assertnewcurrentactivityname
4731: 	 * (out):KEY_ISREMOTERESULT=true
4732: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4733: 	 * (out):KEY_REMOTERESULTINFO=String
4734: 	 * (in/out):PARAM_ERRORMSG=String
4735: 	 * (in/out):PARAM_ISNEWINSTANCE=true/false 
4736: 	 * (in/out):PARAM_NAME=String (in: the expected Activity name, out: the actual Activity name)
4737: 	 * (out):PARAM_CLASS=String full Classname of the actual current Activity.
4738: 	 * </pre>
4739: 	 * @throws RemoteException -- if remote execution raised an Exception
4740: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4741: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4742: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4743: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4744: 	 * @see #_last_remote_result
4745: 	 * @see Message
4746: 	 */
4747: 	public boolean assertCurrentActivityName(String errormsg, String activityname, boolean isNewInstance) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4748: 		Properties props = prepSoloDispatch(Message.cmd_assertnewcurrentactivityname);
4749: 		props.setProperty(Message.PARAM_ERRORMSG, errormsg);
4750: 		props.setProperty(Message.PARAM_NAME, activityname);
4751: 		props.setProperty(Message.PARAM_ISNEWINSTANCE, String.valueOf(isNewInstance));
4752: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4753: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4754: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4755: 		catch(NumberFormatException x){}
4756: 		if(rc == Message.STATUS_REMOTERESULT_OK) {
4757: 			processSuccess(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_NAME));
4758: 		}else{
4759: 			processFailure(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_ERRORMSG));
4760: 			return false;
4761: 		}
4762: 		return true;
4763: 	}
4764: 	
4765: 	/**
4766: 	 * Asserts that the expected Activity is the current active one. 
4767: 	 * @param errormsg - the message to display/log if the assertion fails.
4768: 	 * @param activityclass - the full classname of the Activity that is expected to be active e.g. "com.company.activities.MainActivityClass"
4769: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4770: 	 * <p>
4771: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4772: 	 * used here and in the device/emulator Robotium Test Runner.
4773: 	 * <p><pre>
4774: 	 * (in ):KEY_TARGET=target_solo
4775: 	 * (in ):KEY_COMMAND=cmd_assertcurrentactivityclass
4776: 	 * (out):KEY_ISREMOTERESULT=true
4777: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4778: 	 * (out):KEY_REMOTERESULTINFO=String
4779: 	 * (in/out):PARAM_ERRORMSG=String
4780: 	 * (out):PARAM_NAME=String name of the actual current Activity.
4781: 	 * (in/out):PARAM_CLASS=String (in: the expected Activity class, out: the actual current Activity class)
4782: 	 * </pre>
4783: 	 * @throws RemoteException -- if remote execution raised an Exception
4784: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4785: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4786: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4787: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4788: 	 * @see#_last_remote_result
4789: 	 * @see Message
4790: 	 */
4791: 	public boolean assertCurrentActivityClass(String errormsg, String activityclass) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4792: 		Properties props = prepSoloDispatch(Message.cmd_assertcurrentactivityclass);
4793: 		props.setProperty(Message.PARAM_ERRORMSG, errormsg);
4794: 		props.setProperty(Message.PARAM_CLASS, activityclass);
4795: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4796: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4797: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4798: 		catch(NumberFormatException x){}
4799: 		if(rc == Message.STATUS_REMOTERESULT_OK) {
4800: 			processSuccess(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_CLASS));
4801: 		}else{
4802: 			processFailure(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_ERRORMSG));
4803: 			return false;
4804: 		}
4805: 		return true;
4806: 	}
4807: 
4808: 	/**
4809: 	 * Asserts that the expected Activity is the current active one, with the possibility to verify that the expected 
4810: 	 * Activity is a new instance of the Activity.
4811: 	 * @param errormsg - the message to display/log if the assertion fails.
4812: 	 * @param activityclass - the full classname of the Activity that is expected to be active e.g. "com.company.activities.MainActivityClass"
4813: 	 * @param isnewinstance - true if the expected Activity is a new instance of the Activity
4814: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4815: 	 * <p>
4816: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4817: 	 * used here and in the device/emulator Robotium Test Runner.
4818: 	 * <p><pre>
4819: 	 * (in ):KEY_TARGET=target_solo
4820: 	 * (in ):KEY_COMMAND=cmd_assertnewcurrentactivityclass
4821: 	 * (out):KEY_ISREMOTERESULT=true
4822: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4823: 	 * (out):KEY_REMOTERESULTINFO=String
4824: 	 * (in/out):PARAM_ISNEWINSTANCE=true/false
4825: 	 * (in/out):PARAM_ERRORMSG=String
4826: 	 * (out):PARAM_NAME=String name of the actual current Activity.
4827: 	 * (in/out):PARAM_CLASS=String (in: the expected Activity class, out: the actual current Activity class)
4828: 	 * </pre>
4829: 	 * @throws RemoteException -- if remote execution raised an Exception
4830: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4831: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4832: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4833: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4834: 	 * @see #_last_remote_result
4835: 	 * @see Message
4836: 	 */
4837: 	public boolean assertCurrentActivityClass(String errormsg, String activityclass, boolean isNewInstance) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4838: 		Properties props = prepSoloDispatch(Message.cmd_assertnewcurrentactivityclass);
4839: 		props.setProperty(Message.PARAM_ERRORMSG, errormsg);
4840: 		props.setProperty(Message.PARAM_CLASS, activityclass);
4841: 		props.setProperty(Message.PARAM_ISNEWINSTANCE, String.valueOf(isNewInstance));
4842: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4843: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4844: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4845: 		catch(NumberFormatException x){}
4846: 		if(rc == Message.STATUS_REMOTERESULT_OK) {
4847: 			processSuccess(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_CLASS));
4848: 		}else{
4849: 			processFailure(_last_remote_result.getProperty(Message.KEY_COMMAND), _last_remote_result.getProperty(Message.PARAM_ERRORMSG));
4850: 			return false;
4851: 		}
4852: 		return true;
4853: 	}
4854: 
4855: 	/**
4856: 	 * Asserts that the available memory on the device or system is not low. 
4857: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4858: 	 * <p>
4859: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4860: 	 * used here and in the device/emulator Robotium Test Runner.
4861: 	 * <p><pre>
4862: 	 * (in ):KEY_TARGET=target_solo
4863: 	 * (in ):KEY_COMMAND=cmd_assertmemorynotlow
4864: 	 * (out):KEY_ISREMOTERESULT=true
4865: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4866: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:true, if the system's memory is enough.
4867: 	 * </pre>
4868: 	 * @throws RemoteException -- if remote execution raised an Exception
4869: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4870: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4871: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4872: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
4873: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4874: 	 * @see #_last_remote_result
4875: 	 * @see Message
4876: 	 */
4877: 	public boolean assertMemoryNotLow() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
4878: 		Properties props = prepSoloDispatch(Message.cmd_assertmemorynotlow);
4879: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4880: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4881: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4882: 		catch(NumberFormatException x){}
4883: 		
4884: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
4885: 		return getRemoteBooleanResult(success, Message.cmd_assertmemorynotlow, Message.KEY_REMOTERESULTINFO);
4886: 	}
4887: 	
4888: 	/**
4889: 	 * Simulates pressing the hardware back key.  
4890: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4891: 	 * <p>
4892: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4893: 	 * used here and in the device/emulator Robotium Test Runner.
4894: 	 * <p><pre>
4895: 	 * (in ):KEY_TARGET=target_solo
4896: 	 * (in ):KEY_COMMAND=cmd_goback
4897: 	 * (out):KEY_ISREMOTERESULT=true
4898: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4899: 	 * (out):KEY_REMOTERESULTINFO=String
4900: 	 * </pre>
4901: 	 * @throws RemoteException -- if remote execution raised an Exception
4902: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4903: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4904: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4905: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4906: 	 * @see #_last_remote_result
4907: 	 * @see Message
4908: 	 */
4909: 	public boolean goBack() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4910: 		Properties props = prepSoloDispatch(Message.cmd_goback);
4911: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4912: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4913: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4914: 		catch(NumberFormatException x){}
4915: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
4916: 	}
4917: 	
4918: 	/**
4919: 	 * Returns to the given Activity.
4920: 	 * @param activityname - the name of the Activity to wait for e.g. "MyActivity" 
4921: 	 * @return true if successful. Field _last_remote_result contains the returned Properties object.
4922: 	 * <p>
4923: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4924: 	 * used here and in the device/emulator Robotium Test Runner.
4925: 	 * <p><pre>
4926: 	 * (in ):KEY_TARGET=target_solo
4927: 	 * (in ):KEY_COMMAND=cmd_gobacktoactivity
4928: 	 * (out):KEY_ISREMOTERESULT=true
4929: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4930: 	 * (out):KEY_REMOTERESULTINFO=String
4931: 	 * (in/out):PARAM_NAME=String (in: the name of the Activity to return to e.g. "MyActivity", out: the actual Activity name)
4932: 	 * (out):PARAM_CLASS=String the actual Activity's full qualified class name
4933: 	 * </pre>
4934: 	 * @throws RemoteException -- if remote execution raised an Exception
4935: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4936: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4937: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4938: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4939: 	 * @see #_last_remote_result
4940: 	 * @see Message
4941: 	 */
4942: 	public boolean goBackToActivity(String activityname) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
4943: 		Properties props = prepSoloDispatch(Message.cmd_gobacktoactivity);
4944: 		props.setProperty(Message.PARAM_NAME, activityname);
4945: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4946: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4947: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4948: 		catch(NumberFormatException x){}
4949: 		return rc==Message.STATUS_REMOTERESULT_OK ? true: false;
4950: 	}
4951: 	
4952: 	/**
4953: 	 * Waits for the given Activity. Default timeout is 20 seconds.
4954: 	 * @param activityname - the name of the Activity to wait for e.g. "MyActivity" 
4955: 	 * @return true if Activity appears before the timeout and false if it does not. 
4956: 	 * Field _last_remote_result contains the returned Properties object.
4957: 	 * <p>
4958: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4959: 	 * used here and in the device/emulator Robotium Test Runner.
4960: 	 * <p><pre>
4961: 	 * (in ):KEY_TARGET=target_solo
4962: 	 * (in ):KEY_COMMAND=cmd_waitforactivity
4963: 	 * (out):KEY_ISREMOTERESULT=true
4964: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
4965: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the activity appear
4966: 	 * (in/out):PARAM_NAME=String (in: the name of the Activity to wait for e.g. "MyActivity", out: the actual Activity name)
4967: 	 * (out):PARAM_CLASS=String the actual Activity's full qualified class name
4968: 	 * </pre>
4969: 	 * @throws RemoteException -- if remote execution raised an Exception
4970: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
4971: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
4972: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
4973: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
4974: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
4975: 	 * @see #_last_remote_result
4976: 	 * @see Message
4977: 	 */
4978: 	public boolean waitForActivity(String activityname) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
4979: 		Properties props = prepSoloDispatch(Message.cmd_waitforactivity);
4980: 		props.setProperty(Message.PARAM_NAME, activityname);
4981: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
4982: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
4983: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
4984: 		catch(NumberFormatException x){}
4985: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
4986: 		return getRemoteBooleanResult(success, Message.cmd_waitforactivity, Message.KEY_REMOTERESULTINFO);
4987: 	}
4988: 	
4989: 	/**
4990: 	 * Waits for the given Activity for up to the specified timeout milliseconds.
4991: 	 * @param activityname - the name of the Activity to wait for e.g. "MyActivity".
4992: 	 * @param timeout -- milliseconds to wait before timeout. 
4993: 	 * @return true if Activity appears before the timeout and false if it does not. 
4994: 	 * Field _last_remote_result contains the returned Properties object.
4995: 	 * <p>
4996: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
4997: 	 * used here and in the device/emulator Robotium Test Runner.
4998: 	 * <p><pre>
4999: 	 * (in ):KEY_TARGET=target_solo
5000: 	 * (in ):KEY_COMMAND=cmd_waitforactivitytimeout
5001: 	 * (out):KEY_ISREMOTERESULT=true
5002: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5003: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the activity appear
5004: 	 * (in/out):PARAM_NAME=String (in: the name of the Activity to wait for e.g. "MyActivity", out: the actual Activity name)
5005: 	 * (in ):PARAM_TIMEOUT=milliseconds to wait.
5006: 	 * (out):PARAM_CLASS=String the actual Activity's full qualified class name
5007: 	 * </pre>
5008: 	 * @throws RemoteException -- if remote execution raised an Exception
5009: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5010: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5011: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5012: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5013: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5014: 	 * @see #_last_remote_result
5015: 	 * @see Message
5016: 	 */
5017: 	public boolean waitForActivity(String activityname, int timeout) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5018: 		Properties props = prepSoloDispatch(Message.cmd_waitforactivitytimeout);
5019: 		props.setProperty(Message.PARAM_NAME, activityname);
5020: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5021: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5022: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5023: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5024: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5025: 		catch(NumberFormatException x){}
5026: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5027: 		return getRemoteBooleanResult(success, Message.cmd_waitforactivitytimeout, Message.KEY_REMOTERESULTINFO);
5028: 	}
5029: 	
5030: 	/**
5031: 	 * Waits for the given V4 Fragment for up to the specified timeout milliseconds.
5032: 	 * @param tag - the tag of the Fragment to wait for.
5033: 	 * @param timeout -- milliseconds to wait before timeout. 
5034: 	 * @return true if Fragment appears before the timeout and false if it does not. 
5035: 	 * Field _last_remote_result contains the returned Properties object.
5036: 	 * <p>
5037: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5038: 	 * used here and in the device/emulator Robotium Test Runner.
5039: 	 * <p><pre>
5040: 	 * (in ):KEY_TARGET=target_solo
5041: 	 * (in ):KEY_COMMAND=cmd_waitforfragmentbytag
5042: 	 * (out):KEY_ISREMOTERESULT=true
5043: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5044: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the fragment appear
5045: 	 * (in/out):PARAM_NAME=String (in: the tag of the Fragment to wait for, out: the current Activity name)
5046: 	 * (in ):PARAM_TIMEOUT=milliseconds to wait.
5047: 	 * (out):PARAM_CLASS=String the current Activity's full qualified class name
5048: 	 * </pre>
5049: 	 * @throws RemoteException -- if remote execution raised an Exception
5050: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5051: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5052: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5053: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5054: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5055: 	 * @see #_last_remote_result
5056: 	 * @see Message
5057: 	 */
5058: 	public boolean waitForFragmentByTag(String tag, int timeout) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5059: 		Properties props = prepSoloDispatch(Message.cmd_waitforfragmentbytag);
5060: 		props.setProperty(Message.PARAM_NAME, tag);
5061: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5062: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5063: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5064: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5065: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5066: 		catch(NumberFormatException x){}
5067: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5068: 		return getRemoteBooleanResult(success, Message.cmd_waitforfragmentbytag, Message.KEY_REMOTERESULTINFO);
5069: 	}
5070: 	
5071: 	/**
5072: 	 * Waits for the given V4 Fragment for up to the specified timeout milliseconds.
5073: 	 * @param id - the id of the Fragment to wait for.
5074: 	 * @param timeout -- milliseconds to wait before timeout. 
5075: 	 * @return true if Fragment appears before the timeout and false if it does not. 
5076: 	 * Field _last_remote_result contains the returned Properties object.
5077: 	 * <p>
5078: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5079: 	 * used here and in the device/emulator Robotium Test Runner.
5080: 	 * <p><pre>
5081: 	 * (in ):KEY_TARGET=target_solo
5082: 	 * (in ):KEY_COMMAND=cmd_waitforfragmentbyid
5083: 	 * (out):KEY_ISREMOTERESULT=true
5084: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5085: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the fragment appear
5086: 	 * (in/out):PARAM_ID=String (in: the int id of the Fragment to wait for, out: the current Activity String name)
5087: 	 * (in ):PARAM_TIMEOUT=milliseconds to wait.
5088: 	 * (out):PARAM_CLASS=String the current Activity's full qualified class name
5089: 	 * </pre>
5090: 	 * @throws RemoteException -- if remote execution raised an Exception
5091: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5092: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5093: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5094: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5095: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5096: 	 * @see #_last_remote_result
5097: 	 * @see Message
5098: 	 */
5099: 	public boolean waitForFragmentById(int id, int timeout) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5100: 		Properties props = prepSoloDispatch(Message.cmd_waitforfragmentbyid);
5101: 		props.setProperty(Message.PARAM_ID, String.valueOf(id));
5102: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5103: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5104: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5105: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5106: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5107: 		catch(NumberFormatException x){}
5108: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5109: 		return getRemoteBooleanResult(success, Message.cmd_waitforfragmentbyid, Message.KEY_REMOTERESULTINFO);
5110: 	}
5111: 	
5112: 	/**
5113: 	 * Waits for a Dialog to close.
5114: 	 * @param timeout -- the amount of time in milliseconds to wait 
5115: 	 * @return true if the Dialog is closed before the timeout and false if it is not closed. 
5116: 	 * Field _last_remote_result contains the returned Properties object.
5117: 	 * <p>
5118: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5119: 	 * used here and in the device/emulator Robotium Test Runner.
5120: 	 * <p><pre>
5121: 	 * (in ):KEY_TARGET=target_solo
5122: 	 * (in ):KEY_COMMAND=cmd_waitfordialogtoclose
5123: 	 * (out):KEY_ISREMOTERESULT=true
5124: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5125: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the dialog has been closed
5126: 	 * (in ):PARAM_TIMEOUT=milliseconds
5127: 	 * </pre>
5128: 	 * @throws RemoteException -- if remote execution raised an Exception
5129: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5130: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5131: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5132: 	 * @throws RemoteSoloException -- if the command was not executed successfully in remote side.
5133: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5134: 	 * @see #finishOpenedActivities()
5135: 	 * @see #_last_remote_result
5136: 	 * @see Message
5137: 	 */
5138: 	public boolean waitForDialogToClose(int millis) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5139: 		Properties props = prepSoloDispatch(Message.cmd_waitfordialogtoclose);
5140: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(millis));
5141: 		int stime = millis > 0 ? (int)Math.ceil(millis/1000) : 0;
5142: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5143: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5144: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5145: 		catch(NumberFormatException x){}
5146: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5147: 		return getRemoteBooleanResult(success, Message.cmd_waitfordialogtoclose, Message.KEY_REMOTERESULTINFO);
5148: 	}	
5149: 
5150: 	/**
5151: 	 * Waits for specific text in the android log within a timeout period. 
5152: 	 * The app must have the android.permission.READ_LOGS permission.
5153: 	 * @param text - the text to wait for.
5154: 	 * @param timeout - timeout in milliseconds to wait.
5155: 	 * @return true if log message is found, and false if not before the timeout. 
5156: 	 * Field _last_remote_result contains the returned Properties object.
5157: 	 * <p>
5158: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5159: 	 * used here and in the device/emulator Robotium Test Runner.
5160: 	 * <p><pre>
5161: 	 * (in ):KEY_TARGET=target_solo
5162: 	 * (in ):KEY_COMMAND=cmd_waitforlogmessage
5163: 	 * (out):KEY_ISREMOTERESULT=true
5164: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5165: 	 * (out):KEY_REMOTERESULTINFO=String
5166: 	 * (in ):PARAM_TEXT=String text to wait for.
5167: 	 * (in ):PARAM_TIMEOUT=milliseconds timeout to wait.
5168: 	 * </pre>
5169: 	 * @throws RemoteException -- if remote execution raised an Exception
5170: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5171: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5172: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5173: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5174: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5175: 	 * @see #_last_remote_result
5176: 	 * @see Message
5177: 	 */
5178: 	public boolean waitForLogMessage(String text, int timeout) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5179: 		Properties props = prepSoloDispatch(Message.cmd_waitforlogmessage);
5180: 		props.setProperty(Message.PARAM_TEXT, text);
5181: 		props.setProperty(Message.PARAM_TIMEOUT, text);
5182: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5183: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5184: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5185: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5186: 		catch(NumberFormatException x){}
5187: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5188: 		return getRemoteBooleanResult(success, Message.cmd_waitforlogmessage, Message.KEY_REMOTERESULTINFO);
5189: 	}
5190: 	
5191: 	/**
5192: 	 * Waits for a text to be shown. Default timeout is 20 seconds. 
5193: 	 * @param text - the text to wait for.
5194: 	 * @return true if text is shown and false if it is not shown before the timeout. 
5195: 	 * Field _last_remote_result contains the returned Properties object.
5196: 	 * <p>
5197: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5198: 	 * used here and in the device/emulator Robotium Test Runner.
5199: 	 * <p><pre>
5200: 	 * (in ):KEY_TARGET=target_solo
5201: 	 * (in ):KEY_COMMAND=cmd_waitfortext
5202: 	 * (out):KEY_ISREMOTERESULT=true
5203: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5204: 	 * (out):KEY_REMOTERESULTINFO=String
5205: 	 * (in ):PARAM_TEXT=String text to wait for.
5206: 	 * </pre>
5207: 	 * @throws RemoteException -- if remote execution raised an Exception
5208: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5209: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5210: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5211: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5212: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5213: 	 * @see #_last_remote_result
5214: 	 * @see Message
5215: 	 */
5216: 	public boolean waitForText(String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5217: 		Properties props = prepSoloDispatch(Message.cmd_waitfortext);
5218: 		props.setProperty(Message.PARAM_TEXT, text);
5219: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5220: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5221: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5222: 		catch(NumberFormatException x){}
5223: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5224: 		return getRemoteBooleanResult(success, Message.cmd_waitfortext, Message.KEY_REMOTERESULTINFO);
5225: 	}
5226: 	
5227: 	/**
5228: 	 * Waits for a text to be shown.  
5229: 	 * @param text - the text to wait for.
5230: 	 * @param minimumNumberOfMatches -- the minimum number of matches that are expected to be shown.  
5231: 	 * 0 means any number of matches. 
5232: 	 * @param timeout -- milliseconds to wait before timeout. 
5233: 	 * @return true if text is shown and false if it is not shown before the timeout. 
5234: 	 * Field _last_remote_result contains the returned Properties object.
5235: 	 * <p>
5236: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5237: 	 * used here and in the device/emulator Robotium Test Runner.
5238: 	 * <p><pre>
5239: 	 * (in ):KEY_TARGET=target_solo
5240: 	 * (in ):KEY_COMMAND=cmd_waitfortextmatchtimeout
5241: 	 * (out):KEY_ISREMOTERESULT=true
5242: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5243: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the text appear
5244: 	 * (in ):PARAM_TEXT=String text to wait for.
5245: 	 * (in ):PARAM_MINIMUMMATCHES=int
5246: 	 * (in ):PARAM_TIMEOUT=milliseconds.
5247: 	 * </pre>
5248: 	 * @throws RemoteException -- if remote execution raised an Exception
5249: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5250: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5251: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5252: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5253: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5254: 	 * @see #_last_remote_result
5255: 	 * @see Message
5256: 	 */
5257: 	public boolean waitForText(String text, int minimumNumberOfMatches, long timeout) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5258: 		Properties props = prepSoloDispatch(Message.cmd_waitfortextmatchtimeout);
5259: 		props.setProperty(Message.PARAM_TEXT, text);
5260: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
5261: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5262: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5263: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5264: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5265: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5266: 		catch(NumberFormatException x){}
5267: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5268: 		return getRemoteBooleanResult(success, Message.cmd_waitfortextmatchtimeout, Message.KEY_REMOTERESULTINFO);
5269: 	}
5270: 	
5271: 	/**
5272: 	 * Waits for a text to be shown.  
5273: 	 * @param text - the text to wait for.
5274: 	 * @param minimumNumberOfMatches -- the minimum number of matches that are expected to be shown.  
5275: 	 * 0 means any number of matches. 
5276: 	 * @param timeout -- milliseconds to wait before timeout. 
5277: 	 * @param scroll -- true if scrolling should be performed. 
5278: 	 * @return true if text is shown and false if it is not shown before the timeout. 
5279: 	 * Field _last_remote_result contains the returned Properties object.
5280: 	 * <p>
5281: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5282: 	 * used here and in the device/emulator Robotium Test Runner.
5283: 	 * <p><pre>
5284: 	 * (in ):KEY_TARGET=target_solo
5285: 	 * (in ):KEY_COMMAND=cmd_waitfortextmatchtimeoutscroll
5286: 	 * (out):KEY_ISREMOTERESULT=true
5287: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5288: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the text appear
5289: 	 * (in ):PARAM_TEXT=String text to wait for.
5290: 	 * (in ):PARAM_MINIMUMMATCHES=int
5291: 	 * (in ):PARAM_TIMEOUT=milliseconds.
5292: 	 * (in ):PARAM_SCROLL=true/false
5293: 	 * </pre>
5294: 	 * @throws RemoteException -- if remote execution raised an Exception
5295: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5296: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5297: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5298: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5299: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5300: 	 * @see #_last_remote_result
5301: 	 * @see Message
5302: 	 */
5303: 	public boolean waitForText(String text, int minimumNumberOfMatches, long timeout, boolean scroll) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5304: 		Properties props = prepSoloDispatch(Message.cmd_waitfortextmatchtimeoutscroll);
5305: 		props.setProperty(Message.PARAM_TEXT, text);
5306: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
5307: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5308: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
5309: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5310: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5311: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5312: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5313: 		catch(NumberFormatException x){}
5314: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5315: 		return getRemoteBooleanResult(success, Message.cmd_waitfortextmatchtimeoutscroll, Message.KEY_REMOTERESULTINFO);
5316: 	}
5317: 
5318: 	/**
5319: 	 * Waits for a text to be shown.  
5320: 	 * @param text - the text to wait for.
5321: 	 * @param minimumNumberOfMatches -- the minimum number of matches that are expected to be shown.  
5322: 	 * 0 means any number of matches. 
5323: 	 * @param timeout -- milliseconds to wait before timeout. 
5324: 	 * @param scroll -- true if scrolling should be performed. 
5325: 	 * @param onlyVisible -- true if only visible text views should be waited for 
5326: 	 * @return true if text is shown and false if it is not shown before the timeout. 
5327: 	 * Field _last_remote_result contains the returned Properties object.
5328: 	 * <p>
5329: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5330: 	 * used here and in the device/emulator Robotium Test Runner.
5331: 	 * <p><pre>
5332: 	 * (in ):KEY_TARGET=target_solo
5333: 	 * (in ):KEY_COMMAND=cmd_waitfortextmatchtimeoutscrollvisible
5334: 	 * (out):KEY_ISREMOTERESULT=true
5335: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5336: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the text appear
5337: 	 * (in ):PARAM_TEXT=String text to wait for.
5338: 	 * (in ):PARAM_MINIMUMMATCHES=int
5339: 	 * (in ):PARAM_TIMEOUT=milliseconds.
5340: 	 * (in ):PARAM_SCROLL=true/false
5341: 	 * (in ):PARAM_ONLYVISIBLE=true/false
5342: 	 * </pre>
5343: 	 * @throws RemoteException -- if remote execution raised an Exception
5344: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5345: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5346: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5347: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5348: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5349: 	 * @see #_last_remote_result
5350: 	 * @see Message
5351: 	 */
5352: 	public boolean waitForText(String text, int minimumNumberOfMatches, long timeout, boolean scroll, boolean onlyVisible) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5353: 		Properties props = prepSoloDispatch(Message.cmd_waitfortextmatchtimeoutscrollvisible);
5354: 		props.setProperty(Message.PARAM_TEXT, text);
5355: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
5356: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5357: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
5358: 		props.setProperty(Message.PARAM_ONLYVISIBLE, String.valueOf(onlyVisible));
5359: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5360: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5361: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5362: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5363: 		catch(NumberFormatException x){}
5364: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5365: 		return getRemoteBooleanResult(success, Message.cmd_waitfortextmatchtimeoutscrollvisible, Message.KEY_REMOTERESULTINFO);
5366: 	}
5367: 
5368: 	/**
5369: 	 * Waits for a View of a certain classname (or extended subclass) to be shown. Default timeout is 20 seconds.  
5370: 	 * @param classname - the View classname to wait for.
5371: 	 * @return true if View is shown and false if it is not shown before the timeout. 
5372: 	 * Field _last_remote_result contains the returned Properties object.
5373: 	 * <p>
5374: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5375: 	 * used here and in the device/emulator Robotium Test Runner.
5376: 	 * <p><pre>
5377: 	 * (in ):KEY_TARGET=target_solo
5378: 	 * (in ):KEY_COMMAND=cmd_waitforviewclass
5379: 	 * (out):KEY_ISREMOTERESULT=true
5380: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5381: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the view appear
5382: 	 * (in ):PARAM_CLASS=String classname to wait for.
5383: 	 * </pre>
5384: 	 * @throws RemoteException -- if remote execution raised an Exception
5385: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5386: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5387: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5388: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5389: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5390: 	 * @see #_last_remote_result
5391: 	 * @see Message
5392: 	 */
5393: 	public boolean waitForView(String classname) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5394: 		Properties props = prepSoloDispatch(Message.cmd_waitforviewclass);
5395: 		props.setProperty(Message.PARAM_CLASS, classname);
5396: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5397: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5398: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5399: 		catch(NumberFormatException x){}
5400: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5401: 		return getRemoteBooleanResult(success, Message.cmd_waitforviewclass, Message.KEY_REMOTERESULTINFO);
5402: 	}
5403: 	
5404: 	/**
5405: 	 * Waits for a View of a certain classname (or extended subclass) to be shown.  
5406: 	 * @param classname - the classname to wait for.
5407: 	 * @param minimumNumberOfMatches -- the minimum number of matches that are expected to be shown.  
5408: 	 * 0 means any number of matches. 
5409: 	 * @param timeout -- milliseconds to wait before timeout. 
5410: 	 * @return true if View is shown and false if it is not shown before the timeout. 
5411: 	 * Field _last_remote_result contains the returned Properties object.
5412: 	 * <p>
5413: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5414: 	 * used here and in the device/emulator Robotium Test Runner.
5415: 	 * <p><pre>
5416: 	 * (in ):KEY_TARGET=target_solo
5417: 	 * (in ):KEY_COMMAND=cmd_waitforviewclassmatchtimeout
5418: 	 * (out):KEY_ISREMOTERESULT=true
5419: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5420: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the view appear
5421: 	 * (in ):PARAM_CLASS=String classname to wait for.
5422: 	 * (in ):PARAM_MINIMUMMATCHES=int
5423: 	 * (in ):PARAM_TIMEOUT=milliseconds.
5424: 	 * </pre>
5425: 	 * @throws RemoteException -- if remote execution raised an Exception
5426: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5427: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5428: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5429: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5430: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5431: 	 * @see #_last_remote_result
5432: 	 * @see Message
5433: 	 */
5434: 	public boolean waitForView(String classname, int minimumNumberOfMatches, long timeout) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5435: 		Properties props = prepSoloDispatch(Message.cmd_waitforviewclassmatchtimeout);
5436: 		props.setProperty(Message.PARAM_CLASS, classname);
5437: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
5438: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5439: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5440: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5441: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5442: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5443: 		catch(NumberFormatException x){}
5444: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5445: 		return getRemoteBooleanResult(success, Message.cmd_waitforviewclassmatchtimeout, Message.KEY_REMOTERESULTINFO);
5446: 	}
5447: 	
5448: 	/**
5449: 	 * Waits for a View of a certain classname (or extended subclass) to be shown.  
5450: 	 * @param classname - the classname to wait for.
5451: 	 * @param minimumNumberOfMatches -- the minimum number of matches that are expected to be shown.  
5452: 	 * 0 means any number of matches. 
5453: 	 * @param timeout -- milliseconds to wait before timeout. 
5454: 	 * @param scroll -- true if scrolling should be performed 
5455: 	 * @return true if View is shown and false if it is not shown before the timeout. 
5456: 	 * Field _last_remote_result contains the returned Properties object.
5457: 	 * <p>
5458: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5459: 	 * used here and in the device/emulator Robotium Test Runner.
5460: 	 * <p><pre>
5461: 	 * (in ):KEY_TARGET=target_solo
5462: 	 * (in ):KEY_COMMAND=cmd_waitforviewclassmatchtimeoutscroll
5463: 	 * (out):KEY_ISREMOTERESULT=true
5464: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5465: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the view appear
5466: 	 * (in ):PARAM_CLASS=String classname to wait for.
5467: 	 * (in ):PARAM_MINIMUMMATCHES=int
5468: 	 * (in ):PARAM_TIMEOUT=milliseconds.
5469: 	 * (in ):PARAM_SCROLL=true/false
5470: 	 * </pre>
5471: 	 * @throws RemoteException -- if remote execution raised an Exception
5472: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5473: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5474: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5475: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5476: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5477: 	 * @see #_last_remote_result
5478: 	 * @see Message
5479: 	 */
5480: 	public boolean waitForView(String classname, int minimumNumberOfMatches, long timeout, boolean scroll) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5481: 		Properties props = prepSoloDispatch(Message.cmd_waitforviewclassmatchtimeoutscroll);
5482: 		props.setProperty(Message.PARAM_CLASS, classname);
5483: 		props.setProperty(Message.PARAM_MINIMUMMATCHES, String.valueOf(minimumNumberOfMatches));
5484: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5485: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
5486: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5487: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5488: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5489: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5490: 		catch(NumberFormatException x){}
5491: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5492: 		return getRemoteBooleanResult(success, Message.cmd_waitforviewclassmatchtimeoutscroll, Message.KEY_REMOTERESULTINFO);
5493: 	}
5494: 
5495: 	/**
5496: 	 * Waits for the View with the previously captured UID reference. Default timeout is 20 seconds. 
5497: 	 * @param uidView - the View to wait for.
5498: 	 * @return true if View is shown and false if it is not shown before the timeout. 
5499: 	 * Field _last_remote_result contains the returned Properties object.
5500: 	 * <p>
5501: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5502: 	 * used here and in the device/emulator Robotium Test Runner.
5503: 	 * <p><pre>
5504: 	 * (in ):KEY_TARGET=target_solo
5505: 	 * (in ):KEY_COMMAND=cmd_waitforviewreference
5506: 	 * (out):KEY_ISREMOTERESULT=true
5507: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5508: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the view appear
5509: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
5510: 	 * (out):PARAM_CLASS=String The full qualified class name of the View.
5511: 	 * </pre>
5512: 	 * @throws RemoteException -- if remote execution raised an Exception
5513: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5514: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5515: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5516: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5517: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5518: 	 * @see #_last_remote_result
5519: 	 * @see Message
5520: 	 */
5521: 	public boolean waitForViewUID(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5522: 		Properties props = prepSoloDispatch(Message.cmd_waitforviewreference);
5523: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
5524: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5525: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5526: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5527: 		catch(NumberFormatException x){}
5528: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5529: 		return getRemoteBooleanResult(success, Message.cmd_waitforviewreference, Message.KEY_REMOTERESULTINFO);
5530: 	}
5531: 	
5532: 	/**
5533: 	 * Waits for the View with the previously captured UID reference. 
5534: 	 * @param uidView - the View to wait for.
5535: 	 * @param timeout -- milliseconds to wait before timeout. 
5536: 	 * @param scroll -- true if scrolling should be performed 
5537: 	 * @return true if View is shown and false if it is not shown before the timeout. 
5538: 	 * Field _last_remote_result contains the returned Properties object.
5539: 	 * <p>
5540: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5541: 	 * used here and in the device/emulator Robotium Test Runner.
5542: 	 * <p><pre>
5543: 	 * (in ):KEY_TARGET=target_solo
5544: 	 * (in ):KEY_COMMAND=cmd_waitforviewreferencetimeoutscroll
5545: 	 * (out):KEY_ISREMOTERESULT=true
5546: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5547: 	 * (out):KEY_REMOTERESULTINFO=String:boolean:if the view appear
5548: 	 * (in ):PARAM_REFERENCE=String UID reference for the View.
5549: 	 * (in ):PARAM_TIMEOUT=milliseconds
5550: 	 * (in ):PARAM_SCROLL=true/false
5551: 	 * (out):PARAM_CLASS=String The full qualified class name of the View.
5552: 	 * </pre>
5553: 	 * @throws RemoteException -- if remote execution raised an Exception
5554: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5555: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5556: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5557: 	 * @throws RemoteSoloException  -- if the command was not executed successfully in remote side. 
5558: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5559: 	 * @see #_last_remote_result
5560: 	 * @see Message
5561: 	 */
5562: 	public boolean waitForViewUID(String uidView, int timeout, boolean scroll) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException, RemoteSoloException{
5563: 		Properties props = prepSoloDispatch(Message.cmd_waitforviewreferencetimeoutscroll);
5564: 		props.setProperty(Message.PARAM_REFERENCE, uidView);
5565: 		props.setProperty(Message.PARAM_TIMEOUT, String.valueOf(timeout));
5566: 		props.setProperty(Message.PARAM_SCROLL, String.valueOf(scroll));
5567: 		int stime = timeout > 0 ? (int)Math.ceil(timeout/1000) : 0;
5568: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, stime + tcp_delay);
5569: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5570: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5571: 		catch(NumberFormatException x){}
5572: 		boolean success = (rc==Message.STATUS_REMOTERESULT_OK);
5573: 		return getRemoteBooleanResult(success, Message.cmd_waitforviewreferencetimeoutscroll, Message.KEY_REMOTERESULTINFO);
5574: 	}	
5575: 	
5576: 	/**
5577: 	 * Returns a Dimension representing the emulator/device's screen size.
5578: 	 * If unexpected something happened, a null will be returned.
5579: 	 * Field _last_remote_result contains the returned Properties object.
5580: 	 * <p>
5581: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5582: 	 * used here and in the device/emulator Robotium Test Runner.
5583: 	 * <p><pre>
5584: 	 * (in ):KEY_TARGET=target_solo
5585: 	 * (in ):KEY_COMMAND=cmd_getscreensize
5586: 	 * (out):KEY_ISREMOTERESULT=true
5587: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5588: 	 * (out):KEY_REMOTERESULTINFO=String containing the width and height of emulator/device
5589: 	 * <p>
5590: 	 * REMOTERESULTINFO content format: ";width;height"
5591: 	 * <p>
5592: 	 * The first character is the delimiter used to delimit width and height.
5593: 	 * </pre>
5594: 	 * @throws RemoteException -- if remote execution raised an Exception
5595: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5596: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5597: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5598: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5599: 	 * @see #_last_remote_result
5600: 	 * @see Message
5601: 	 */
5602: 	public Dimension getScreenSize() throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5603: 		Dimension dim = null;
5604: 		try{
5605: 			ArrayList<String> wh = getCurrentObjects(Message.cmd_getscreensize);
5606: 			dim = new Dimension(Integer.parseInt(wh.get(0)), Integer.parseInt(wh.get(1)));
5607: 		}catch(Exception e){}
5608: 		return dim;
5609: 	}
5610: 	
5611: 	/**
5612: 	 * @param uidView - the View to get location.
5613: 	 * @return a Rectangle representing the location of View on screen.
5614: 	 * (x, y) is the upper-left point of the View.
5615: 	 * If unexpected something happened, a null will be returned.
5616: 	 * Field _last_remote_result contains the returned Properties object.
5617: 	 * <p>
5618: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5619: 	 * used here and in the device/emulator Robotium Test Runner.
5620: 	 * <p><pre>
5621: 	 * (in ):KEY_TARGET=target_solo
5622: 	 * (in ):KEY_COMMAND=cmd_getscreensize
5623: 	 * (in ):PARAM_REFERENCE=String: the view's ID
5624: 	 * (out):KEY_ISREMOTERESULT=true
5625: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5626: 	 * (out):KEY_REMOTERESULTINFO=String containing the location of view on screen
5627: 	 * <p>
5628: 	 * REMOTERESULTINFO content format: ";x;y;width;height"
5629: 	 * <p>
5630: 	 * The first character is the delimiter used to delimit x, y, width and height.
5631: 	 * </pre>
5632: 	 * @throws RemoteException -- if remote execution raised an Exception
5633: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5634: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5635: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5636: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5637: 	 * @see #_last_remote_result
5638: 	 * @see Message
5639: 	 */
5640: 	public Rectangle getViewLocation(String uidView) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5641: 		Rectangle loc = null;
5642: 		try{
5643: 			ArrayList<String> xywh = null;
5644: 			
5645: 			ArrayList list = new ArrayList(0);
5646: 			Properties props = prepSoloDispatch(Message.cmd_getviewlocation);
5647: 			props.setProperty(Message.PARAM_REFERENCE, String.valueOf(uidView));
5648: 			_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5649: 			int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5650: 			try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5651: 			catch(NumberFormatException x){}
5652: 			if(rc==Message.STATUS_REMOTERESULT_OK){
5653: 				String info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5654: 				xywh = parseStringArrayList(info);
5655: 			}
5656: 			
5657: 			loc = new Rectangle(Integer.parseInt(xywh.get(0)),
5658: 					            Integer.parseInt(xywh.get(1)),
5659: 					            Integer.parseInt(xywh.get(2)),
5660: 					            Integer.parseInt(xywh.get(3)));
5661: 		}catch(Exception e){}
5662: 		return loc;
5663: 	}
5664: 	
5665: 	/**
5666: 	 * @param uid - the TextView to get its text value.
5667: 	 * @return String, the TextView's text value.
5668: 	 * If unexpected something happened, a null will be returned.
5669: 	 * Field _last_remote_result contains the returned Properties object.
5670: 	 * <p>
5671: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5672: 	 * used here and in the device/emulator Robotium Test Runner.
5673: 	 * <p><pre>
5674: 	 * (in ):KEY_TARGET=target_solo
5675: 	 * (in ):KEY_COMMAND=cmd_getscreensize
5676: 	 * (in ):PARAM_REFERENCE=String: the view's ID
5677: 	 * (out):KEY_ISREMOTERESULT=true
5678: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5679: 	 * (out):KEY_REMOTERESULTINFO=String the TextView's text value
5680: 	 * 
5681: 	 * </pre>
5682: 	 * @throws RemoteException -- if remote execution raised an Exception
5683: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5684: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5685: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5686: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5687: 	 * @see #_last_remote_result
5688: 	 * @see Message
5689: 	 */
5690: 	public String getTextViewValue(String uid) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5691: 		String info = null;
5692: 		try{
5693: 			Properties props = prepSoloDispatch(Message.cmd_gettextviewvalue);
5694: 			props.setProperty(Message.PARAM_REFERENCE, String.valueOf(uid));
5695: 			_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5696: 			int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5697: 			try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5698: 			catch(NumberFormatException x){}
5699: 			if(rc==Message.STATUS_REMOTERESULT_OK){
5700: 				info = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5701: 			}
5702: 		}catch(Exception e){}
5703: 		return info;
5704: 	}
5705: 	
5706: 	/**
5707: 	 * Get the image of View accroding to String UID reference.
5708: 	 *   
5709: 	 * @param viewID 			The string uid of the View.
5710: 	 * @return BufferedImage 	The image of the View.  
5711: 	 * Field _last_remote_result contains the returned Properties object.
5712: 	 * <p>
5713: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5714: 	 * used here and in the device/emulator Robotium Test Runner.
5715: 	 * <p><pre>
5716: 	 * (in ):KEY_TARGET=target_solo
5717: 	 * (in ):KEY_COMMAND=cmd_getguiimage
5718: 	 * (in ):PARAM_ID=String
5719: 	 * (out):KEY_ISREMOTERESULT=true
5720: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5721: 	 * (out):KEY_REMOTERESULTINFO=String containing the encoded png image bytes of the view./Or error message.
5722: 	 * <p>
5723: 	 * 
5724: 	 * <p>
5725: 	 * </pre>
5726: 	 * @throws RemoteException -- if remote execution raised an Exception
5727: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5728: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5729: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5730: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5731: 	 * @see #_last_remote_result
5732: 	 * @see Message
5733: 	 */
5734: 	public BufferedImage getGUIImage(String viewID) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5735: 		String debugmsg = getClass().getName()+".getGUIImage() ";
5736: 		BufferedImage image = null;
5737: 
5738: 		Properties props = prepSoloDispatch(Message.cmd_getguiimage);
5739: 		props.setProperty(Message.PARAM_ID, viewID);
5740: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5741: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5742: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5743: 		catch(NumberFormatException x){}
5744: 		
5745: 		if(rc==Message.STATUS_REMOTERESULT_OK){
5746: 			try {
5747: 				//Get the encoded png image string from the remote result
5748: 				String encodedPNGImageString = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5749: 				ByteArrayInputStream instream = new ByteArrayInputStream(encodedPNGImageString.getBytes());
5750: 				//Create the file to contain the png image
5751: 				File fn = File.createTempFile("remoteAndroidView", ".PNG");
5752: 				FileOutputStream outstream = new FileOutputStream(fn);
5753: 				//Decode the "encoded png image string" to a normal png image.
5754: 				Base64Decoder decoder = new Base64Decoder(instream, outstream);
5755: 				decoder.process();
5756: 				instream.close();
5757: 				outstream.close();
5758: 				//Read the png image file
5759: 				image = ImageIO.read(fn);
5760: 			} catch (IOException e) {
5761: 				debug(debugmsg+" Met Exception "+e.getMessage());
5762: 			} catch (Base64FormatException e) {
5763: 				debug(debugmsg+" Met Exception "+e.getMessage());
5764: 			}
5765: 		}else{
5766: 			String errorMsg = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5767: 			debug(debugmsg+" Fail to get image: "+errorMsg);
5768: 		}
5769: 		
5770: 		return image;
5771: 	}
5772: 	
5773: 	/**
5774: 	 * Get the class name of View accroding to String UID reference.
5775: 	 *   
5776: 	 * @param viewID 			The string uid of the View.
5777: 	 * @return String		 	The class name of the View./ or null if meet error.  
5778: 	 * Field _last_remote_result contains the returned Properties object.
5779: 	 * <p>
5780: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5781: 	 * used here and in the device/emulator Robotium Test Runner.
5782: 	 * <p><pre>
5783: 	 * (in ):KEY_TARGET=target_solo
5784: 	 * (in ):KEY_COMMAND=cmd_getviewclassname
5785: 	 * (in ):PARAM_ID=String
5786: 	 * (out):KEY_ISREMOTERESULT=true
5787: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5788: 	 * (out):KEY_REMOTERESULTINFO=String containing the class name of the view.
5789: 	 * <p>
5790: 	 * 
5791: 	 * <p>
5792: 	 * </pre>
5793: 	 * @throws RemoteException -- if remote execution raised an Exception
5794: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5795: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5796: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5797: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5798: 	 * @see #_last_remote_result
5799: 	 * @see Message
5800: 	 */	
5801: 	public String getViewClassName(String viewID) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5802: 		String debugmsg = getClass().getName()+".getViewClassName() ";
5803: 		String viewname = null;
5804: 		
5805: 		Properties props = prepSoloDispatch(Message.cmd_getviewclassname);
5806: 		props.setProperty(Message.PARAM_ID, viewID);
5807: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5808: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5809: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5810: 		catch(NumberFormatException x){}
5811: 		
5812: 		if(rc==Message.STATUS_REMOTERESULT_OK){
5813: 			viewname = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5814: 		}else{
5815: 			String errorMsg = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5816: 			debug(debugmsg+" Fail to get class name: "+errorMsg);
5817: 		}
5818: 		
5819: 		return viewname;
5820: 	}	
5821: 
5822: 	/**
5823: 	 * Take a screenshot and retrieve the stored JPG image.
5824: 	 * The app must have the android.permission.WRITE_EXTERNAL_STORAGE permission.
5825: 	 * @param filename 			The root filename for the returned JPG image.
5826: 	 * @return BufferedImage 	The JPG image of the screenshot. null on error.  
5827: 	 * Field _last_remote_result contains the returned Properties object. Upon success, 
5828: 	 * there will also be a PARAM_NAME+"FILE" property containing an absolute file path to 
5829: 	 * the temporary binary file containing the JPG image. 
5830: 	 * <p>
5831: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5832: 	 * used here and in the device/emulator Robotium Test Runner.
5833: 	 * <p><pre>
5834: 	 * (in ):KEY_TARGET=target_solo
5835: 	 * (in ):KEY_COMMAND=cmd_takescreenshot
5836: 	 * (in ):PARAM_NAME=String
5837: 	 * (out):KEY_ISREMOTERESULT=true
5838: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5839: 	 * (out):KEY_REMOTERESULTINFO=String containing the encoded JPG image./Or an error message.
5840: 	 * (out):PARAM_NAME+"FILE"=Absolute Path to temp screenshot image.
5841: 	 * <p>
5842: 	 * 
5843: 	 * <p>
5844: 	 * </pre>
5845: 	 * @throws RemoteException -- if remote execution raised an Exception
5846: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5847: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5848: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5849: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5850: 	 * @see #_last_remote_result
5851: 	 * @see Message
5852: 	 */
5853: 	public BufferedImage takeScreenshot(String filename) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5854: 		String debugmsg = getClass().getName()+".takeScreenshot(filename) ";
5855: 		BufferedImage image = null;
5856: 
5857: 		Properties props = prepSoloDispatch(Message.cmd_takescreenshot);
5858: 		props.setProperty(Message.PARAM_NAME, filename);
5859: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5860: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5861: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5862: 		catch(NumberFormatException x){}
5863: 		
5864: 		if(rc==Message.STATUS_REMOTERESULT_OK){
5865: 			try {
5866: 				//Get the encoded png image string from the remote result
5867: 				String encodedImageString = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5868: 				ByteArrayInputStream instream = new ByteArrayInputStream(encodedImageString.getBytes());
5869: 				//Create the file to contain the jpg image
5870: 				File fn = File.createTempFile(filename, ".jpg");
5871: 				FileOutputStream outstream = new FileOutputStream(fn);
5872: 				//Decode the "encoded jpg image string" to a normal jpg image.
5873: 				Base64Decoder decoder = new Base64Decoder(instream, outstream);
5874: 				decoder.process();
5875: 				instream.close();
5876: 				outstream.close();
5877: 				//Read the jpg image file
5878: 				image = ImageIO.read(fn);
5879: 				_last_remote_result.setProperty(Message.PARAM_NAME+"FILE", fn.getAbsolutePath());
5880: 			} catch (IOException e) {
5881: 				debug(debugmsg+" Met Exception "+e.getMessage());
5882: 			} catch (Base64FormatException e) {
5883: 				debug(debugmsg+" Met Exception "+e.getMessage());
5884: 			}
5885: 		}else{
5886: 			String errorMsg = _last_remote_result.getProperty(Message.KEY_REMOTERESULTINFO);
5887: 			debug(debugmsg+" Fail to get image: "+errorMsg);
5888: 		}
5889: 		
5890: 		return image;
5891: 	}
5892: 	
5893: 	/**
5894: 	 * Enter text into a given EditText.
5895: 	 * @param String UID reference for the EditText to enter text into. 
5896: 	 * @param text String to enter into the EditText field.
5897: 	 * @return true if the command executed successfully, false if it did not.  
5898: 	 * Field _last_remote_result contains the returned Properties object.
5899: 	 * <p>
5900: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5901: 	 * used here and in the device/emulator Robotium Test Runner.
5902: 	 * <p><pre>
5903: 	 * (in ):KEY_TARGET=target_solo
5904: 	 * (in ):KEY_COMMAND=cmd_typetextuid
5905: 	 * (out):KEY_ISREMOTERESULT=true
5906: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5907: 	 * (out):KEY_REMOTERESULTINFO=String  
5908: 	 * (in ):PARAM_REFERENCE=String UID 
5909: 	 * (in ):PARAM_TEXT=String 
5910: 	 * </pre>
5911: 	 * @throws RemoteException -- if remote execution raised an Exception
5912: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5913: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5914: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5915: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5916: 	 * @see #_last_remote_result
5917: 	 * @see Message
5918: 	 */
5919: 	public boolean typeText(String uidEditText, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5920: 		Properties props = prepSoloDispatch(Message.cmd_typetextuid);
5921: 		props.setProperty(Message.PARAM_REFERENCE, uidEditText);
5922: 		props.setProperty(Message.PARAM_TEXT, text);
5923: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5924: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5925: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5926: 		catch(NumberFormatException e){}
5927: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
5928: 	}
5929: 	
5930: 	/**
5931: 	 * Enter text in an EditText with a given index.
5932: 	 * @param index of the EditText. 0 if only one is available. 
5933: 	 * @param text String to enter into the EditText field.
5934: 	 * @return true if the command executed successfully, false if it did not.  
5935: 	 * Field _last_remote_result contains the returned Properties object.
5936: 	 * <p>
5937: 	 * The KEY_, PARAM_, STATUS_, cmd_, and target_ constants all come from the Message class and are 
5938: 	 * used here and in the device/emulator Robotium Test Runner.
5939: 	 * <p><pre>
5940: 	 * (in ):KEY_TARGET=target_solo
5941: 	 * (in ):KEY_COMMAND=cmd_typetext
5942: 	 * (out):KEY_ISREMOTERESULT=true
5943: 	 * (out):KEY_REMOTERESULTCODE=String:int:0=success/normal=STATUS_REMOTERESULT_OK
5944: 	 * (out):KEY_REMOTERESULTINFO=String  
5945: 	 * (in ):PARAM_INDEX=int 
5946: 	 * (in ):PARAM_TEXT=String 
5947: 	 * </pre>
5948: 	 * @throws RemoteException -- if remote execution raised an Exception
5949: 	 * @throws TimeoutException -- if remote command did not complete in timeout period.
5950: 	 * @throws ShutdownInvocationException -- if remote clients have shutdown unexpectedly.
5951: 	 * @throws IllegalThreadStateException -- if the command was not sent for some reason.
5952: 	 * @see SoloRemoteControl#performRemotePropsCommand(Properties, int, int, int)
5953: 	 * @see #_last_remote_result
5954: 	 * @see Message
5955: 	 */
5956: 	public boolean typeText(int index, String text) throws IllegalThreadStateException, RemoteException, TimeoutException, ShutdownInvocationException{
5957: 		Properties props = prepSoloDispatch(Message.cmd_typetext);
5958: 		props.setProperty(Message.PARAM_INDEX, String.valueOf(index));
5959: 		props.setProperty(Message.PARAM_TEXT, text);
5960: 		_last_remote_result = control.performRemotePropsCommand(props, default_ready_stimeout, default_running_stimeout, default_result_stimeout);
5961: 		int rc = Message.STATUS_REMOTERESULT_UNKNOWN;
5962: 		try{rc = Integer.parseInt(_last_remote_result.getProperty(Message.KEY_REMOTERESULTCODE));}
5963: 		catch(NumberFormatException e){}
5964: 		return rc==Message.STATUS_REMOTERESULT_OK ? true:false;
5965: 	}	
5966: }
