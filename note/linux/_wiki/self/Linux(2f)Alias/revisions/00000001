= Linux / Alias =
<<TableOfContents>>

== alias: replace your lengthy commands with shorter ones ==
http://blog.dipinkrishna.info/2009/08/alias-replace-your-lengthy-commands.html @2009/10/26

Create an alias, aliases allow a string to be substituted for a word when it is used as the ''first word of a simple command''. (有這個限制嗎?)

 {{{
Syntax
alias [-p] [name[=value] ...]
unalias [-a] [name ... ]

Key
-p   Print the current values
-a   Remove All aliases
 }}}

If arguments are supplied, an alias is defined for each name whose value is given.

__If no value is given, `alias` will print the current value of the alias.__

Without arguments or with the `-p` option, `alias` prints the list of aliases on the standard output in a form that allows them to be reused as input.

__`name` may not be `alias` or `unalias`.__

`unalias` may be used to remove each name from the list of defined aliases.

=== Examples ===

 {{{
Create an alias 'ls' that will actually run 'ls -F'
$ alias ls='ls -F'
$ ls
$ unalias ls
 }}}

 {{{
$ alias la='ls -lAXh --color=always' #Show all, sort by extension
$ alias ls-al='ls -al' #fix typo missing space
$ alias l="ls -l"
$ alias la="ls -la"
$ alias cd..='cd ..' #fix typo missing space
$ alias ..='cd ..'
$ alias .='echo $PWD'
$ alias rm='rm -i' #interactive = are you sure?
$ alias inst='sudo apt-get install'
 }}}

=== Make an alias permanent ===

Use your favorite text editor to create a file called `~/.bash_aliases`, and type the `alias` commands into the file. Make `.bash_aliases` run at login (or you can just execute it with `./.bash_aliases`; 在 Ubuntu 9.04 的 `.bashrc` 裡確實有這麼一段話: "You may want to put all your additions into a separate file like ~/.bash_aliases, instead of adding them here directly.")

__The first word of each simple command, if unquoted, is checked to see if it has an alias.__ If so, that word is replaced by the text of the alias. The alias name and the replacement text may contain any valid shell input, including shell metacharacters, with the exception that the alias name may not contain `=`.

__The ''first word'' of the replacement text is tested for aliases, but a word that is identical to an alias being expanded is not expanded a second time. This means that one may alias `ls` to "`ls -F`", for instance, and Bash does not try to recursively expand the replacement text.__

__If the last character of the alias value is a space or tab character, then the next command word following the alias is also checked for ''alias expansion''.[?]__

__There is no mechanism for using arguments in the replacement text, as in csh. If arguments are needed, a shell function should be used. '''Aliases are not expanded when the shell is not interactive, unless the `expand_aliases` shell option is set using `shopt`.'''__

`alias` and `unalias` are BASH built-ins. For almost every purpose, shell functions are preferred over aliases.

== Using Linux alias command to create an substituted for Linux command ==
http://www.labtestproject.com/linuxcmd/alias.html @2009/10/26

Using Linux `alias` command to allow a string of Linux command (long line of command) to be substituted for a simple word command on fedora core system.

 * Linux command name: `alias`

 . Sometime you need to issue log line of command, this string of command is hard to remember and may waste your valuable time. The best example of `alias` command is the Fedora Core `ll` command. Make note that the `ll` command actually a `ls` command include with some `ls` command options. The example below show how we could make alias to command and the use of `alias`.

 * Linux Command Description:

 . `alias` command allow a string of Linux command (long line of command) to be substituted for a simple word command.

 * Linux Command type:

 . Bash Builtins Command.

 {{{
[root@fedora ~]# type -t alias
builtin
 }}}
 
=== Using alias ===

Using `alias` command with no arguments or with the `-p` option prints the list of aliases in the form `alias NAME=VALUE` on standard output:

Execute `alias` command with no urguments:

 {{{
[root@fedora ~]# alias
alias cp='cp -i'
alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'
alias mc='. /usr/share/mc/bin/mc-wrapper.sh'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
 }}}
 
Execute `alias` command with `-p` option:

 {{{
[root@fedora ~]# alias -p
alias cp='cp -i'
alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'
alias mc='. /usr/share/mc/bin/mc-wrapper.sh'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
 }}}
 
__`alias` command can be use to check the Linux command to see if it has an alias:__

 {{{
[root@fedora ~]# alias ll
alias ll='ls -l --color=tty'

[root@fedora ~]# alias rm
alias rm='rm -i'

[root@fedora ~]# alias dir
-bash: alias: dir: not found
 }}}
 
=== Create alias to Linux command ===

The example below show the step by step to using `alias` command to make or create an alias (simple word command substituted) to Linux `shutdown` command:

 {{{
[root@fedora ~]# alias offline='shutdown -h now'
 }}}

To check new added alias for Linux `shutdown` command:

 {{{
[root@fedora ~]# alias offline
alias offline='shutdown -h now'

[root@fedora ~]# alias
alias cp='cp -i'
alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'
alias mc='. /usr/share/mc/bin/mc-wrapper.sh'
alias mv='mv -i'
alias offline='shutdown -h now' <-- 按照字母順序排列
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
 }}}
 
Now try issue the `offline` command:


 {{{
[root@fedora ~]# offline
Broadcast message from root (pts/1) (Thu Jan 12 23:33:52 2006):
The system is going down for system halt NOW!
[root@fedora ~]#
 }}}

The `offline` command above actually run as a Linux `shutdown -h now` command.

To remove an alias form the lists of alias, use the Linux `unalias` command. To make an alias permanent on our Linux system, edit the "`.bashrc`" (hidden file) on your home directory and add the alias for the Linux command:

Edited example of "`.bashrc`" file:

 {{{
# .bashrc
# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias offline='shutdown -h now'

# Source global definitions
if [ -f /etc/bashrc ]; then
. /etc/bashrc
fi
 }}}

Short usage synopsis(摘要)

 {{{
[root@fedora ~]# help -s alias
alias: alias [-p] [name[=value] ... ]
 }}}
 
__'''Helpful information about builtin commands: (原來 `help` 這麼好用!!)'''__

 {{{
[root@fedora ~]# help alias
alias: alias [-p] [name[=value] ... ]

'alias' with no arguments or with the -p option prints the list of aliases in the form alias NAME=VALUE on standard output.  Otherwise, an alias is defined for each NAME whose VALUE is given. A trailing space in VALUE causes the next word to be checked for alias substitution when the alias is expanded. Alias returns true unless a NAME is given for which no alias has been defined.
 }}}

On-line manuals in the "Info format":

 {{{
[root@fedora ~]# info alias
 }}}

== Cut down on Linux command-line typing with these 10 handy bash aliases (2008-05-14) ==
http://blogs.techrepublic.com.com/10things/?p=352&tag=rbxccnbtr1 @2009/10/25

The Linux desktop has come a long, long way, but there are still times when I have to use the command line. (I am a hardcore user, after all.) But even though I’m used to typing, spending hours upon hours with my fingers at the keyboard, I still grow tired of typing the same commands over and over. To reduce that tedium(乏味), I always add aliases to my `.bashrc` file.

=== What is an alias? ===

An alias is basically a shortcut for a command you place in your `~/.bashrc` file. Aliases cut down on typing and can save you from having to look up a command. (If your memory is like mine, this can be a real boon!)

__Aliases are set up near the bottom of the of the `.bashrc` file. You’ll see a commented-out section that indicates where you should put them. (確實只有 `.bashrc` 裡有被註解掉的 aliases, 但放在 `.profile` 會不會更好?)__ The format of an alias is:

 {{{
Alias NICKNAME='full command here'
 }}}

The keyword `alias` must be used. The nickname is what you will type at the command line. Make this nickname easy to remember. The `=` sign must also be used. After the `=` sign, you enter the full command, including flags and switches, enclosed in single quotes. (`.bashrc` 裡預設被註解掉的 alias 也是用單引號框住 commands) Once you are done, save the `.bashrc` file and open up a new terminal. I always find it best to leave the original terminal window open in case there are problems. In the new terminal, type the alias nickname and the command will run.

To get you started, I’ve compiled the following list of aliases I have used over the years to help make my command-line experience a bit easier.

Note: This information is also available as a PDF download.

=== #1: The ssh alias ===

This one should be a no-brainer for those of you who frequently secure shell into particular boxes. For this I add an alias like so:

 {{{
alias server_name='ssh -v -l USERNAME IP ADDRESS'
 }}}

Just change `server_name` to a memorable(難忘的) name for the server. Then, change `USERNAME` and `IP ADDRESS` to suit your needs.

=== #2: The ls aliases ===

Some distributions don’t include some of the handier `ls` commands. Generally, I like to see full listings instead of just filenames. For that I always include this alias:

 {{{
alias ll='ls -l'
 }}}

Another handy ls alias is this:

 {{{
alias la='ls -a'
 }}}

=== #3: The rm safety net ===

__'''I can’t tell you how many times I have “rm’d” a file I shouldn’t have “rm’d”. (大家都有過的經驗...)''' To avoid this, I add this alias:__

 {{{
alias rm='rm -i' # 可以置換掉自己
 }}}

Adding the `-i` flag it forces `rm` into interactive mode, which will ask you whether you’re sure you want to remove a file.

=== #4: The more useful df command ===

This handy tool tells you how much space you have left on a drive. Only thing is, if you run the command by itself it replies in 1K blocks. Most people would prefer to see this in terms of MB. To make that happen, add this alias:

 {{{
alias df='df -h'
 }}}

Now, every time you run the `df` command, the information will be returned in a human-readable format.

=== #5: The nonstandard Firefox ===

Many times, I install Firefox in strange directories (or have more than one version of Firefox installed for testing purposes). For this, I will add an alias to start the correct Firefox. Say, for example, I have the beta of the newest, upcoming Firefox release installed, as well as the current stable Firefox. They are both installed in my home directory in different subdirectories. I will then add two aliases like so:

 {{{
alias ff1='/home/jlwallen/firefox/firefox'
alias ff2='/home/jlwallen/firefoxb3/firefox'
 }}}

Now I can start the stable firefox with `ff1` or the beta with `ff2`.

=== #6: The bookmark alias ===

Speaking of Firefox, let’s create an alias to open up it to a specific URL: (從 Command Line 直接開啟網頁還滿特別的...)

 {{{
alias fftr='/home/jlwallen/firefox/firefox http://www.techrepublic.com'
 }}}

This alias will open Firefox directly to the !TechRepublic Web site.

=== #7: The constant editing of a file ===

There are certain files that I am constantly editing. For instance, when I used http://www.enlightenment.org/[Enlightenment] E16 (視窗外觀管理軟體; I now use E17), I was frequently editing the menu file `~/e16/menus/user_apps`. Instead of constantly opening up a terminal and entering `nano ~/.e16/menus/user_apps`, I used an alias that allowed me to type `emenu` and start editing. I used this alias:

 {{{
alias emenu='aterm nano -e ~/.e16/menus/user_apps'
 }}}

Now, I just enter the command `emenu` (or I can enter that in the run command dialog) to open up this file in an editor.

=== #8: The apt-get update ===

There are numerous ways to use an alias to help you with `apt-get`. One of my favorite is to add this alias:

 {{{
alias update='sudo apt-get update'
 }}}

I only need to enter `update` and will be prompted for the sudo password. You can modify this to suit your frequent `apt-get` needs.

=== #9: The rpm batch install ===

I like to do a lot of batch installing with `rpm`. I will typically dump a bunch of rpm files into an empty directory (created for this specific purpose) and run the command `rpm -ivh ~/RPM/*rpm`. Of course, an alias makes this even easier:

 {{{
alias brpm='rpm -ivh ~/RPM/*rpm'
 }}}

You have to create the `~/RPM` directory and enter the root password for this to work.

=== #10: The long, arduous(費力的) path ===

There are some paths that I often change to that seem to take eons(千萬年) to type. When I was working on the http://www.afterstep.org/[Afterstep] window manager, I had to constantly change to the `~/GNUstep/Library/AfterStep/start` to edit menus. After a while, you get tired of typing `cd ~/GNUstep/Library/AfterStep/start` just to get to the directory. So I added an alias like so:

 {{{
alias astart='cd ~/GNUstep/Library/AfterStep/start'
 }}}

Naturally, you can change that to fit your needs. This will save you a lot of typing.

So there you have it: a few simple bash aliases that will ease the load on your fingers. You can modify them to suit you, and they’ll give you a good start on creating your own handy bash aliases.

== How to use the alias command (2005-06-28) ==
http://www.linfo.org/alias.html @2009/10/25

__The `alias` command makes it possible to launch any command or group of commands (inclusive of any options, arguments and redirection) by entering a pre-set string (i.e., sequence of characters).__

That is, it allows a user to create simple names or abbreviations (even consisting of just a single character) for commands regardless of how complex the original commands are and then use them in the same way that ordinary commands are used.

A command is an instruction given by a user to tell a computer to do something. Commands are generally issued by typing them in at the command line (i.e., an all-text user interface) and then pressing the ENTER key, which passes them to the shell. A shell is a program that provides the traditional, text-only user interface for a Unix-like operating systems. Its primary function is to read commands and then execute (i.e., run) them.

The `alias` command is built into a number of shells including ash, bash (the default shell on most Linux systems), csh and ksh. It is one of several ways to customize the shell (another is setting environmental variables). __Aliases are recognized only by the shell in which they are created (呼應下面 "first switching to that shell" 與 "current shell" 的說法), and they apply only for the user that creates them, unless that user is the root (i.e., administrative) user, which can create aliases for any user.__

=== Listing and Creating Aliases ===

The general syntax for the `alias` command varies somewhat according to the shell. In the case of the bash shell it is

 {{{
alias [-p] [name="value"]
 }}}

When used with no arguments and with or without the `-p` option, `alias` provides a list of aliases that are in effect for the current user, i.e.,

 {{{
alias
 }}}

Some of the aliases listed are likely to be ''system-wide aliases'' (下面 Making Aliases Permanent 一節有做說明) that apply to all users and are created automatically for each new user for a particular shell. __Aliases for any other shell can be seen by first switching to that shell and then using the `alias` command as above. '''(所以它只會影響直接在提示字元下輸入的指令, 但不會影響到 Shell Scripts 的行為)'''__

 {{{
$ cd /tmp
$ echo 'rm a' > rma
$ chmod a+x rma
$ alias rm='rm -i'
$ touch a
$ rm a
rm: remove regular empty file `a'? y
$ touch a
$ ./rma # 沒有提示, 表示 Script 內部的 rm 不受 alias 影響
$ 
 }}}

`name` is the name of the new alias and `value` is the command(s) which it initiates. __The alias name and the ''replacement text'' can contain any valid shell input except for the equals sign (`=`).__

__The commands, including any options, arguments and redirection operators, are all enclosed within a single pair of quotation marks, which can be single quotes or double quotes. '''No spaces are permitted before or after the equals sign.'''__ Any number of aliases can be created simultaneously by enclosing the name in each name-value pair in quotes.

As a trivial example of alias creation, the alias `p` could be created for the commonly used `pwd` command, which shows the current location of the user in the directory structure (and which is an abbreviation for present working directory), by typing the following command and then pressing the ENTER key:

 {{{
alias p="pwd"
 }}}

Then, to show the current location, instead of typing `pwd`, the user would only have to type the letter `p` and press the ENTER key, i.e.,

 {{{
p
 }}}

__An alias can be created with the same name as the ''core'' name of a command (i.e., a command without any options or arguments). In such case, '''it is the alias that is called (i.e., activated) first when the name is used, rather than the command with the same name.'''__ For example, an alias named `ls` could be created for the command `ls -al` as follows:

 {{{
alias ls="ls -al"
 }}}

`ls` is a commonly used command that by default lists the names of the files and directories within the current directory (i.e., the directory in which the user is currently working). The `-a` option instructs `ls` to also show any hidden files and directories, and the `-l` option tells it to provide detailed information about each file and subdirectory.

__Such an alias can be disabled temporarily and the core command called by '''preceding it directly (i.e., with no spaces in between) with a backslash,''' i.e.,__

 {{{
\ls
 }}}

__It makes no difference whether double or single quotes are used when creating an alias. It can be slightly easier to use single quotes because this obviates(避免) the need to simultaneously use the shift key. (這樣也能省...)__ Thus, the above example could have been written as

 {{{
alias ls='ls -al'
 }}}

This example could be simplified even further, again with no adverse effect on performance, by using a single character instead of two characters for the alias name, for example:

 {{{
alias l='ls -al'
 }}}

__In addition to options, arguments can also be included in alias values.__ For example, to have the `ls` alias always display the contents of the `/etc` directory, it could be rewritten as:

 {{{
alias l='ls -al /etc'
 }}}

__Multiple commands can be included in the same alias by inserting them within the same pair of quotation marks and separating them with semicolons.__ For example, the alias pl could be created to first launch pwd and then immediately launch ls:

 {{{
alias pl='pwd; ls'
 }}}

__'''Aliases can even be created to call other aliases. (顯然與 Shell Scripts 的反應不同)'''__ For example, if the alias `ls` as shown earlier had already been created, then `pl` will launch it in the above example, otherwise it will launch the conventional `ls` command. If the aliases `p` and `l` shown in earlier examples have already been created, then the above example could alternatively be written as

 {{{
alias pl='p; l'
 }}}

The following is an example of creating two separate aliases simultaneously, as contrasted with creating a single alias that launches two separate commands: (2009-10-26 在 Ubuntu 9.04 實驗發現, 第二個 alias 只是在設定環境變數而已, 所以 `echo l` 會輸出 "`ls -al`")

 {{{
alias p="pwd"; l="ls -al"
 }}}

As an example of an alias for a series of commands linked by a pipe (represented by a vertical line), the alias `dir` can be created to generate a list of the names of and information about all of the subdirectories in the current directory:

 {{{
alias dir="ls -al | grep ^d"
 }}}

Here `ls -al` obtains a listing of all files and directories in the current directory. Its output is sent by the pipe to the filter `grep`, which then searches for lines beginning with the letter `d` (as all directories have a line returned by `ls -al` that begins with d). The caret (i.e., upward-pointing angular character) before `d` tells grep to search only for lines beginning with that letter.

Not only can options and arguments be used in the command(s) that an alias can substitute for, but they can also be used with an alias that has already been created. As a trivial example, supposing the alias `l` is created for the `ls` command:

 {{{
alias l="ls -a"
 }}}

__Then, the alias `l` could be used with any argument that the command `ls` could be used with.__ For example, to list the files and directories in the the `/etc` directory:

 {{{
l /etc
 }}}

__The alias `l` could also be used with any option that the command `ls` could be used with.__ For example:

 {{{
l -l /etc
 }}}

The `alias` command is unusual in that it only has a single option. That option, `-p`, tells it to display a list of the aliases for the current user on the ''current shell''. This might be helpful if used when creating an alias (先列出目前的 aliases 再建立其他 aliases, 沒什麼意義...), but it is, of course, redundant when the `alias` command is used without arguments.

=== Uses For Aliases ===

There are several types of uses for aliases. They include:

(1) Reducing the amount of typing that is necessary for commands or groups of commands that are long and/or tedious to type. These commands could include opening a file that is frequently used for studying or editing.

For example, if a user often accesses the Apache web server configuration file, which is `/etc/httpd/conf/httpd.conf` on Red Hat Linux 9, and uses the gedit text editor to read it, such user might type each time:

 {{{
gedit /etc/httpd/conf/httpd.conf
 }}}

However, this could quickly become tedious. It would be much easier to make this command into an alias and give it a short name, perhaps even a single letter, such as `a`:

 {{{
alias a="gedit /etc/httpd/conf/httpd.conf"
 }}}

Then, whenever the user wants to open the Apache configuration file using gedit, all that is necessary is to type the following single-letter command and press the ENTER key:

 {{{
a
 }}}

Note that the location of the Apache configuration file might be different on different systems. Also, ordinary users will likely only be able to open it for reading, and only the root user will be able to edit it (unless the permission settings are changed).

(2) A second type of use for aliases is specifying the default version of a program that exists in several versions on a system or specifying default options for a command. For example, the following alias would have the `ls` command always list all items in a directory rather than just the non-hidden ones:

 {{{
alias ls="ls -a"
 }}}

Another example of setting a more convenient default option for a command is `df`, which is used to show information about each partition on the system, including name, size, amount of space used, amount of space available and mountpoint (i.e., where it is attached to the system). The default version of df shows this data in terms of one kilobyte blocks (a holdover from the days when 1K was considered a lot of storage), but the `-h` (i.e., human readable) option makes the data easier to read by expressing it in terms of MB (megabytes) and GB (gigabytes). `-h` can be set as the default option with the following command:

 {{{
alias df="df -h"
 }}}

(3) A third use of aliases is correcting common misspellings of commands. For example, if a user has a habit of accidentally typing `pdw` instead of `pwd`, the following command will create an alias so that either spelling will work:

 {{{
alias pdw="pwd"
 }}}

(4) __A fourth use of aliases is '''increasing the safety of the system by making commands interactive.''' This forces the user to confirm that it is desired to perform a specific action and thereby reduces the risk from accidental or impulsive(衝動的) abuse of powerful commands.__ For example, the rm command, which can remove files and directories and make them virtually unrecoverable, can be made interactive as follows:

 {{{
alias rm="rm -i"
 }}}

Likewise, the risks associated with the `cp` command, which is used to copy the contents of one file to another file, can also be reduced by making it interactive by default. If the name for the file to be written to does not exist in the specified directory (by default the current directory), it will be created, but if it already exists, its contents will be overwritten. Thus, creating the following alias will reduce the chances of an unintended overwriting:

 {{{
alias cp="cp -i"
 }}}

(5) __Another use of aliases is standardizing the name of a command across multiple operating systems.__ For example, different versions of Linux or other operating systems contain different versions of the vi text editor (i.e., vi or its clones vim, nvi, elvis, etc.), but issuing the `vi` command on any of these divergent systems will generally launch the particular vi clone that is resident on that system (assuming that the appropriate alias has been created). For instance, Red Hat Linux installs vim by default, but issuing the command `vi` launches vim because the alias `alias vi="vim"` is also installed by default for all users for the bash, csh and tcsh shells. Of course, the command `vim` can also be used, but `vi` is easier for most people to remember.

For people accustomed to MS-DOS commands, the following aliases can be defined so that a Unix-like operating system appears to behave more like MS-DOS:

 {{{
alias dir="ls"
alias copy="cp"
alias rename="mv"
alias md="mkdir"
alias rd="rmdir"
alias del="rm -i"
 }}}

However, some experienced users of Unix-like systems contend that this may not be a good idea and that it might just make Linux seem more confusing, rather than simpler. __Instead, they advocate(主張) having Linux users become accustomed to the UNIX terminology right from the start.__

=== Making Aliases Permanent ===

The main disadvantage with the `alias` command is that any alias set up with it remains in effect only during the current login session (i.e., until the user logs out or the computer is shut down). Although this might not be much of a problem for systems which are rebooted (i.e., restarted) only infrequently (such as corporate database servers), it can be a nuisance(討厭的東西) for systems that are frequently rebooted (e.g., home computers).

Fortunately, however, any alias can be made more enduring (持久的; i.e., until it is explicitly removed) by writing it to the appropriate configuration file with a text editor. The name and location of such file can vary according to the system. __In the case of Red Hat Linux, an alias for any user can be added to the `.bashrc` file in that user's home directory. Because this file is read at login, the change will not take effect until the user has logged in again.__

Aliases for the root user can be made permanent by entering them in the `.bashrc` file in the root's home directory, i.e., in `/root/.bashrc`. __System-wide aliases can be put in the `/etc/bashrc` file. The system needs to be restarted before system-wide aliases can take effect.__

=== Removing Aliases ===

The command `unalias`, which is likewise built into bash and some other shells, is used to remove entries from the current user's list of aliases. Its syntax is

 {{{
unalias [-a] name(s)
 }}}

For example, the following would remove the alias `rm` which was created in an earlier example:

 {{{
unalias rm
 }}}

`unalias` removes not only aliases created during the current session but also permanent aliases that are listed in system configuration files. The `-a` option tells unalias to remove all aliases for the current user for the current shell.

__A second way to remove an alias is by using the alias command to create a new alias with the same name. '''This overwrites the existing alias with that name. (沒有巢狀的效果)'''__

A third way is to delete the alias from the appropriate configuration file using a text editor. For example, in the case of Red Hat, deleting an alias in the bash shell for a user named joe would involve removing the appropriate line in the file `/home/joe/.bashrc`. Likewise, an alias can be modified by editing the appropriate line in the configuration file. 

== Get IT Done: Handy aliases can simplify Linux administration (2002-12-19) ==
http://articles.techrepublic.com.com/5100-10878_11-5031700.html @2009/10/25

Takeaway: See how to use the `alias` command to set up custom commands that can execute administrative tasks.

When my network goes down for some strange reason, my first impulse(衝動) is to rush to the Linux server and run the `/etc/rc.d/init.d/network restart` command. (在 2002 的年代, 這種狀況應該常發生吧?) I've typed this command thousands of times, and each and every time I type it, I curse(咒罵) myself for not creating an alias.

In Linux-land, an alias is just what you'd think it would be: a command or argument that represents another. In this Daily Feature, I'll show you how to set aliases. I'll also list some handy-dandy (猜對方哪一只手裡握有東西的游戲) aliases you can copy and paste to make Linux administration a bit easier.

=== Setting aliases with the alias command ===

As you'd imagine, there's a command that will set aliases for you. The `alias` command allows you to set the alias by using the syntax alias `ALIAS_NAME='ALIAS_COMMAND'` (where `ALIAS_NAME` is the alias to be used and `ALIAS_COMMAND` is the command used for the alias). Let's use this command to set the alias `netr` for the command to restart the network on the Linux server. Before you run the command, you must change to the root user with the `su` command. To set the alias, enter the command `alias netr='/etc/rc.d/init.d/network restart'`. With this alias set, you need only run the command (as root) `netr` to restart the network.

=== Setting aliases manually ===

As the root user, open up the `~/.bashrc` file. You'll notice the aliases already set in this file:

 {{{
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
 }}}

__These aliases are there for obvious reasons. As the root user, you always want to verify every change you make before it's executed.__ In the example above, you can see that all removals (`rm`) are interactive, meaning the prompt will ask you if you're sure you want to delete the file. So are copies (`cp`) and moves (`mv`).

To add the `netr` alias to this file, simply add the `alias netr='/etc/rc.d/init.d/network restart'` command below the last alias listed. The revised alias section will look like this:

 {{{
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias netr='/etc/rc.d/init.d/network restart'
 }}}

=== Use your imagination ===

The first thing I do when I create aliases on a new Linux box is to look into the `/etc/rc.d/init.d` directly and see what's being used. The `/etc/rc.d/init.d` directory holds many key system start/stop/restart binaries. Of these binaries, the ones that are most commonly called are `httpd`, `ipchains`, `iptables`, `network`, `nfs`, `lpd`, and `smb`. Depending on what you're using each Linux machine for, you'll want to create start, stop, and restart (as well as status) aliases for each of these binaries.

Here's a list of some standard user aliases for you to cut and paste. Keep in mind that each alias can be made specific to your needs.

 * `alias ll='ls -l'` - gives a long listing of files.

 * `alias la='ls -a'` - shows hidden files in a listing.

 * `alias lal='ls -la'` - gives a long listing and includes hidden files.

 * `alias lless='ls | less'` - pipes the ls command through less so that listings can be scrolled.

 * `alias fetch='fetchmail -u USERNAME -p PASSWORD MAILSERVER -d 120` (where `USERNAME` is the mail account username, `PASSWORD` is the user’s mail account password, and `MAILSERVER` is the address of the mail server) - fetches mail from a remote system for the specified user at two-minute intervals.

 * `alias ap='aterm -tr -tint -fg white -bg green +sb -e pine'` - opens up Pine in a green-tinted, transparent aterm. (怎麼這麼多人在用 http://www.afterstep.org/aterm.php[Aterm]?)

 * `alias gr$p='grep -v '^#" /etc/syslog.conf | grep -v '^$'` - prints all the lines from `/etc/syslog.com` that are neither commented (starting with `#`) nor empty (`^$`). (命令可以很複雜, 甚至連 Pipelines 都來了...)

 * `alias tailmes='tail -f -n 10 /var/log/messages'` - follows the last 10 lines of the `/var/log/messages` file.

