= link:../selenium2.html[Selenium 2/WebDriver] / API =
:title: [Selenium][WebDriver] WebDriver API

從官網 http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions[FAQ] 的幾段文字，可以看出 WebDriver 很強調 “模仿使用者的行為“ 這件事：

 * It aims to mimic the behaviour of a real user, and as such interacts with the HTML of the application.
 * You can't interact with hidden elements without making them un-hidden.
 * WebDriver aims to emulate user interaction - so the API reflects the ways a user can interact with various elements.
 * Since a user cannot read text in a hidden element, WebDriver will not allow access to it as well.

WebDriver 會儘可能從 OS level 發出 native event，這跟過去 Selenium 1.0 用 JavaScript 模擬出使用者行為的做法大不相同。

WebDriver (object-oriented) API 支援 Python、Ruby、Java 及 C# 這些 binding，分別由熟悉不同語言特性的開發人員設計，所以 API 用起來不會覺得不順手。

[source,'https://code.google.com/p/selenium/wiki/JsonWireProtocol[JsonWireProtocol - selenium]']
________________________________________________________________________________
The protocol will assume that the WebDriver API has been "flattened", but there is an expectation that client implementations will take a more Object-Oriented approach, as demonstrated in the existing Java API.
________________________________________________________________________________

最主要的兩個操作介面是 `WebDriver` 跟 `WebElement`，前者代表 browser instance 本身，而後者則代表畫面上的某個 element。

理論上透過 WebDriver API 操作不同的 browser 的方式相同，最大的差異應該是開啟 browser 的部份。常見的操作有：

 * link:form.html[處理表單的內容]
 * link:locators.html[定位操作的目標]

[[language-bindings]]
object-oriented，設計更貼近不同 languages 的慣用方式（善用不同語言的特性），所以差異可能很大，尤其是開啟 browsers 的方式？ 角色類似於 Selenium 1/RC 的 client library/driver。

 * link:../python/python.html[Python]
 * link:../java/java.html[Java]
 * C#
 * Ruby

但有些概念是相通的，雖然各 language bindings 詮釋的方式不同：

 * WebDriver
 * WebElement
 * link:desired-capabilities.html[Desired Capabilities]

////////////////////////////////////////////////////////////////////////////////

 * Advanced User Interactions API?
 * [[blocking]] Blocking API （如果某個操作會造成 page reload，會自動等到 onload 時才回來，所以只要專注下一個操作即可）, implicit waiting
 * 看不到的可以讀取，但不能操作。
 * 不能直接引發 JavaScript events。
 * 取得 driver 時 session 就建立了，不需要像 Selenium 1/RC 一樣呼叫 `start()`。

////////////////////////////////////////////////////////////////////////////////

== 延伸閱讀 ==

 * link:../drivers/drivers.html[Drivers]
 * link:json-wire-protocol.html[JSON Wire Protocol]

== 參考資料 ==

.文件
--
 * http://docs.seleniumhq.org/projects/webdriver/[Selenium WebDriver]

////////////////////////////////////////////////////////////////////////////////
** WebDriver is designed in a simpler and more concise programming interface along with addressing some limitations in the Selenium-RC API.
** WebDriver is a compact Object Oriented API when compared to Selenium1.0 用過 Selenium 1/RC 的人就知道這個痛
** It drives the browser much more effectively and over comes the limitations of Selenium 1.x which affected our functional test coverage, like the file upload or download, pop-ups and dialogs barrier 這意謂著 Selenium 2/WebDriver 可以處理 native windows?? 這裡 "dialogs barrier" 的說法很棒!
** WebDriver overcomes the limitation of Selenium Rc's Single Host origin policy
** WebDriver is the name of the key interface against which tests should be written in Java. 那其他語言怎麼辦??
////////////////////////////////////////////////////////////////////////////////

 * http://docs.seleniumhq.org/docs/03_webdriver.jsp[Selenium WebDriver — Selenium Documentation]

////////////////////////////////////////////////////////////////////////////////
** Selenium-WebDriver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded. WebDriver’s goal is to supply a "well-designed object-oriented API" that provides improved support for modern advanced web-app testing problems.
** It aims to provide a friendly API that’s easy to explore and understand, easier to use than the Selenium-RC (1.0) API, which will help to make your tests easier to read and maintain.
** It’s not tied to any particular test framework, so it can be used equally well in a unit testing or from a plain old “main” method.
** it is entirely self-contained, and you usually don’t need to remember to start any additional processes or run any installers before using it, as opposed to the proxy server with Selenium-RC.
////////////////////////////////////////////////////////////////////////////////

 * https://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions[WebDriver FAQs]

////////////////////////////////////////////////////////////////////////////////
** It aims to mimic the behaviour of a real user, and as such interacts with the HTML of the application.
** WebDriver is part of Selenium. The main contribution that WebDriver makes is its API and the native drivers. 採用的是標準 W3C 的 API??
** Although it should be easy to use WebDriver directly, it should also be easy to use it as a building block for more sophisticated tools. Because of this, WebDriver has a small API. 強調跟 Selenium 1/RC 相比較為簡潔，足以組合出更多其他的應用。
** You can't interact with hidden elements without making them un-hidden. 像個使用者，看不到時當然不能對它操作。
** WebDriver aims to emulate user interaction - so the API reflects the ways a user can interact with various elements.
** Since a user cannot read text in a hidden element, WebDriver will not allow access to it as well. 不僅不能操作，連取得它的狀態都不行??
////////////////////////////////////////////////////////////////////////////////

 * http://seleniumhq.org/docs/appendix_migrating_from_rc_to_webdriver.html[Selenium Documentation > Migrating From Selenium RC to Selenium WebDriver > Why Migrate to WebDriver]
--

