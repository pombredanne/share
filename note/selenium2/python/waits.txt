= link:python.html[Selenium 2/WebDriver / Python] / Explicit and Implicit Waits =
:title: [Selenium][WebDriver][Python] Explicit and Implicit Waits

from selenium.webdriver.support.wait import WebDriverWait

  w = WebDriverWait(self.driver, self._timeout)
  w.until(lambda driver: driver.find_element_by_id("resultsInPage"))


--------------------------------------------------------------------------------
ERROR Message: u'Error Message => \'SYNTAX_ERR: DOM Exception 12\'\n caused by Request => {"headers":{"Accept":"application/json","Accept-Encoding":"identity","Connection":"close","Content-Length":"123","Content-Type":"application/json;charset=UTF-8","Host":"127.0.0.1:50412","User-Agent":"Python-urllib/2.7"},"httpVersion":"1.1","method":"POST","post":"{\\"using\\": \\"css selector\\", \\"sessionId\\": \\"dc5a0e60-2677-11e3-83e7-5f8677b2dc39\\", \\"value\\": \\"input[type=\\\\\\"password\\\\\\"]:visible\\"}","url":"/element","urlParsed":{"anchor":"","query":"","file":"element","directory":"/","path":"/element","relative":"/element","port":"","host":"","password":"","user":"","userInfo":"","authority":"","protocol":"","source":"/element","queryKey":{},"chunks":["element"]},"urlOriginal":"/session/dc5a0e60-2677-11e3-83e7-5f8677b2dc39/element"}' ; Screenshot: available via screen 
--------------------------------------------------------------------------------

== 參考資料 ==

.手冊
--
 * http://selenium.googlecode.com/svn/trunk/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html[selenium.webdriver.support.expected_conditions — Selenium 2.0 documentation]
 * http://selenium.googlecode.com/svn/trunk/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html[selenium.webdriver.support.wait — Selenium 2.0 documentation]
--

.文件
--
 * http://docs.seleniumhq.org/docs/04_webdriver_advanced.jsp[WebDriver: Advanced Usage — Selenium Documentation]

////////////////////////////////////////////////////////////////////////////////
** An explicit waits is code you define to wait for a certain condition to occur before proceeding further in the code. The worst case of this is `Thread.sleep()`, which sets the condition to an exact time period to wait. There are some convenience methods provided that help you write code that will wait only as long as required.
** `WebDriverWait` in combination with `ExpectedCondition` is one way this can be accomplished.
+
--------------------------------------------------------------------------------
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0

ff = webdriver.Firefox()
ff.get("http://somedomain/url_that_delays_loading")
try:
    element = WebDriverWait(ff, 10).until(EC.presence_of_element_located((By.ID, "myDynamicElement")))
finally:
    ff.quit()
--------------------------------------------------------------------------------
+
** This waits up to 10 seconds before throwing a `TimeoutException` or if it finds the element will return it in 0 - 10 seconds. `WebDriverWait` by default calls the `ExpectedCondition` every 500 milliseconds until it returns successfully. A successful return is for `ExpectedCondition` type is `Boolean` return true or not null return value for all other `ExpectedCondition` types.
** This example is also functionally equivalent to the first Implicit Waits example. 因為 implicit wait 在等待的條件就只是 presence 而已。
** Java happens to have convienence methods so you don’t have to code an `ExpectedCondition` class yourself or create your own utility package for them. 確實，從 Python 的角度來看，這個 API 設計得太 OO 了，一點都不 pythonic!!
** An implicit wait is to tell WebDriver to poll the DOM for a certain amount of time when trying to find an element or elements if they are not immediately available. The default setting is 0. Once set, the implicit wait is set for the life of the WebDriver object instance. 沒想到 implicit wait 的預設值是 0??
////////////////////////////////////////////////////////////////////////////////
--

.其他文件
--
 * http://element34.ca/blog/webdriverwait-and-python[Element 34 - WebDriverWait and Python] (2012-07-09)
--

