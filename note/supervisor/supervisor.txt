= Supervisor =

== 延伸閱讀 ==

 * link:install.html[Installation]
 * link:config.html[Configuration]

== 參考資料 ==

.網站
--
 * http://supervisord.org/[Supervisor: A Process Control System] ^https://diigo.com/0yyi5[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.
** It shares some of the same goals of programs like launchd, daemontools, and runit. Unlike some of these programs, it is not meant to be run as a substitute for init as “process id 1”. Instead it is meant to be used to control processes related to "a project or a customer", and is meant to start like any other program at boot time.
////////////////////////////////////////////////////////////////////////////////
--

.文件
--
 * http://supervisord.org/introduction.html[Introduction] ^https://diigo.com/0yyik[閱讀]^
////////////////////////////////////////////////////////////////////////////////
** It is written entirely in Python. Supervisor is known to work with Python 2.4 or later but will not work under any version of Python 3.
** It is often inconvenient to need to write rc.d scripts for every single process instance. rc.d scripts are a great lowest-common-denominator form of process initialization/autostart/management, but they can be painful to write and maintain.
** Additionally, rc.d scripts cannot automatically restart a crashed process and many programs do not restart themselves properly on a crash. Supervisord starts processes as its subprocesses, and can be configured to automatically restart them on a crash. 這才是重點!
** It’s often difficult to get accurate up/down status on processes on UNIX. Pidfiles often lie. Supervisord starts processes as subprocesses, so it always knows the true up/down status of its children and can be queried conveniently for this data. 感覺 PID files 的做法很糟??
** Users who need to control process state often need only to do that. They don’t want or need full-blown shell access to the machine on which the processes are running. It’s usually the case that it’s perfectly fine to allow “normal” people to stop or restart such a process, but providing them with shell access is often impractical, and providing them with root access or sudo access is often impossible. 確實!
** If supervisord is started as root, it is possible to allow “normal” users to control such processes without needing to explain the intricacies of the problem to them. Supervisorctl allows a very limited form of access to the machine, essentially allowing users to see process status and control supervisord-controlled subprocesses by emitting “stop”, “start”, and “restart” commands from a simple shell or web UI.
** Supervisor allows you to assign priorities to processes, and allows user to emit commands via the supervisorctl client like “start all”, and “restart all”, which starts them in the preassigned priority order. Additionally, processes can be grouped into “process groups” and a set of logically related processes can be stopped and started as a unit.
** Supervisor is configured through a simple INI-style config file that’s easy to learn.
** You can configure Supervisor to provide a local or remote command line (via XML-RPC) and web interface. 酷！
** Supervisor starts its subprocesses via fork/exec and subprocesses don’t daemonize. The operating system signals Supervisor immediately when a process terminates, unlike some solutions that rely on troublesome PID files and periodic polling to restart failed processes.
** The server piece of supervisor is named `supervisord`. It is responsible for starting child programs at its own invocation, responding to commands from clients, restarting crashed or exited subprocesseses, logging its subprocess stdout and stderr output, and generating and handling “events” corresponding to points in subprocess lifetimes.
** The server process uses a configuration file. This is typically located in `/etc/supervisord.conf`.
** The command-line client piece of the supervisor is named `supervisorctl`. It provides a "shell-like interface" (如果沒帶參數的話) to the features provided by supervisord. From `supervisorctl`, a user can connect to different `supervisord` processes (什麼情況下要分多個 supervisord? 可以分開控制帳密??), get status on the subprocesses controlled by, stop and start subprocesses of, and get lists of running processes of a supervisord.
** The command-line client talks to the server across a UNIX domain socket or an internet (TCP) socket.
** The client process typically uses the same configuration file as the server but any configuration file with a `[supervisorctl]` section in it will work.
////////////////////////////////////////////////////////////////////////////////
--

