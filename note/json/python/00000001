= Python / Official / Library Reference - 18. Internet Data Handling =
http://docs.python.org/library/netdata.html
<<TableOfContents>>

== 18.1. email — An email and MIME handling package ==
http://docs.python.org/library/email @2010/12/10

New in version 2.2.

__The `email` package is a library for managing email messages, including MIME and other RFC 2822-based message documents. It subsumes most of the functionality in several older standard modules such as `rfc822`, `mimetools`, `multifile`, and other non-standard packages such as `mimecntl`. It is specifically not designed to do any sending of email messages to SMTP (RFC 2821), NNTP, or other servers; those are functions of modules such as `smtplib` and `nntplib`. The `email` package attempts to be as RFC-compliant as possible, supporting in addition to RFC 2822, such MIME-related RFCs as RFC 2045, RFC 2046, RFC 2047, and RFC 2231.__

__The primary distinguishing feature of the `email` package is that it splits the parsing and generating of email messages from the ''internal object model representation'' of email. Applications using the `email` package deal primarily with objects; you can add sub-objects to messages, remove sub-objects from messages, completely re-arrange the contents, etc. There is a separate parser and a separate generator which handles the transformation from flat text to the object model, and then back to flat text again. There are also handy subclasses for some common MIME object types, and a few miscellaneous utilities that help with such common tasks as extracting and parsing ''message field values'', creating ''RFC-compliant dates'', etc.__

The following sections describe the functionality of the `email` package. The ordering follows a progression that should be common in applications: an email message is read as flat text from a file or other source, the text is parsed to produce the object structure of the email message, this structure is manipulated, and finally, the object tree is rendered back into flat text.

It is perfectly feasible to create the object structure out of whole cloth — i.e. completely from scratch. From there, a similar progression can be taken as above.

Also included are detailed specifications of all the classes and modules that the `email` package provides, the exception classes you might encounter while using the `email` package, some auxiliary utilities, and a few examples. For users of the older `mimelib` package, or previous versions of the `email` package, a section on differences and porting is provided.

See also:

 * Module `smtplib` - SMTP protocol client
 * Module `nntplib` - NNTP protocol client

:::

=== 18.1.1. email: Representing an email message ===
http://docs.python.org/library/email.message.html @2010/12/10

__The central class in the `email` package is the `Message` class, imported from the `email.message` module. It is the base class for the email object model. `Message` provides the core functionality for setting and querying header fields, and for accessing message bodies.__

__Conceptually, a `Message` object consists of ''headers'' and ''payloads''. Headers are RFC 2822 style field names and values where the field name and value are separated by a colon. The colon is not part of either the field name or the field value.__

__Headers are stored and returned in ''case-preserving'' form but are ''matched case-insensitively''. There may also be a single ''envelope header'', also known as the Unix-From header or the `From_` header. The payload is either a string in the case of simple message objects or a list of `Message` objects for ''MIME container documents'' (e.g. `multipart/*` and `message/rfc822`).__

__`Message` objects provide a ''mapping style interface'' for accessing the message headers, and an explicit interface for accessing both the headers and the payload. (參考下面 `__len__()` 開始的說明)__ It provides convenience methods for generating a flat text representation of the ''message object tree'', for accessing commonly used ''header parameters'', and for recursively walking over the object tree.

Here are the methods of the `Message` class:

'''`class email.message.Message`'''

The constructor takes no arguments.

'''`as_string([unixfrom])`'''

__Return the entire message flattened as a string. When optional `unixfrom` is `True`, the envelope header is included in the returned string. `unixfrom` defaults to `False`. Flattening the message may trigger changes to the `Message` if ''defaults'' need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).__

__Note that this method is provided as a convenience and may not always format the message the way you want. For example, by default it mangles lines that begin with `From`. For more flexibility, instantiate a `Generator` instance and use its `flatten()` method directly.__ For example:

 {{{
from cStringIO import StringIO
from email.generator import Generator
fp = StringIO()
g = Generator(fp, mangle_from_=False, maxheaderlen=60)
g.flatten(msg)
text = fp.getvalue()
 }}}

'''`__str__()`'''

Equivalent to `as_string(unixfrom=True)`.

'''`is_multipart()`'''

__Return `True` if the message’s payload is a list of sub-`Message` objects, otherwise return `False`. When `is_multipart()` returns `False`, the payload should be a string object.__

'''`set_unixfrom(unixfrom)`'''

__Set the message’s envelope header to `unixfrom`, which should be a string.__

'''`get_unixfrom()`'''

__Return the message’s envelope header. Defaults to `None` if the envelope header was never set.__

'''`attach(payload)`'''

__Add the given payload to the ''current payload'', which must be `None` or a list of `Message` objects before the call. After the call, the payload will always be a list of `Message` objects. If you want to set the payload to a scalar object (e.g. a string), use `set_payload()` instead.__

'''`get_payload([i[, decode]])`'''

__Return the current payload, which will be a list of `Message` objects when `is_multipart()` is `True`, or a string when `is_multipart()` is `False`. If the payload is a list and you mutate the list object, you modify the message’s payload in place.__

__With optional argument `i`, `get_payload()` will return the `i`-th element of the payload, counting from zero, if `is_multipart()` is `True`. An `IndexError` will be raised if `i` is less than 0 or greater than or equal to the number of items in the payload. If the payload is a string (i.e. `is_multipart()` is `False`) and `i` is given, a `TypeError` is raised.__

__Optional `decode` is a flag indicating whether the payload should be decoded or not, according to the `Content-Transfer-Encoding` header. When `True` and the message is not a multipart, the payload will be decoded if this header’s value is `quoted-printable` or `base64`. If some other encoding is used, or `Content-Transfer-Encoding` header is missing, or if the payload has bogus base64 data, the payload is returned ''as-is (undecoded)''. If the message is a multipart and the decode flag is `True`, then `None` is returned. The default for `decode` is `False`.__

'''`set_payload(payload[, charset])`'''

__Set the ''entire'' message object’s payload to payload. It is the client’s responsibility to ensure the payload invariants. Optional `charset` sets the message’s ''default character set'';__ see `set_charset()` for details.

Changed in version 2.2.2: `charset` argument added.

'''`set_charset(charset)`'''

__Set the character set of the payload to `charset`, which can either be a `Charset` instance (see `email.charset`), a string naming a character set, or `None`. If it is a string, it will be converted to a `Charset` instance. If `charset` is `None`, the `charset` parameter will be removed from the `Content-Type` header. Anything else will generate a `TypeError`.__

__The message will be assumed to be of type `text/*`, with the payload either in unicode or encoded with `charset.input_charset`. It will be encoded or converted to `charset.output_charset` and transfer encoded properly, if needed, when generating the plain text representation of the message. MIME headers (`MIME-Version`, `Content-Type`, `Content-Transfer-Encoding`) will be added as needed.[?]__

New in version 2.2.2.

'''`get_charset()`'''

__Return the `Charset` instance associated with the message’s payload.__

New in version 2.2.2.

__The following methods implement a ''mapping-like interface'' for accessing the message’s RFC 2822 headers. Note that there are some ''semantic'' differences between these methods and a normal mapping (i.e. dictionary) interface. For example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers. Also, in dictionaries there is no guaranteed order to the keys returned by `keys()`, but in a `Message` object, headers are always returned in the order they appeared in the original message, or were added to the message later. Any header deleted and then re-added are always appended to the end of the header list.__

These semantic differences are intentional and are biased toward maximal convenience.

__Note that in all cases, any envelope header present in the message is not included in the mapping interface.__

'''`__len__()`'''

__Return the total number of headers, including duplicates.__

'''`__contains__(name)`'''

__Return true if the message object has a field named `name`. Matching is done case-insensitively and `name` should not include the trailing colon.__ Used for the in operator, e.g.:

 {{{
if 'message-id' in myMessage:
    print 'Message-ID:', myMessage['message-id']
 }}}

'''`__getitem__(name)`'''

__Return the value of the named header field. `name` should not include the colon field separator. If the header is missing, `None` is returned; a `KeyError` is never raised.__

__Note that if the named field appears more than once in the message’s headers, exactly which of those field values will be returned is undefined. Use the `get_all()` method to get the values of all the extant named headers.__

'''`__setitem__(name, val)`'''

__Add a header to the message with field name `name` and value `val`. The field is appended to the end of the message’s existing fields.__

__Note that this does not overwrite or delete any existing header with the same name. If you want to ensure that the new header is the only one present in the message with field name `name`, delete the field first__, e.g.:

 {{{
del msg['subject']
msg['subject'] = 'Python roolz!'
 }}}

'''`__delitem__(name)`'''

__Delete ''all occurrences'' of the field with name `name` from the message’s headers. No exception is raised if the named field isn’t present in the headers.__

'''`has_key(name)`'''

__Return true if the message contains a header field named `name`, otherwise return false.__

'''`keys()`'''

__Return a list of all the message’s header field names.__

'''`values()`'''

__Return a list of all the message’s field values.__

'''`items()`'''

__Return a list of 2-tuples containing all the message’s field headers and values.__

'''`get(name[, failobj])`'''

__Return the value of the named header field. This is identical to `__getitem__()` except that optional `failobj` is returned if the named header is missing (defaults to `None`).__

Here are some additional useful methods:

'''`get_all(name[, failobj])`'''

__Return a list of all the values for the field named `name`. If there are no such named headers in the message, `failobj` is returned (defaults to `None`).__

'''`add_header(_name, _value, **_params)`'''

__Extended header setting. This method is similar to `__setitem__()` except that additional ''header parameters'' can be provided as keyword arguments. `_name` is the header field to add and `_value` is the ''primary value'' for the header.__

__For each item in the keyword argument dictionary `_params`, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers). Normally, the parameter will be added as `key="value"` unless the value is `None`, in which case only the key will be added.__

Here’s an example:

 {{{
msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')
 }}}

This will add a header that looks like

 {{{
Content-Disposition: attachment; filename="bud.gif"
 }}}

'''`replace_header(_name, _value)`'''

__Replace a header. Replace the ''first'' header found in the message that matches `_name`, retaining header order and field name case. If no matching header was found, a `KeyError` is raised.__

New in version 2.2.2.

'''`get_content_type()`'''

__Return the message’s content type. The returned string is coerced to lower case of the form `maintype/subtype`. If there was no `Content-Type` header in the message the default type as given by `get_default_type()` will be returned. Since according to RFC 2045, messages always have a default type, `get_content_type()` will always return a value.__

__RFC 2045 defines a message’s default type to be `text/plain` unless it appears inside a `multipart/digest` container, in which case it would be `message/rfc822`. If the `Content-Type` header has an invalid type specification, RFC 2045 mandates that the default type be `text/plain`.__

New in version 2.2.2.

'''`get_content_maintype()`'''

__Return the message’s main content type. This is the `maintype` part of the string returned by `get_content_type()`.__

New in version 2.2.2.

'''`get_content_subtype()`'''

__Return the message’s sub-content type. This is the `subtype` part of the string returned by `get_content_type()`.__

New in version 2.2.2.

'''`get_default_type()`'''

__Return the default content type. Most messages have a default content type of `text/plain`, except for messages that are subparts of `multipart/digest` containers. Such subparts have a default content type of `message/rfc822`.__

New in version 2.2.2.

'''`set_default_type(ctype)`'''

__Set the default content type. `ctype` should either be `text/plain` or `message/rfc822`, although this is not enforced. The default content type is not stored in the `Content-Type` header.__

New in version 2.2.2.

'''`get_params([failobj[, header[, unquote]]])`'''

__Return the message’s `Content-Type` parameters, as a list. The elements of the returned list are 2-tuples of key/value pairs, as split on the '=' sign. The left hand side of the '=' is the key, while the right hand side is the value. If there is no '=' sign in the parameter the value is the empty string, otherwise the value is as described in `get_param()` and is unquoted if optional `unquote` is `True` (the default).__

__Optional `failobj` is the object to return if there is no `Content-Type` header. Optional `header` is the header to search instead of `Content-Type`.__

Changed in version 2.2.2: `unquote` argument added.

'''`get_param(param[, failobj[, header[, unquote]]])`'''

__Return the value of the `Content-Type` header’s parameter `param` as a string. If the message has no `Content-Type` header or if there is no such parameter, then `failobj` is returned (defaults to `None`).__

__Optional `header` if given, specifies the message header to use instead of `Content-Type`.__

__Parameter keys are always compared case insensitively. The return value can either be a string, or a 3-tuple if the parameter was ''RFC 2231 encoded''. When it’s a 3-tuple, the elements of the value are of the form `(CHARSET, LANGUAGE, VALUE)`. Note that both `CHARSET` and `LANGUAGE` can be `None`, in which case you should consider `VALUE` to be encoded in the `us-ascii` charset. You can usually ignore `LANGUAGE`.__

__If your application doesn’t care whether the parameter was encoded as in RFC 2231, you can collapse the parameter value by calling `email.utils.collapse_rfc2231_value()`, passing in the return value from `get_param()`. This will return a suitably decoded Unicode string when the value is a tuple, or the original string unquoted if it isn’t.__ For example:

 {{{
rawparam = msg.get_param('foo')
param = email.utils.collapse_rfc2231_value(rawparam)
 }}}

__In any case, the parameter value (either the returned string, or the `VALUE` item in the 3-tuple) is always unquoted, unless `unquote` is set to `False`.__

Changed in version 2.2.2: `unquote` argument added, and 3-tuple return value possible.

'''`set_param(param, value[, header[, requote[, charset[, language]]]])`'''

__Set a parameter in the `Content-Type` header. If the parameter already exists in the header, its value will be replaced with `value`. If the `Content-Type` header as not yet been defined for this message, it will be set to `text/plain` and the new parameter `value` will be appended as per RFC 2045.__

__Optional `header` specifies an alternative header to `Content-Type`, and all parameters will be quoted as necessary unless optional `requote` is `False` (the default is `True`).__

__If optional `charset` is specified, the parameter will be encoded according to RFC 2231. Optional `language` specifies the RFC 2231 language, defaulting to the empty string.__ Both `charset` and `language` should be strings.

New in version 2.2.2.

'''`del_param(param[, header[, requote]])`'''

__Remove the given parameter completely from the `Content-Type` header. The header will be re-written in place without the parameter or its value. All values will be quoted as necessary unless `requote` is `False` (the default is `True`). Optional `header` specifies an alternative to `Content-Type`.__

New in version 2.2.2.

'''`set_type(type[, header][, requote])`'''

__Set the main type and subtype for the `Content-Type` header. `type` must be a string in the form `maintype/subtype`, otherwise a `ValueError` is raised.__

__This method replaces the `Content-Type` header, keeping all the parameters in place. If `requote` is `False`, this leaves the existing header’s quoting as is, otherwise the parameters will be quoted (the default).__

__An alternative header can be specified in the `header` argument. When the `Content-Type` header is set a `MIME-Version` header is also added.__

New in version 2.2.2.

:::

=== 18.1.2. email: Parsing email messages ===
http://docs.python.org/library/email.parser.html @2010/12/13

__Message object structures can be created in one of two ways: they can be created from whole cloth by instantiating `Message` objects and stringing them together via `attach()` and `set_payload()` calls, or they can be created by parsing a flat text representation of the email message.__

__The `email` package provides a standard parser that understands most email document structures, including MIME documents. You can pass the parser a string or a file object, and the parser will return to you the root `Message` instance of the object structure. For simple, ''non-MIME'' messages the payload of this root object will likely be a string containing the text of the message. For MIME messages, the root object will return `True` from its `is_multipart()` method, and the subparts can be accessed via the `get_payload()` and `walk()` methods.__

:::

Since creating a message object structure from a string or a file object is such a common task, two functions are provided as a convenience. They are available in the top-level `email` package namespace.

'''`email.message_from_string(s[, _class[, strict]])`'''

__Return a message object structure from a string. This is exactly equivalent to `Parser().parsestr(s)`. Optional `_class` and `strict` are interpreted as with the `Parser` class constructor.__

Changed in version 2.2.2: The `strict` flag was added.

'''`email.message_from_file(fp[, _class[, strict]])`'''

__Return a message object structure tree from an open file object. This is exactly equivalent to `Parser().parse(fp)`. Optional `_class` and `strict` are interpreted as with the `Parser` class constructor.__

Changed in version 2.2.2: The `strict` flag was added.

Here’s an example of how you might use this at an interactive Python prompt:

 {{{
>>> import email
>>> msg = email.message_from_string(myString)
 }}}

:::

=== 18.1.4. email: Creating email and MIME objects from scratch ===
http://docs.python.org/library/email.mime.html @2010/12/10

Ordinarily, you get a message object structure by passing a file or some text to a parser, which parses the text and returns the root message object. However you can also build a complete message structure from scratch, or even individual `Message` objects by hand. __In fact, you can also take an existing structure and add new `Message` objects, move them around, etc.__ This makes a very convenient interface for slicing-and-dicing MIME messages.

You can create a new object structure by creating `Message` instances, adding attachments and all the appropriate headers manually. For MIME messages though, the `email` package provides some convenient subclasses to make things easier.

:::

=== 18.1.11. email: Examples ===

Here are a few examples of how to use the `email` package to read, write, and send simple email messages, as well as more complex MIME messages.

First, let’s see how to create and send a simple text message:

 {{{
# Import smtplib for the actual sending function
import smtplib

# Import the email modules we'll need
from email.mime.text import MIMEText

# Open a plain text file for reading.  For this example, assume that
# the text file contains only ASCII characters.
fp = open(textfile, 'rb')
# Create a text/plain message
msg = MIMEText(fp.read())
fp.close()

# me == the sender's email address
# you == the recipient's email address
msg['Subject'] = 'The contents of %s' % textfile
msg['From'] = me
msg['To'] = you

# Send the message via our own SMTP server, but don't include the
# envelope header.
s = smtplib.SMTP()
s.sendmail(me, [you], msg.as_string())
s.quit()
 }}}

:::

== 18.2. json — JSON encoder and decoder ==
http://docs.python.org/library/json.html @2010/08/18

New in version 2.6.

JSON (!JavaScript Object Notation) <http://json.org> is a subset of !JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data interchange format.

`json` exposes an API familiar to users of the standard library `marshal` and `pickle` modules.

Encoding basic Python object hierarchies:

 {{{
>>> import json
>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}]) # 跟 JSON 的表示法相似度很高!!
'["foo", {"bar": ["baz", null, 1.0, 2]}]' <-- Tuple 也被解讀成 array
>>> print json.dumps("\"foo\bar")
"\"foo\bar"
>>> print json.dumps(u'\u1234')
"\u1234"
>>> print json.dumps('\\')
"\\"
>>> print json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True)
{"a": 0, "b": 0, "c": 0}
>>> from StringIO import StringIO
>>> io = StringIO()
>>> json.dump(['streaming API'], io) # 直接寫到 File-Like Object 裡
>>> io.getvalue()
'["streaming API"]'
 }}}

Compact encoding:

 {{{
>>> import json
>>> json.dumps([1,2,3,{'4': 5, '6': 7}], separators=(',',':'))
'[1,2,3,{"4":5,"6":7}]'
 }}}

Pretty printing:

 {{{
>>> import json
>>> print json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4)
{
    "4": 5,
    "6": 7
}
 }}}

Decoding JSON:

 {{{
>>> import json
>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
[u'foo', {u'bar': [u'baz', None, 1.0, 2]}] <-- 讀出來都變成 Unicode 了
>>> json.loads('"\\"foo\\bar"')
u'"foo\x08ar'
>>> from StringIO import StringIO
>>> io = StringIO('["streaming API"]')
>>> json.load(io)
[u'streaming API']
 }}}

Specializing JSON object decoding:

 {{{
>>> import json
>>> def as_complex(dct):
...     if '__complex__' in dct:
...         return complex(dct['real'], dct['imag'])
...     return dct
...
>>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
...     object_hook=as_complex)
(1+2j)
>>> import decimal
>>> json.loads('1.1', parse_float=decimal.Decimal)
Decimal('1.1')
 }}}

Extending `JSONEncoder`:[?]

 {{{
>>> import json
>>> class ComplexEncoder(json.JSONEncoder):
...     def default(self, obj):
...         if isinstance(obj, complex):
...             return [obj.real, obj.imag]
...         return json.JSONEncoder.default(self, obj)
...
>>> dumps(2 + 1j, cls=ComplexEncoder)
'[2.0, 1.0]'
>>> ComplexEncoder().encode(2 + 1j)
'[2.0, 1.0]'
>>> list(ComplexEncoder().iterencode(2 + 1j))
['[', '2.0', ', ', '1.0', ']']
 }}}

Using `json.tool` from the shell to validate and pretty-print:

 {{{
$ echo '{"json":"obj"}' | python -mjson.tool
{
    "json": "obj"
}
$ echo '{ 1.2:3.4}' | python -mjson.tool
Expecting property name: line 1 column 2 (char 2)
 }}}

__Note: The JSON produced by this module’s default settings is a subset of YAML, so it may be used as a serializer for that as well.__

=== 18.2.1. Basic Usage ===

'''`json.dump(obj, fp[, skipkeys[, ensure_ascii[, check_circular[, allow_nan[, cls[, indent[, separators[, encoding[, default[, **kw]]]]]]]]]])`'''

__Serialize `obj` as a JSON formatted stream to `fp` (a `.write()`-supporting file-like object).__

If `skipkeys` is `True` (default: `False`), then dict keys that are not of a basic type (`str`, `unicode`, `int`, `long`, `float`, `bool`, `None`) will be skipped instead of raising a `TypeError`.

If `ensure_ascii` is `False` (default: `True`), then some chunks written to `fp` may be unicode instances, subject to normal Python `str` to `unicode` coercion rules. Unless `fp.write()` explicitly understands unicode (as in `codecs.getwriter()`) this is likely to cause an error.[?]

__If `check_circular` is `False` (default: `True`), then the circular reference check for container types will be skipped and a circular reference will result in an `OverflowError` (or worse).__

If `allow_nan` is `False` (default: `True`), then it will be a `ValueError` to serialize out of range float values (`nan`, `inf`, `-inf`) in strict compliance of the JSON specification, instead of using the !JavaScript equivalents (`NaN`, `Infinity`, `-Infinity`).

__If `indent` is a non-negative integer, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of `0` will only insert newlines. `None` (the default) selects the most compact representation.__

__If `separators` is an `(item_separator, dict_separator)` tuple, then it will be used instead of the default `(', ', ': ')` separators. `(',', ':')` is the most compact JSON representation.__

__`encoding` is the character encoding for `str` instances, default is UTF-8.__

`default(obj)` is a function that should return a serializable version of `obj` or raise `TypeError`. The default simply raises `TypeError`.[?]

To use a custom `JSONEncoder` subclass (e.g. one that overrides the `default()` method to serialize additional types), specify it with the `cls` kwarg.

'''`json.dumps(obj[, skipkeys[, ensure_ascii[, check_circular[, allow_nan[, cls[, indent[, separators[, encoding[, default[, **kw]]]]]]]]]])`'''

__Serialize `obj` to a JSON formatted `str`.__

__If `ensure_ascii` is `False`, then the return value will be a `unicode` instance. The other arguments have the same meaning as in `dump()`.__

'''`json.load(fp[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])`'''

__Deserialize `fp` (a `.read()`-supporting file-like object containing a JSON document) to a Python object.__

__'''If the contents of `fp` are encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified.'''__ Encodings that are not ASCII based (such as UCS-2) are not allowed, and should be wrapped with `codecs.getreader(encoding)(fp)`, or simply decoded to a `unicode` object and passed to `loads()`.

`object_hook` is an optional function that will be called with the result of any object literal decoded (a `dict`). The return value of `object_hook` will be used instead of the `dict`. This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting).

`object_pairs_hook` is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs. The return value of `object_pairs_hook` will be used instead of the `dict`. This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, `collections.OrderedDict()` will remember the order of insertion). If `object_hook` is also defined, the `object_pairs_hook` takes priority.

Changed in version 2.7: Added support for `object_pairs_hook`.

`parse_float`, if specified, will be called with the string of every JSON float to be decoded. By default, this is equivalent to `float(num_str)`. This can be used to use another datatype or parser for JSON floats (e.g. `decimal.Decimal`).

`parse_int`, if specified, will be called with the string of every JSON int to be decoded. By default, this is equivalent to `int(num_str)`. This can be used to use another datatype or parser for JSON integers (e.g. `float`).

__`parse_constant`, if specified, will be called with one of the following strings: `'-Infinity'`, `'Infinity'`, `'NaN'`, `'null'`, `'true'`, `'false'`. This can be used to raise an exception if invalid JSON numbers are encountered.__

To use a custom `JSONDecoder` subclass, specify it with the `cls` kwarg. Additional keyword arguments will be passed to the constructor of the class.

'''`json.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])`'''

__Deserialize `s` (a `str` or `unicode` instance containing a JSON document) to a Python object.__

__If `s` is a `str` instance and is encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified. Encodings that are not ASCII based (such as UCS-2) are not allowed and '''should be decoded to unicode first.'''__

The other arguments have the same meaning as in `load()`.

=== 18.2.2. Encoders and decoders ===

:::

== 18.12. base64 — RFC 3548: Base16, Base32, Base64 Data Encodings ==
http://docs.python.org/library/base64.html @2010/07/23

__This module provides data encoding and decoding as specified in RFC 3548. This standard defines the Base16, Base32, and Base64 algorithms for encoding and decoding arbitrary ''binary strings'' into ''text strings''__ that can be safely sent by email, used as parts of URLs, or included as part of an HTTP POST request. The encoding algorithm is not the same as the `uuencode` program.

There are two interfaces provided by this module. The ''modern interface'' supports encoding and decoding string objects using all ''three alphabets'' (指 Base 16/32/64 的區分). The ''legacy interface'' provides for encoding and decoding to and from file-like objects as well as strings, but only using the Base64 standard alphabet.

The modern interface, which was introduced in Python 2.4, provides:

'''`base64.b64encode(s[, altchars])`'''

Encode a string use Base64.

`s` is the string to encode. Optional `altchars` must be a string of at least length 2 (additional characters are ignored) which specifies an alternative alphabet for the `+` and `/` characters. This allows an application to e.g. generate URL or filesystem safe Base64 strings. The default is `None`, for which the standard Base64 alphabet is used.

The encoded string is returned.

'''`base64.b64decode(s[, altchars])`'''

Decode a Base64 encoded string.

`s` is the string to decode. Optional `altchars` must be a string of at least length 2 (additional characters are ignored) which specifies the alternative alphabet used instead of the `+` and `/` characters.

The decoded string is returned. __A `TypeError` is raised if `s` were incorrectly padded or if there are ''non-alphabet characters'' present in the string.__

:::


