= asciidoc-site =

== 功能 ==

 * 顯示 build 進度
 * 找出單獨的 .html，可能是搬移 .txt 殘留下來。
 * 增加 favicon
 * 如果用 PDF 做為 annotation 工具，幾乎沒有什麼標示不到的，但如何跟筆記串聯起來呢？
   ** 要能從 URL 直接推算出檔案名稱。
   ** {read} 或 {pdf} 往前推算 http://... 或 https:// 對應的檔案在不在，不在會提出 warning。執行期會開新窗檢視 PDF。
   ** 如果從 link 的 attribute list 著手呢？改寫 inline macro 的 routine。
 * 把未經整理的筆記 hide 起來
 * 標記那些實際做過或看完大批文件的東西，要找時間趕快整理筆記，跟那些想學而還沒學的部份不同。
 * 可以做一些標示做為 GTD/Study 的依據，一直盤遶心頭的事可以排在前面。尤其是想學的東西，更尤其是看完記憶正新鮮要花時間整理的東西。
   ** study trend... 以檔案最後編輯時間排序，完全不用額外做標記。
   ** 優先取出 :title:，否則才取 first-level title。
 * 自訂 `{*}` ~ `{*****}` 用來表示幾顆星。
 * 如何在 title 後固定串上網站名稱？
 * 將 topic/topic-xxx.txt 的名稱簡化，順便將一個資料夾下超過 10 個項目者拆出成為子資料夾。
 * 將近期改過的檔案列出來就是最需要被關注的 topic。
 * 埋入廣告，成為額外的收入。但 layout 似乎也要跟著調成讓廣告適合擺在右側。
 * blogpost 時會定義 `-a blogpost`，有機會將 WIKI 的連結串上網域。
 * 整合 Disqos 讓大家可以按讚或推薦，或許也可以為 site 建一個粉絲頁？
 * 有沒有 JavaScript Library 可以畫 tag cloud (另外加 tag) 跟 mind map (直接分析現有的 links)
   ** 有沒有可能自動建立反向連結？（只列出那些從別的 topic 來的，目錄不同的，不是在 title 裡的，才比較有意義）。比較不好做的部份是如何取得 link text？
   ** 查詢某份文件的反向連結（不包括 breadcrumb）
   ** https://github.com/kennethkufluk/js-mindmap[kennethkufluk/js-mindmap]
   ** https://github.com/samizdatco/arbor[samizdatco/arbor]

 * 畫面最下方會顯示最後更新時間，其實就是檔案最後一次變更的時間。
   ** last touched (mtime), last revised (content), last published (generation)
 * 產生 sitemap.xml 跟 RSS 資訊，這或許是記錄 xxx date 的好地方？之後可以在畫面右側增加 Google 的 search box。
 * 在各頁上方顯示文件數量？同一個 container 應該有些東西可以顯示？或許 breadcrumb 可以自動做，不用寫在 title 裡？
 * 不同 container 支援不同的 template。
 * 增加 new, free, open source, windows, mac, linux 的圖示
 * revision history 怎麼做？好像就是自己維護 revision table 了。

DONE:

 * 整合 Avatar Hovercards 在左側。
 * 要在 Windows 下也可以執行，所以 linux commands 不在考量範圍內。
 * 從 CWD 往下鑽，不會跑進 `foobar.txt` 對應的 `foobar/` 子資料夾。
 * 只針對有異動的部份重新產生 HTML。只對那些 .html 的異動時間早於 .txt 者重新產生 HTML。
 * 檢查壞掉的連結，需要 parsing 文字檔裡的 link: (#anchor)、image:、image:: 最後印出 orphan。
 * 自動更新連結的功能（rename），甚至改變資料夾名稱。
 * 可以算出從 home 到某份文件的最短路徑，
 * parsing 分為三階段：掃一遍找到正向連結，推算反向連結，產生文件之後再確認 anchor 有效（還是直接 parse 檔案就好？）
 * 非 resource directory 的 .html 都要有對應的 .txt，否則可能是更名後殘留的。
 * 透過 reverse proxy 或 CDN 將 wiki 透過 Dropbox Public Folder 發佈出去；放 GitHub 還滿麻煩的。-> 發現全部刪掉再貼上去，會自動比對出 rename 或有變動的部份，或許 rsync 就夠了。
 * 將 index.txt 正名
 * breadcrumb 的階層不一定要跟目錄結構有關，或許可以考慮將 title 提到的 document 的 keyword/tag 都拉進來。
   ** http://www.dns.com.tw/blog/2009/09/seo-tips-google-keywords-meta-tag.html[SEO Tips : Google 根本不理會 Keywords Meta Tag SEO SEM 台灣搜尋引擎優化與行銷研究院]

Moin -> AsciiDoc

 * http://www.xmlrpc.com/[XML-RPC Home Page]
 * `s/\[\[(http.*?)\|(.*?)\]\]/\1\[\2\]/g`

