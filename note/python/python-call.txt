= [Python] 呼叫外部程式 =

`subprocess` 在 Python 2.4 被提出，試圖要取代下面這些舊 module 或 function：

 * `os.system`
 * `os.spawn*`
 * `os.popen*`
 * `popen2.*`
 * `commands.*`

它可以用來呼叫外部程式，連結另一個 process 的 input/output/error pipe，並取得外部程式結束後的 return code。下面幾個 convenience functions 通常可以應付大部份的需求：

 * `subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)`
 * `subprocess.check_call(args, *, stdin=None, stdout=None, stderr=None, shell=False)` - Python 2.5 新增。
 * `subprocess.check_output(args, *, stdin=None, stderr=None, shell=False, universal_newlines=False)` - Python 2.7 新增。

--------------------------------------------------------------------------------
>>> retcode = subprocess.call(['ls', '/dev/null']) <1>
/dev/null
>>> retcode
0
>>> retcode = subprocess.call(['ls', '/root'])
ls: cannot open directory /root: Permission denied
>>> retcode
2
>>>
>>> subprocess.check_call(['ls', '/dev/null']) <2>
/dev/null
>>> try:
...     subprocess.check_call(['ls', '/root'])
... except subprocess.CalledProcessError as e:
...     print 'e.returncode = %i' % e.returncode
...     raise
... 
ls: cannot open directory /root: Permission denied
e.returncode = 2
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
  File "/usr/lib/python2.6/subprocess.py", line 488, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '['ls', '/root']' returned non-zero exit status 2
>>>
>>> subprocess.check_output(['ls', '/dev/null']) <3>
'/dev/null\n'
>>> try:
...     subprocess.check_output(['ls', '/dev/null', '/root'])
... except subprocess.CalledProcessError as e:
...     print 'e.returncode =', e.returncode
...     print 'e.output = [[[', e.output, ']]]'
... 
ls: cannot open directory /root: Permission denied
e.returncode = 2
e.output = [[[ /dev/null

]]]
>>> try:
...     subprocess.check_output(['ls', '/dev/null', '/root'], stderr=subprocess.STDOUT) <4>
... except subprocess.CalledProcessError as e:
...     print 'e.returncode =', e.returncode
...     print 'e.output = [[[', e.output, ']]]'
... 
e.returncode = 2
e.output = [[[ /dev/null

ls: cannot open directory /root: Permission denied
]]]
--------------------------------------------------------------------------------
<1> `call()` 固定會傳回 return code （不會丟出 `CalledProcessError`），但 stdin/stderr 會直接輸出到螢幕。
<2> `check_call()` 跟 `call()` 一樣會把 stdout/stderr 直接輸出到螢幕。發生錯誤時，可以從 `CalledProcessError` 的 `returncode` 屬性取得 return code。
<3> `check_output()` 會傳回 stdout，但過程中如果發生錯誤，已經輸出的部份還是可以從 `CalledProcessError` 的 `output` 屬性取得，但 stderr 預設還是會直接輸出到螢幕。
<4> 搭配 `stderr=subprocess.STDOUT`，可以將 stderr 的輸出合併到 stdout。

`check_output()` 在整合外部程式時尤其實用，可惜要 Python 2.7 之後才有。必要時可以參考 `check_output()` 的實作：

--------------------------------------------------------------------------------
def check_output(*popenargs, **kwargs):
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd, output=output)
    return output
--------------------------------------------------------------------------------

再考慮直接操作底層的 `Popen` ...

== 參考資料 ==

.文件
--
 * http://docs.python.org/library/subprocess.html[subprocess — Subprocess management]
 * http://www.python.org/dev/peps/pep-0324/[PEP 324 -- subprocess - New process module] - 新舊 module/function 間的對應關係。
--

