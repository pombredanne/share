= link:python.html[Python] / 從 Java 到 Python =
:[title] 從 Java 到 Python

 * Python 如此地 dynamic，難怪不需要 Interface；通常會將 contract 寫在 manual 或 docstring 裡。
 * 由於 function 支援多種參數的帶法，難怪沒有 overloading 的概念，constructor 也只有一個而已。
 * 覺得 Python 過度的 dynamic，反而把開發成本都帶到了 runtime
   ** 由於太 dynamic，所以 IDE 能幫的忙有限，很多東西要靠 developer 記在腦子裡，否則要等到執行期才能發現錯誤; 因此 docstrings 的撰寫就很重要!!
   ** 將 unit testing 的 coverage 提高，可以將大部份的 runtime error 在 build time 先找出來。之後再借助 coverage 來反向檢查出有哪些 test cases 漏開。
 * Python 常提到的 inteface
   ** 比較正統的做法是，把它宣告成沒有實作的 methods，可以參考 `cookielib.CookiePolicy` 與 `cookielib.DefaultCookiePolicy` 的關係。
   ** 如果 interface 只有一個方法，單一個 callable object 也可以做為 interface，不需要額外宣告 class。
 * 呼叫 class 就是建立一個 instance 的做法很特別，參考 `unittest.main()` 的用法!!
 * 程式裡面儘可能不要去做強制轉型，因為只要支援特定的 interface，過程中就不會出錯，但可以要求自己傳回等定的型態。
 * 因為 dynamic type 的關係，Python 對於 refactoring 的支援很弱。
 * Python 非常的動態，以致於它很難用 Javadoc 的方式來表達 API 的用法。
 * Python 裡到處是 name 的概念 (呼應 namespace 的說法)，只是從外面看時，會成為 object 的 attributes 而已。
 * Constructor 並非專指 `__init__()`，Python 習慣將用來產生 instance 的 class/factory methods 都稱做 constructor. 例如 `datetime.date.today()`，`datetime.date.fromtimestamp()` 等。
 * Python 似乎很習慣將 lib 裝到 `site-packages` 底下，跟 Java 建議不要將 lib 不要裝到 `/lib/ext` 的做法顯然不同？不過這也衍生了版本衝突的問題，也之所以才會有 link:../virtualenv/virtualenv.html[virtualenv] 這類的方案出現。
 * `PYTHONPATH` 不能合併，大概是因為 `__init__.py` 原因. 例如 `./dir1/org/foo` 與 `./dir2/org/bar`，該以 `./dir1/org/__init__.py` 或 `./dir2/org/__init__.py` 為主？這也使得 Python 界顯少看到 `org.xxx` 階層式的套件命名方式。

