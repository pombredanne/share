= Learning Python Language =

== Flow Control ==

--------------------------------------------------------------------------------
>>> def expression(condition):
...     print 'expression got called (%s)' % condition
...     return condition
... 
>>> True and expression(True)
expression got called (True)
True
>>> False and expression(True) <1>
False
--------------------------------------------------------------------------------
<1> 當 `False` 已經可以決定結果時，`expresssion()` 就不會再被呼叫評估。

== Class ==

== Attribute ==

...

=== Property ===

////////////////////////////////////////////////////////////////////////////////
A property is ''generated'' by calling the `property` built-in with three methods (handlers for get, set, and delete operations), as well as a docstring (當成第 4 個參數傳進去)
    If any argument is passed as `None` or omitted, that operation is not supported.
    Properties are typically assigned at the top level of a `class` statement [e.g., `name = property(...)`]. When thus assigned, accesses to the class attribute itself (e.g., `obj.name`) are automatically ''routed'' to one of the accessor methods passed into the property.
    Examples
        >>> class newprops(object):
...     def getage(self): # 是否該為這些背後的 accessor methods 加前導的底線藏起來？
...         return 40
...     age = property(getage, None, None, None) # get, set, del, docs
...
>>> x = newprops()
>>> x.age # Runs getage
40
>>> x.name # Normal fetch
AttributeError: newprops instance has no attribute 'name'

        >>> class newprops(object):
...     def getage(self):
...         return 40
...     def setage(self, value):
...         print('set age:', value)
...         self._age = value
...     age = property(getage, setage, None, None)
...
>>> x = newprops()
>>> x.age # Runs getage
40
>>> x.age = 42 # Runs setage
set age: 42
>>> x._age # Normal fetch; no getage call
42
>>> x.age # Runs getage
40
>>> x.job = 'trainer' # Normal assign; no setage call
>>> x.job # Normal fetch; no getage call
'trainer'
>>> x.foo # Runs __getattr__
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'newprops' object has no attribute 'foo'
////////////////////////////////////////////////////////////////////////////////

--------------------------------------------------------------------------------
class Person(object):

    def __init__(self, first_name, last_name):
        self._first_name = first_name
        self._last_name = last_name

    def _get_name(self):
        return '%s, %s' % (self._first_name, self._last_name)

    name = property(_get_name)

print Person('Jeremy', 'Kao').name
--------------------------------------------------------------------------------

[NOTE]
.參考資料
================================================================================
 * http://oreilly.com/catalog/9780596158071/[O'Reilly - Learning Python, Fourth Edition]
   ** Chapter 31. Advanced Class Topics > Class Properties (p792)
   ** Chapter 37. Managed Attributes (p941)
 * http://wiki.python.org/jython/JythonFaq/GeneralInfo#How_do_I_learn_more_about_Jython.3F[JythonFaq > General Information] - 這裡提到 Jython 2.5.0 就已經把 Python 2.6 才有的 decorator 做進來了
 * http://kbyanc.blogspot.com/2007/06/python-property-attribute-tricks.html[The Other Kelly Yancey: Python: property attribute tricks] (2007-06-19)
================================================================================

== Descriptor ==

...

== yield ==

[NOTE]
.參加資料
================================================================================
 * http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855[The Python yield keyword explained - Stack Overflow] (2008-10-23)
================================================================================

== 搞清楚 `==` 跟 `is` 的差別 ==

--------------------------------------------------------------------------------
>>> s1 = 'hello' + ', world'
>>> s2 = 'hello, ' + 'world'
>>> s1 == s2
True
>>> s1 is s2
False

>>> None == None
True
>>> None != None
False
>>> None > None
False
>>> None < None
False
>>> None > 0
False
>>> None < 0
True

>>> None is None
True
>>> None is not None
False
--------------------------------------------------------------------------------

== Object ID ==

--------------------------------------------------------------------------------
>>> class MyObj: pass
... 
>>> o1 = MyObj()
>>> o2 = MyObj()
>>> o1, o2
(<__main__.MyObj instance at 0x7feea2bc1e60>, <__main__.MyObj instance at 0x7feea2bc1248>) <1>
>>> hex(id(o1))
'0x7feea2bc1e60'
>>> o1 == o2
False
>>> 
--------------------------------------------------------------------------------
<1> 後面帶的 `0x...` 就是 object ID。
<2> Object ID 可以用 `id()` 取得。

== Class ==

=== Inner/Nested Class ===

--------------------------------------------------------------------------------
def init_name_obj(first, last):

    class Name: <1>

        def __init__(self, first, last):
            self.first = first
            self.last = last

    return Name(first, last)

name = init_name_obj('Jeremy', 'Kao')
print name.first, name.last
--------------------------------------------------------------------------------
<1> Class 也可以定義在 function/method 裡，但由於 `class` 是個 statement，所以會有重複定義的狀況？

[NOTE]
.參考資料
================================================================================
 * http://www.brpreiss.com/books/opus7/html/page598.html[Python and Object-Oriented Programming > Nested Classes]
 * http://tomayko.com/writings/python-inner-classes[Python Inner Classes] (2004-09-05)
================================================================================

== Source Code Encodings ==

Python 預設採用 ASCII 來讀取 source code 的內容，如果要採用其他 encoding 的話，必須在 shebang line 之後（如果有的話）加上 encoding 的宣告：

--------------------------------------------------------------------------------
#!/usr/bin/env python
# -*- encoding: encoding -*-
--------------------------------------------------------------------------------

其中 'encoding' 可能的值可以參考http://docs.python.org/library/codecs.html#standard-encodings[這裡]，不過最常用的還是 UTF-8：

 # -*- encoding: utf-8 -*-

不過 Unicode string 還是得放在 `u'...'` 裡？

[NOTE]
.參考資料
================================================================================
 * http://docs.python.org/tutorial/interpreter.html#source-code-encoding[The Python Tutorial > Using the Python Interpreter> Source Code Encoding]
 * http://docs.python.org/library/codecs.html#standard-encodings[The Python Standard Library > codecs — Codec registry and base classes > Standard Encodings]
 * http://www.python.org/dev/peps/pep-0263/[PEP 0263 -- Defining Python Source Code Encodings]
================================================================================

== 字串處理 ==

 * `instanceof(str, basestring, unicode)`
 * 

=== 判斷字串內容 ===

內建有下列幾個方法來判斷字串的內容：（而且至少包含一個字元）

 * `isalpha()` - 只包含英文字母。
 * `isdigit()` - 只包含數字。
 * `isalnum()` - 只包含英文字母跟數字。
 * `isspace()` - 只包含空白字元（whitespace）。

--------------------------------------------------------------------------------
>>> 'abc'.isalpha()
True
>>> '123'.isdigit()
True
>>> '123abc'.isalnum()
True
>>> '123abc'.isalpha()
False
>>> '123abc'.isdigit()
False
>>> ''.isspace() <1>
False
>>> ' '.isspace()
True
>>> ' \n\t  '.isspace()
True
--------------------------------------------------------------------------------
<1> `isspace()` 不能用來判斷空字串（empty string）。

== 任意 attributes ==

Python 並沒有任何 builtin classes 支援任意給定 attributes，例如：

--------------------------------------------------------------------------------
>>> obj = object()
>>> obj.att1 = 'val1'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'object' object has no attribute 'att1'
--------------------------------------------------------------------------------

不過 empty class 倒是可以滿足這個簡單的需求：

--------------------------------------------------------------------------------
>>> class Foo: pass
... 
>>> foo = Foo()
>>> foo.att1 = 'val1'
>>> print foo.att1
val1
--------------------------------------------------------------------------------

[NOTE]
.參考資料
================================================================================
 - http://stackoverflow.com/questions/2350817/dictionary-like-object-in-python-that-allows-setting-arbitrary-attributes[Dictionary-like object in Python that allows setting arbitrary attributes - Stack Overflow] (2010-02-08)
================================================================================

== Comprehension Expression ==

最早是從 list comprehension 的概念開始（結果一定是 `list`，但資料來源可以是任何 iterable）

--------------------------------------------------------------------------------
>>> nums = ()
>>> [pow(num, 2) for num in nums]
[]
>>> nums = (1, 3, 5, 7, 9)
>>> [pow(num, 2) for num in nums]
[1, 9, 25, 49, 81]
>>> [pow(num, 2) for num in nums if num % 3 == 0] # 甚至可以做條件過濾
[9, 81]

>>> recs = {"beef": 30, "milk": 15}
>>> [(k, recs[k] * 0.8) for k in recs]
[('milk', 12.0), ('beef', 24.0)]
    map(fun, iterable) 也提供類似的功能, 只是將 iterable 的每個 Item 傳入 fun 並取回結果而已
        >>> map(abs, (-1, -2, 0, 1, 2))
[1, 2, 0, 1, 2]
--------------------------------------------------------------------------------

Python 3.0 已經全面支援 comprehension, 包括 set 與 dictionary

--------------------------------------------------------------------------------
>>> [ord(x) for x in 'spaam'] # List of character ordinals
[115, 112, 97, 97, 109]
>>> {ord(x) for x in 'spaam'} # Sets remove duplicates
{112, 97, 115, 109}
>>> {x: ord(x) for x in 'spaam'} # Dictionary keys are unique
{'a': 97, 'p': 112, 's': 115, 'm': 109}
--------------------------------------------------------------------------------

== lambda ==

簡單的說，lamabda 就是 anonymous function。

 * lambda 裡的語法不能太複雜，如果有複雜的 statements，可以考慮用 nested function。

== Nested Functions ==

--------------------------------------------------------------------------------
def main():

    def mod(dividend, divisor):
        remainder = dividend % divisor
        quotient = (dividend - remainder) / divisor
        return quotient, remainder
    print [mod(i, 2) for i in range(1, 11)]

if __name__ == '__main__':
    main()
--------------------------------------------------------------------------------

執行結果如下：

 [(0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1), (4, 0), (4, 1), (5, 0)]

這是 `lambda` 辦不到的...

[NOTE]
.參考資料
================================================================================
 * http://docs.python.org/reference/compound_stmts.html[The Python Language Reference > Compound statements] - 裡頭有這麼一段話：Functions are first-class objects. A “def” form executed inside a function definition defines a local function that can be returned or passed around. Free variables used in the nested function can access the local variables of the function containing the def. See section Naming and binding for details.
================================================================================

== Descriptor ==

 * custom descriptor and several built-in python descriptors

TIP: 在 Java 裡，Python 習慣稱幾個方法的組合為 protocol。

[NOTE]
.參考資料
================================================================================
 * http://docs.python.org/howto/descriptor.html[Python HOWTOs > Descriptor HowTo Guide]
 * http://docs.python.org/reference/datamodel.html#descriptors[The Python Language Reference> Data model> Implementing Descriptors]
 * http://www.learningpython.com/2010/04/25/introducing-descriptors-and-properties/[learning python » Blog Archive » Introducing Descriptors and Properties] (2010-04-25)
 * http://www.informit.com/articles/article.aspx?p=1309289[InformIT: Python Descriptors > What Are Descriptors?] (2008-12-15)
 * http://blog.pythonisito.com/2008/08/lazy-descriptors.html[Just a little Python: Lazy Descriptors] (2008-08-22)
 * http://martyalchin.com/2007/nov/24/python-descriptors-part-2-of-2/[Python Descriptors, Part 2 of 2] (2007-11-24)
 * http://martyalchin.com/2007/nov/23/python-descriptors-part-1-of-2/[Python Descriptors, Part 1 of 2] (2007-11-23)
================================================================================

== 參考資料 ==

 * http://docs.python.org/tutorial/index.html[The Python Tutorial]
 * http://docs.python.org/reference/index.html[The Python Language Reference]
 * http://en.wikipedia.org/wiki/Python_syntax_and_semantics[Python syntax and semantics - Wikipedia, the free encyclopedia]

