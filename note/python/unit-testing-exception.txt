= Python UT: Exception Assertion =

最後是跟 exception 相關的驗證方法。

 * `assertRaises(exception, callable, *args, **kwargs)` - 檢查呼叫 `callable(*args, **kwargs)` 會丟出 'exception' 相同型態的錯誤。
 * `assertRaisesRegexp(exception, regexp, callable, *args, **kwargs)` - 用法跟 `assertRaises()` 一樣，除了檢查會丟出 'exception' 之外，還會進一步檢查 error message 是否符合 'regexp'。

TIP: 在 message 前面加個識別符號，就可以用 `assertRaisesRegexp()` 粗略地檢查錯誤確實從特定的源頭丟出來的。

例如：

.`test_raise.py`
--------------------------------------------------------------------------------
import unittest

def mod(dividend, divisor):
    remainder = dividend % divisor
    quotient = (dividend - remainder) / divisor
    return quotient, remainder

class RaiseTest(unittest.TestCase):

    def test_raise(self):
        self.assertRaises(ZeroDivisionError, mod, 7, 0) <1>

    def test_raise_regexp(self):
        self.assertRaisesRegexp(ZeroDivisionError, r'.*?Zero', mod, 7, 0)

if __name__ == '__main__':
    unittest.main()
--------------------------------------------------------------------------------
<1> 別誤寫成 `self.assertRaises(ZeroDivisionError, mod(7, 0))`。

執行結果：

[listing]
................................................................................
$ python test_raise.py 
.F
======================================================================
FAIL: test_raise_regexp (__main__.RaiseTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_raise.py", line 14, in test_raise_regexp
    self.assertRaisesRegexp(ZeroDivisionError, r'.*?Zero', mod, 7, 0)
AssertionError: ".*?Zero" does not match "integer division or modulo by zero" <1>

----------------------------------------------------------------------
Ran 2 tests in 0.001s

FAILED (failures=1)
................................................................................
<1> `assertRaisesRegexp()` 會比對 error message 的內容，有助於判定 error message 裡內含的關鍵數據。

`assertRaises()` 跟 `assertRaisesRegexp()` 還支援 context manager 的用法：

 * `assertRaises(exception)` - 檢查離開這個 context 前，必須丟出特定的 exception。
 * `assertRaisesRegexp(exception, regexp)` - 除了檢查會丟出特定的 exception 之外，還會進一步檢查 error message 是否符合 'regexp'。

改寫上面的例子：

--------------------------------------------------------------------------------
import unittest

def mod(dividend, divisor):
    remainder = dividend % divisor
    quotient = (dividend - remainder) / divisor
    return quotient, remainder

class RaiseTest(unittest.TestCase):

    def test_raise(self):
        #self.assertRaises(ZeroDivisionError, mod, 7, 0)
        with self.assertRaises(ZeroDivisionError) as cm:
             mod(7, 0)

    def test_raise_regexp(self):
        #self.assertRaisesRegexp(ZeroDivisionError, r'.*?Zero', mod, 7, 0)
        with self.assertRaisesRegexp(ZeroDivisionError, r'.*?Zero') as cm:
            mod(7, 0)

if __name__ == '__main__':
    unittest.main()
--------------------------------------------------------------------------------

[CAUTION]
.`assertRaises*(exception[, regexp])` 的陷阱
================================================================================
這種 context manager 的用法是 Python 2.7 才有的，單純只是語法上的甜頭（syntax sugar），因為使用上存在著一些陷阱：

--------------------------------------------------------------------------------
def test_raise(self):
    with self.assertRaises(ZeroDivisionError) as cm:
         divisor = a + b / c <1>
         mod(7, 0)
--------------------------------------------------------------------------------
<1> 如果 `c` 的內容是 0 的話，這一行就會丟出 `ZeroDivisionError`。

也就是說 `ZeroDivisionError` 是丟出來了，但卻不一定 `mod()` 丟出來的，在某些情況下，就會讓我們誤判 `mod()` 的實作是沒有問題的。
================================================================================

////////////////////////////////////////////////////////////////////////////////
def assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None):
def assertListEqual(self, list1, list2, msg=None):
def assertTupleEqual(self, tuple1, tuple2, msg=None):
def assertSetEqual(self, set1, set2, msg=None):
def assertDictEqual(self, d1, d2, msg=None):
def assertMultiLineEqual(self, first, second, msg=None):
////////////////////////////////////////////////////////////////////////////////


