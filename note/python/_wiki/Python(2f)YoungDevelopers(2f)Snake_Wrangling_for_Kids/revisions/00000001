= Snake Wrangling for Kids - Learning to Program with Python =
http://www.briggs.net.nz/log/writing/snake-wrangling-for-kids/
<<TableOfContents>>

== Preface ==

A Note to Parents...

Dear Parental(家長的) Unit or other Caregiver(照顧者),

In order for your child to get started with programming, you’re going to need to install Python (at least version 2.4 or greater) on your computer. This is a fairly straight-forward task, but there are a few wrinkles(竅門) depending upon what sort of Operating System you’re using. If you’ve just bought a shiny new computer, have no idea what to do with it, and that previous statement has filled you with a severe(苛刻的) case of the cold chills(寒顫), you’ll probably want to find someone to do this for you. Depending upon the state of your computer, and the speed of your internet connection, this could take anything from 15 minutes to a few hours.

First of all, download and install the latest version of Python (for example, 2.5) for your distribution. Given the large number of Linux flavours, it’s impossible to give exact details on installation for each—but chances are, __if you’re running Linux, you already know what you’re doing anyway. In fact, you’re probably insulted(侮辱) by the very idea of being told how to install. . .anything__

After installation. . .

__. . .You might need to sit down next to your child for the first few chapters, but hopefully after a few examples, they should be batting(拍打) your hands away from the keyboard to do it themselves.__ They should, at least, know how to use a text editor of some kind before they start (no, not a Word Processor, like Microsoft Word—a plain, old-fashioned text editor)—they should at least able to open and close files, create new text files and save what they’re doing. Apart from that, this book will try to teach the basics from there.

Thanks for your time, and kind regards,

THE BOOK (這一本書以 "書本" 擬人化, 而且是寫給小朋友看的; 因此書中一直提到大人如何如何...)

== Chapter 1 Not all snakes will squish you ==

Chances are you were given this book for your birthday. Or possibly for Christmas. Aunty Mildred was going to give you mismatching socks that were two sizes too large (and you wouldn’t want to wear when you grew into them anyway). Instead, she heard someone talking about this printable book, remembered you had one of those computer-thingamabobs(某東西) that you tried to show her how to use last Christmas (you gave up when she started trying to talk into the mouse), and got them to print another copy. Just be thankful you didn’t get the mouldy(發霉的) old socks.

I hope you’re not too disappointed that I popped out of the recycled wrapping paper, instead. A not-quite-so-talkative (囉嗦的; okay, not-talking-at-all) book, with an ominous(不祥的) looking title on the front about “Learning. . .”. But take a moment to think about how I feel. If you were the character from that novel about wizards that is sitting on the bookshelf in your bedroom, I’d possibly have teeth... or perhaps even eyes. I might have moving pictures inside me, or be able to make moaning(悲啼) ghostly sounds when you opened my pages. Instead, I’m printed out on dog-eared(翻舊了的) A4 sheets of paper, stapled(釘住) together or perhaps bound in a folder. How would I know—I don’t have eyes.

I’d give anything for a nice, sharp set of teeth. . .

However it’s not as bad as it sounds. Even if I can’t talk... or bite your fingers when you’re not looking... __I can tell you a little bit about what makes computers ''work''. Not the physical stuff, with wires and computer-chips and cables and devices that would, more than likely, electrocute(電死) you as soon as you touched them (so don’t!!)—but the hidden stuff running around inside those wires and computer-chips and cables and bits, which make computers actually ''useful''.__

{{attachment:figure-1.png}}

It’s a little like thoughts(想法) running around inside your head. If you didn’t have thoughts you’d be sitting on the floor of your bedroom, staring(盯) vacantly(茫然的) at the door and drooling(流口水) down the front of your t-shirt. Without ''programs'', computers would only be useful as a doorstop(制門器)—and even then they wouldn’t be very useful, because you’d keep tripping over(絆倒) them in the night. And there’s nothing worse than a stubbed(粗短的) toe in the dark.

I’m just a book and even I know that.

Your family may have a Playstation, Xbox or Wii sitting in the lounge(起居室)—they’re not much use without programs (Games) to make them work. Your DVD player, possibly your fridge(冰箱) and even your car, all have computer programs to make them more helpful than they would be otherwise. Your DVD player has programs to help it figure out what to play on a DVD; your fridge might have a simple program to make sure it doesn’t use too much electricity(電力), but still keep your food cold; your car might have a computer with a program to warn the driver if they’re about to bump into something.

__If you know how to write computer programs, you can do all sorts of useful things. Perhaps write your own games. Create web pages that actually do stuff, instead of just sitting there looking somewhat colourful. '''Being able to program could possibly even help with your homework(功課).'''__

That said(這就是說), let’s get onto something a bit more interesting.

=== 1.1 A Few Words About Language ===

Just like humans, certainly whales(鯨), possibly dolphins, and maybe even parents (al- though that’s debatable(可爭論的)), __computers have their own language. Actually, also like humans, they have more than one language.__ There are languages covering just about all the letters of the alphabet. A, B, C, D and E are not only letters, they’re also programming languages (which proves that adults have no imagination(想像力), and should be made to read either a dictionary or a thesaurus before naming anything).

__There are programming languages named after(以...命名) people, named using simple acronyms (the capital letters of a series of words), and just a few named after a TV show. Oh, and if you add a few pluses and hashes (+, #) after a couple of those letters I just listed—that’s yet another couple of programming languages as well. Making matters worse, some of the languages are almost the same, and differ only slightly.__

What did I tell you? No imagination!

__Luckily, many of these languages have fallen into disuse(廢止), or vanished(消失了的) completely; but the list of different ways you can ‘talk’ to a computer is still rather worryingly(煩惱地) large.__ I’m only going to discuss one of them—otherwise we might as well not even get started.

It would be more productive to sit in your bedroom and drool down the front of your t-shirt. . .

=== 1.2 The Order of Non-venomous(分泌毒液的) Constricting Serpentes. . . ===

. . .or Pythons, for short.

__Apart from being a snake, Python is also a programming language. However, it was not named after a legless reptile(沒有腿的爬行動物); rather it is one of the few programming languages named after a TV show.__ http://en.wikipedia.org/wiki/Monty_Python[Monty Python] was a British comedy(喜劇) show popular during the 1970’s (and still popular now, actually), which you have to be a certain age to find amusing(好笑的). Anyone below the age of about. . . let’s say 12. . . will wonder what all the fuss(大驚小怪) is all about. Except the fish slapping(非常快的) dance. That’s funny no matter how old you are.

There are a number of things about Python (the programming language, not the snake, nor the TV show) that make it extremely useful when you’re learning to program. For us, at the moment, the most important reason is that you can start it up and do stuff really quickly.

This is the part where you hope Mum, Dad (or whomever is in charge of(負責) the computer), has read the part at the beginning of this book labelled “A Note for Mums and Dads”.

There’s a good way to find out(查明) if they actually have read it:

Ask Mum or Dad which ''terminal application'' you should use (it could be one called ‘Konsole’, ‘rxvt’, ‘xterm’ or any one of a dozen different programs—which is why you’ll probably need to ask). Start the terminal program and type ‘python’ (without the quotes), and hit Enter. You should see something like Figure 1.1.

{{attachment:figure_1-1.png}} <<BR>> Figure 1.1: The ''Python console'' on Linux.

'''If you discover they haven’t read the section in the beginning. . .'''

. . .because there is something missing when you try to follow those instructions— then turn to the front of the book, poke(戳) it under their nose while they’re trying to read the newspaper, and look hopeful. Saying, “please please please please” over and over again, until it becomes annoying, might work quite well, if you’re having trouble convincing(說服) them to get off the couch(躺椅). Of course, the other thing you can do, is turn to the front of the book, and follow the instructions in the Preface to install Python yourself.

=== 1.3 Your first Python program ===

With any luck, if you’ve reached this point, you’ve managed(設法) to start up the Python console, which is one way of running Python commands and programs. __When you first start the console (or after entering a command), you’ll see what’s called a ‘prompt’. In the Python console, the prompt is three chevrons(Ｖ形臂章), or greater-than symbols (`>`) pointing to the right:__

 {{{
>>>
 }}}

If you put enough Python commands together, you have a program that you can run in more than just the console. . . but for the moment we’re going to keep things simple, and type our commands directly in the console, at the prompt (>>>). So, why not start with typing the following:

 {{{
print "Hello World"
 }}}

Make sure you include the quotes (that’s these: ” ”), and hit Enter at the end of the line. Hopefully you’ll see something like the following:

 {{{
>>> print "Hello World"
Hello World
 }}}

__The prompt reappears, to let you know that the Python console is ready to accept more commands.__

Congratulations! You’ve just created your first Python program.

=== 1.4 Your Second Python program. . .the same again? ===

Python programs wouldn’t be all that useful if you had to type the commands every single time you wanted to do something—or if you wrote a program for someone, and they had to type it in before they could use it.

The Word Processor that you might be using to write your school assignments(作業), is probably somewhere between 10 and 100 million lines of code. Depending upon how many lines you printed on one page (and whether or not you printed on both sides of the paper), this could be around 400,000 printed pages. . . or a stack of paper about 40 metres high. Just imagine when you brought that software home from the shop, there would be quite a few trips back and forth to the car, to carry that much paper. . .

. . .and you’d better hope there’s no big gust(突然一陣) of wind while you’re carrying those stacks. Luckily, there’s an alternative to all this typing—or no one would get anything done.

{{attachment:figure-2.png}}

Open a ''text editor'' (again you might have to ask Mum or Dad which one to use), then type the `print` command exactly as you typed it into the console:

 {{{
print "Hello World"
 }}}

Click on the File menu, then Save, and when prompted for a file name, call it `hello.py` and save it in your Home folder (there might be an icon called ‘Home’ somewhere in the Save dialog box). Next open up the terminal application (again Konsole, rxvt, etc... what we used earlier), and type:

 {{{
python hello.py
 }}}

You should see Hello World written to the window exactly as it was when you typed the command in the Python console (see Figure 1.2).

{{attachment:figure_1-2.png}} <<BR>> Figure 1.2: Running a python program from a text file on Linux.

So you can now see that the nice people who created Python, have kindly saved you from having to type the same thing over and over and over and over and over again. Like they did back in the 1980’s. No, I’m serious—they did. Go and ask your Dad if he ever owned a http://en.wikipedia.org/wiki/Sinclair_ZX81[ZX81] when he was younger?

If he did you can point at him and laugh.

Trust me on this one. You won’t get it. But he will.

Be prepared to run away though.

The Sinclair ZX81, released in the 1980’s was one of the first affordable(買得起的) ''home computers''. A number of young boys and girls were driven completely mad, typing in the code for games printed in popular ZX81 magazines—only to discover, after hours of typing, that the darn(補綴) things never worked properly.

'''The End of the Beginning'''

Welcome to the wonderful world of Programming. We’ve started really simply with a “Hello World” application—everyone starts with that, when they’re learning to program. In the next chapter we’ll start to do some more useful things with the Python console and then look at what goes into making a program.

== Chapter 2 8 multiplied by 3.57 equals. . . ==

What is 8 multiplied by 3.57? You’d have to use a calculator, wouldn’t you? Well perhaps you’re extremely smart and can do multiplication of fractions in your head— but that’s not the point. You can also do the same thing with the Python console. Start up the console again (see Chapter 1 for more information, if you’ve skipped ahead for some strange reason), and once you see the prompt, type `8 ∗ 3.57` and press the Enter key:

 {{{
Python 2.5.1 (r251:54863, May 2 2007, 16:56:35)
Type "help", "copyright", "credits" or "license" for more information.
>>> 8 * 3.57
28.559999999999999
 }}}

__'''The star (*), or asterisk key (shift 8 on some keyboards), is used for multiplication, instead of the normal ''times symbol (X)'' that you use at school''' (using the star key is necessary, otherwise how would the computer know whether you meant the letter x or the multiplication symbol X ?).__

 '''Python is broken!?!?'''

 .If you just picked up a calculator and entered 8 x 3.57 the answer showing on the display will be:

 {{{
28.56
 }}}

 .Why is Python different? Is it broken?

 .Actually, no. __The reason can be found in the way ''floating point'' (''fractional numbers(分數)'' with a decimal place) numbers are handled by the computer. '''It’s a complicated and somewhat confusing problem for beginners, so it’s best to just remember that when you’re working with fractions (i.e. with a decimal place on a number), sometimes the result won’t be exactly what you were expecting. (這個誤差可以被解決嗎? 否則用 python 怎麼寫出計算機[?])''' This is true for multiplication, division, addition or subtraction.__

How about an equation(等式) that’s a bit more useful?

Suppose you do chores(零工) once a week, for which you get $5 pocket money(零用錢), and you have a paper round which you do 5 times a week and get $30—how much money would you earn in a year?

If we were writing that on paper, we might write something like:

 {{{
(5 + 30) x 52
 }}}

Which is $5 + $30 multiplied by 52 weeks in a year. Of course, we’re smart, and we know that 5 + 30 is 35, so the equation is really:

 {{{
35 x 52
 }}}

Which is easy enough to do in a calculator, or on paper. But we can do all of these calculations with the console as well:

 {{{
>>> (5 + 30) * 52
1820
>>> 35 * 52
1820
 }}}

So, what if you spend $10 each week? How much do you have left at the end of the year? We could write the equation on paper a couple of different ways, but let’s just type it into the console:

 {{{
>>> (5 + 30 - 10) * 52
1300
 }}}

That’s $5 and $30 minus $10 multiplied by 52 weeks in the year. And you’d have $1300 left at the end of the year. Okay, so that’s not looking all that useful so far. We can do all of that with a calculator. But we’ll come back to this later and show how to make it much more useful.

You can do multiplication and addition (obviously), and subtraction and division in the Python console, along with a bunch of other maths operations that we won’t go into now. For the moment the basic maths symbols for Python (actually they’re called ''operators'') are:

 * + Addition
 * - Subtraction
 * * Multiplication
 * / Division

__The reason the forward-slash (/) is used for division, is that it would be rather difficult to draw a division line (plus they didn’t bother to put a division symbol ÷ on the computer keyboard) as you’re supposed to use for written equations.__ For example if you had 100 eggs and 20 boxes, you might want to know how many eggs would go in each box, so you’d show dividing 100 into 20, by writing the following equation:

{{attachment:figure-3.png}}

Or if you know about long division(長除法), you might write it out fully like this:

{{attachment:figure-4.png}}

Or you might even write it like this:

100 ÷ 20

However, in Python terms you would just type it as “100 / 20”.

Which is much easier, I think. But then, I’m a book—what do I know?

=== 2.1 Use of brackets and “Order of Operations” ===

__We use brackets in a programming language to control what is called “Order of Operations”. An ''operation'' is the use of an ''operator'' (one of those symbols in the table above).__ There are more operators than those basic symbols, but for that simple list (addition, subtraction, multiplication and division), it’s enough to know that multiplication and division both have a higher order than addition and subtraction. Which means you do the multiplication or division part of an equation before you do the addition or subtraction part. In the following equation, all the operators are addition (+), the numbers are added in order: (由左到右)

 {{{
>>> print 5 + 30 + 20
55
 }}}

Similarly, in this equation, there are only addition and subtraction operators, so again Python considers each number in the order it appears:

 {{{
>>> print 5 + 30 - 20
15
 }}}

But in the following equation, there is a multiplication operator, so the numbers 30 and 20 are considered first. The equation is another way of saying, “multiply 30 by 20, then add 5 to the result” (multiplication first, because it has a higher order than addition):

 {{{
>>> print 5 + 30 * 20
605
 }}}

So what happens when we add brackets? The following equation shows the result:

 {{{
>>> print (5 + 30) * 20
700
 }}}

Why is the number different? Because brackets control the order of operations. With brackets, Python knows to do calculate using the operators in the brackets first, then do the operators outside. So that equation is another way of saying, “add 5 and 30, then multiply the result by 20”. The use of brackets can become more complicated. There can be brackets inside brackets:

 {{{
>>> print ((5 + 30) * 20) / 10
70
 }}}

__In this case, Python evaluates the ''inner most'' brackets first, then the outer brackets, and then the other operator.__ So this equation is a way of saying, “add 5 and 30, then multiply the result by 20, finally divide that result by 10”. The result without brackets is again slightly different:

 {{{
>>> 5 + 30 * 20 / 10
65
 }}}

In this case 30 is multiplied by 20 first, then the result is divided by 10, finally 5 is added to the final result.

Remember that multiplication and division always go before addition and subtraction, unless brackets are used to control the order of operations.

=== 2.2 There’s nothing so fickle(善變的) as a variable ===

__'''A ‘variable’ is a programming term used to describe a place to store things.''' The ‘things’ can be numbers, or text, or lists of numbers and text—and all sorts of other items too numerous to go into here. For the moment, let’s just think of a variable as something a bit like a ''mailbox''.__

{{attachment:figure-5.png}}

__You can put things (such as a letter or a package) in a mailbox, just as you can put things (numbers, text, lists of numbers and text, etc, etc, etc) in a variable. '''This mailbox idea is the way many programming languages work. But not all.'''__

__In Python, variables are slightly different. '''Rather than being a mailbox with things in it, a variable is more like a ''label'' which is stuck(貼在) on the outside of the mailbox.''' We can pull that label off and stick it on something else, or even ''tie the label'' (perhaps with a piece of string) to more than one thing. We ''create'' a variable by giving it a name, using an equals sign (=), then telling Python what we want that name to ''point to''.__ For example:

 {{{
>>> fred = 100 <-- 不需要宣告就可以直接使用
 }}}

We’ve just created a variable called ‘fred’ and said that it points to the number 100. __It’s a bit like telling Python to remember that number because we want to use it later.__ To find out what a variable is pointing at, we can just type ‘print’ in the console, followed by the variable name, and hit the Enter key. For example:

 {{{
>>> fred = 100
>>> print fred
100
 }}}

We can also tell Python we want the variable `fred` to point at something else:

 {{{
>>> fred = 200
>>> print fred
200
 }}}

On the first line we say we now want `fred` to point at the number 200. Then, in the second line, we ask what `fred` is pointing at just to prove it changed. We can also point more than one name at the same item:

 {{{
>>> fred = 200
>>> john = fred
>>> print john
200
 }}}

__In the code above, we’re saying that we want the name (or label) `john` to ''point at the same thing'' `fred` is pointing to.__ Of course, ‘fred’ isn’t a very useful name for a variable. It doesn’t tell us anything about what it’s used for. A mailbox is easy— you use a mailbox for mail. __'''But a variable can have a number of different uses, and can point at a whole bunch of different things, so we usually want something more ''informative'' as its name.'''__

Suppose you started up the Python console, typed ‘fred = 200’, then went away—spent 10 years climbing Mount Everest, crossing the Sahara desert, bungy-jumping off a bridge in New Zealand, and finally, sailing down the Amazon river— when you came back to your computer, would you remember what that number 200 meant (and what it was for)?

I don’t think I would.

I just made it up(拼湊) now, and I have no idea what ‘fred = 200’ means (other than a name pointing at the number 200 ). So after 10 years, you’ll have absolutely no chance of remembering.

Aha! But, what if we called our variable: number of students.

 {{{
>>> number_of_students = 200
 }}}

__We can do that because variable names can be made up of letters, numbers and (_) underscores—although they cannot start with a number.__ If you come back after 10 years, ‘number of students’ still makes sense. You can type:

 {{{
>>> print number_of_students
200
 }}}

And you’ll immediately know that we’re talking about 200 students. It’s not always important to come up with(拿出) meaningful names for variables. You can use anything from single letters (such as ‘a’) to large sentences; and sometimes, if you’re doing something quick, a simple and short variable name is just as useful. It depends very much upon whether you want to be able to look at that variable name later and figure out what on earth you were thinking at the time you typed it in.

 {{{
this_is_also_a_valid_variable_name_but_perhaps_not_very_useful
 }}}

=== 2.3 Using Variable ===

Now we know how to create a variable, how do we use it? Remember that equation we came up with earlier? The one to work out how much money you’d have left at the end of the year, if you earned $5 a week doing chores, $30 a week on a paper round, and spent $10 per week. So far we have:

 {{{
>>> print (5 + 30 - 10) * 52
1300
 }}}

What if we turn the first 3 numbers into variables? Try typing the following:

 {{{
>>> chores = 5
>>> paper_round = 30
>>> spending = 10
 }}}

We’ve just created variables named ‘chores’, ‘paper round’ and ‘spending’. We can then re-type the equation to get:

 {{{
>>> print (chores + paper_round - spending) * 52
1300
 }}}

Which gives the exact same answer. What if you get $2 more per week, for doing extra chores. Change the ‘chores’ variable to 7, __then hit the up-arrow key (↑) on your keyboard a couple of times, until the equation re-appears,__ and hit the Enter key:

 {{{
>>> chores = 7
>>> print (chores + paper_round - spending) * 52
1404
 }}}

That’s a lot less typing to find out that you now end up with $1404 at the end of the year. You can try changing the other variables, then hit the up-arrow to perform the calculation again, and see what effect it has.

If you spend twice as much money per week:

 {{{
>>> spending = 20
>>> print (chores + paper_round - spending) * 52
884
 }}}

You’re only left with $884 savings at the end of the year. This is still only slightly useful. We haven’t hit really useful yet. But for the moment, it’s enough to understand that variables are used to store things.

Think of a mailbox with a label on it!

=== 2.4 A Piece of String? ===

If you’re paying attention, and not just skimming(略讀) through looking for the good bits, you might remember I mentioned that variables can be used for all sorts of things— not just numbers. __'''In programming, most of the time we call text a ‘string’(一串). Which might seem a bit weird(古怪的); but if you think that text is just ‘stringing together’ (or joining together) a bunch of letters, perhaps it might make a little more sense.'''__

Then again, perhaps it doesn’t.

In which case, all you need to know, is that a string is just a bunch of letters and numbers and other symbols put together in some meaningful way. All the letters, and numbers, and symbols in this book could make up a string. Your name could be a string. So could your home address. The first Python program we created in Chapter 1, used a string: ‘Hello World’.

In Python, we create a string by putting quotes(雙引號) around the text. So we can take our useless `fred` variable, and put a string inside it like this:

 {{{
>>> fred = "this is a string"
 }}}

And we can see what’s inside the `fred` variable, by typing `print fred`:

 {{{
>>> print fred
this is a string
 }}}

We can also use single-quotes to create a string:

 {{{
>>> fred = ’this is yet another string’
>>> print fred
this is yet another string
 }}}

__However, if you try to type more than one line of text for your string using a single quote (’) or double quote (”), you’ll get an error message in the console.__ For example, type the following line and hit Enter, and you’ll get a fairly scary error message similar to the following:

 {{{
>>> fred = "this is two
File "<stdin>", line 1
fred = "this is two
                  ^
SyntaxError: EOL while scanning single-quoted string
 }}}

We’ll talk more about errors later, but for the moment, if you want more than one line of text, you can use ''3 single quotes'':

 {{{
>>> fred = ’’’this is two
... lines of text in a single string’’’
 }}}

Print out the contents to see if it worked:

 {{{
>>> print fred
this is two
lines of text in a single string
 }}}

__By the way, you’ll see those 3 dots (...) quite a few times when you’re typing something that continues onto another line (like a multi line string; 很直覺的用法!!).__ In fact, you’ll see it a lot more as we continue.

=== 2.5 Tricks with Strings ===

[[|:]]

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==
