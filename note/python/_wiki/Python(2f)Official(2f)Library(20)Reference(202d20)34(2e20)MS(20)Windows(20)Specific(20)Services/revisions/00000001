= Python / Official / Library Reference - 34. MS Windows Specific Services =
http://docs.python.org/library/windows.html
<<TableOfContents>>

== 34.3. _winreg – Windows registry access ==
http://docs.python.org/library/_winreg.html @2010/09/21

Platforms: Windows

Note: __The `_winreg` module has been renamed to `winreg` in Python 3.0.__ The 2to3 tool will automatically adapt imports when converting your sources to 3.0.

New in version 2.0.

__These functions expose the Windows registry API to Python. Instead of using an integer as the ''registry handle'', a ''handle object'' is used to ensure that the handles are closed correctly, even if the programmer neglects to explicitly close them.__

This module offers the following functions:

'''`_winreg.CloseKey(hkey)`'''

__Closes a previously opened registry key. The `hkey` argument specifies a previously opened key.__

Note: __If `hkey` is not closed using this method (or via `hkey.Close()`), it is closed when the `hkey` object is destroyed by Python.__

:::

'''`_winreg.ExpandEnvironmentStrings(unicode)`'''

Expands environment variable placeholders `%NAME%` in unicode strings like `REG_EXPAND_SZ`:

 {{{
>>> ExpandEnvironmentStrings(u"%windir%")
u"C:\\Windows"
 }}}

New in version 2.6.

:::

'''`_winreg.OpenKey(key, sub_key[, res[, sam]])`'''

Opens the specified key, returning a handle object.

`key` is an already open key, or any one of the predefined `HKEY_*` constants.

`sub_key` is a string that identifies the `sub_key` to open.

__`res` is a reserved integer, and must be zero. The default is zero.__

__`sam` is an integer that specifies an ''access mask'' that describes the desired security access for the key. Default is `KEY_READ`.__ See Access Rights for other allowed values.

The result is a new handle to the specified key.

If the function fails, `WindowsError` is raised.

:::

'''`_winreg.QueryValue(key, sub_key)`'''

__Retrieves the ''unnamed'' value for a key, as a string.__

`key` is an already open key, or one of the predefined `HKEY_*` constants.

`sub_key` is a string that holds the name of the subkey with which the value is associated. If this parameter is `None` or empty, the function retrieves the value set by the `SetValue()` method for the key identified by `key`.

__Values in the registry have name, type, and data components. This method retrieves the data for a key’s first value that has a NULL name. But the underlying API call doesn’t return the type, so always use `QueryValueEx()` if possible.[?]__

'''`_winreg.QueryValueEx(key, value_name)`'''

__Retrieves the type and data for a specified value name associated with an open registry key.__

`key` is an already open key, or one of the predefined `HKEY_*` constants.

`value_name` is a string indicating the value to query.

The result is a tuple of 2 items:

|| Index || Meaning ||
|| 0 || The value of the registry item. ||
|| 1 || An integer giving the registry type for this value (see table in docs for `SetValueEx()`) ||

:::

=== 34.3.1. Constants ===

The following constants are defined for use in many `_winreg` functions.

==== 34.3.1.1. HKEY_* Constants ====

`_winreg.HKEY_CLASSES_ROOT` - Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types. Shell and COM applications use the information stored under this key.

`_winreg.HKEY_CURRENT_USER` - Registry entries subordinate to this key define the preferences of the current user. These preferences include the settings of environment variables, data about program groups, colors, printers, network connections, and application preferences.

`_winreg.HKEY_LOCAL_MACHINE` - Registry entries subordinate to this key define the physical state of the computer, including data about the bus type, system memory, and installed hardware and software.

`_winreg.HKEY_USERS` - Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.

`_winreg.HKEY_PERFORMANCE_DATA` - Registry entries subordinate to this key allow you to access performance data. The data is not actually stored in the registry; the registry functions cause the system to collect the data from its source.

`_winreg.HKEY_CURRENT_CONFIG` - Contains information about the current hardware profile of the local computer system.

`_winreg.HKEY_DYN_DATA` - This key is not used in versions of Windows after 98.

==== 34.3.1.2. Access Rights ====

For more information, see Registry Key Security and Access.

`_winreg.KEY_ALL_ACCESS` - Combines the `STANDARD_RIGHTS_REQUIRED`, `KEY_QUERY_VALUE`, `KEY_SET_VALUE`, `KEY_CREATE_SUB_KEY`, `KEY_ENUMERATE_SUB_KEYS`, `KEY_NOTIFY`, and `KEY_CREATE_LINK` access rights.

`_winreg.KEY_WRITE` - Combines the `STANDARD_RIGHTS_WRITE`, `KEY_SET_VALUE`, and `KEY_CREATE_SUB_KEY` access rights.

`_winreg.KEY_READ` - Combines the `STANDARD_RIGHTS_READ`, `KEY_QUERY_VALUE`, `KEY_ENUMERATE_SUB_KEYS`, and `KEY_NOTIFY` values.

`_winreg.KEY_EXECUTE` - Equivalent to `KEY_READ`.

`_winreg.KEY_QUERY_VALUE` - Required to query the values of a registry key.

`_winreg.KEY_SET_VALUE` - Required to create, delete, or set a registry value.

`_winreg.KEY_CREATE_SUB_KEY` - Required to create a subkey of a registry key.

`_winreg.KEY_ENUMERATE_SUB_KEYS` - Required to enumerate the subkeys of a registry key.

`_winreg.KEY_NOTIFY` - Required to request change notifications for a registry key or for subkeys of a registry key.

`_winreg.KEY_CREATE_LINK` - Reserved for system use.

===== 34.3.1.2.1. 64-bit Specific =====

For more information, see Accesing an Alternate Registry View.

`_winreg.KEY_WOW64_64KEY` - Indicates that an application on 64-bit Windows should operate on the 64-bit registry view.

`_winreg.KEY_WOW64_32KEY` - __Indicates that an application on 64-bit Windows should operate on the 32-bit registry view.__

==== 34.3.1.3. Value Types ====

For more information, see Registry Value Types.

`_winreg.REG_BINARY` - Binary data in any form.

`_winreg.REG_DWORD`- 32-bit number.

`_winreg.REG_DWORD_LITTLE_ENDIAN` - A 32-bit number in little-endian format.

`_winreg.REG_DWORD_BIG_ENDIAN` - A 32-bit number in big-endian format.

`_winreg.REG_EXPAND_SZ` - Null-terminated string containing references to environment variables (`%PATH%`).

`_winreg.REG_LINK` - A Unicode symbolic link.

`_winreg.REG_MULTI_SZ` - A sequence of null-terminated strings, terminated by two null characters. (Python handles this termination automatically.)

`_winreg.REG_NONE` - No defined value type.

`_winreg.REG_RESOURCE_LIST` - A device-driver resource list.

`_winreg.REG_FULL_RESOURCE_DESCRIPTOR` - A hardware setting.

`_winreg.REG_RESOURCE_REQUIREMENTS_LIST` - A hardware resource list.

`_winreg.REG_SZ` - A null-terminated string.

:::

