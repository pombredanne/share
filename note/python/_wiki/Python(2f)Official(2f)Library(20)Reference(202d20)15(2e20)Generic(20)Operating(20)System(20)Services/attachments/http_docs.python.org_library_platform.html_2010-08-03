   #Search within Python v2.7 documentation Copyright Python v2.7
   documentation 15. Generic Operating System Services 15.15. errno —
   Standard errno system symbols 15.13. curses.panel — A panel stack
   extension for curses

Navigation

     * index
     * modules |
     * next |
     * previous |
     *
     * Python v2.7 documentation »
     * The Python Standard Library »
     * 15. Generic Operating System Services »

15.14. platform — Access to underlying platform’s identifying data¶

   New in version 2.3.

   Note

   Specific platforms listed alphabetically, with Linux included in the
   Unix section.

15.14.1. Cross Platform¶

   platform.architecture(executable=sys.executable, bits='', linkage='')¶
          Queries the given executable (defaults to the Python interpreter
          binary) for various architecture information.

          Returns a tuple (bits, linkage) which contain information about
          the bit architecture and the linkage format used for the
          executable. Both values are returned as strings.

          Values that cannot be determined are returned as given by the
          parameter presets. If bits is given as '', the sizeof(pointer)()
          (or sizeof(long)() on Python version < 1.5.2) is used as
          indicator for the supported pointer size.

          The function relies on the system’s file command to do the
          actual work. This is available on most if not all Unix platforms
          and some non-Unix platforms and then only if the executable
          points to the Python interpreter. Reasonable defaults are used
          when the above needs are not met.

   platform.machine()¶
          Returns the machine type, e.g. 'i386'. An empty string is
          returned if the value cannot be determined.

   platform.node()¶
          Returns the computer’s network name (may not be fully
          qualified!). An empty string is returned if the value cannot be
          determined.

   platform.platform(aliased=0, terse=0)¶
          Returns a single string identifying the underlying platform with
          as much useful information as possible.

          The output is intended to be human readable rather than machine
          parseable. It may look different on different platforms and this
          is intended.

          If aliased is true, the function will use aliases for various
          platforms that report system names which differ from their
          common names, for example SunOS will be reported as Solaris. The
          system_alias() function is used to implement this.

          Setting terse to true causes the function to return only the
          absolute minimum information needed to identify the platform.

   platform.processor()¶
          Returns the (real) processor name, e.g. 'amdk6'.

          An empty string is returned if the value cannot be determined.
          Note that many platforms do not provide this information or
          simply return the same value as for machine(). NetBSD does this.

   platform.python_build()¶
          Returns a tuple (buildno, builddate) stating the Python build
          number and date as strings.

   platform.python_compiler()¶
          Returns a string identifying the compiler used for compiling
          Python.

   platform.python_branch()¶
          Returns a string identifying the Python implementation SCM
          branch.

          New in version 2.6.

   platform.python_implementation()¶
          Returns a string identifying the Python implementation. Possible
          return values are: ‘CPython’, ‘IronPython’, ‘Jython’.

          New in version 2.6.

   platform.python_revision()¶
          Returns a string identifying the Python implementation SCM
          revision.

          New in version 2.6.

   platform.python_version()¶
          Returns the Python version as string 'major.minor.patchlevel'

          Note that unlike the Python sys.version, the returned value will
          always include the patchlevel (it defaults to 0).

   platform.python_version_tuple()¶
          Returns the Python version as tuple (major, minor, patchlevel)
          of strings.

          Note that unlike the Python sys.version, the returned value will
          always include the patchlevel (it defaults to '0').

   platform.release()¶
          Returns the system’s release, e.g. '2.2.0' or 'NT' An empty
          string is returned if the value cannot be determined.

   platform.system()¶
          Returns the system/OS name, e.g. 'Linux', 'Windows', or 'Java'.
          An empty string is returned if the value cannot be determined.

   platform.system_alias(system, release, version)¶
          Returns (system, release, version) aliased to common marketing
          names used for some systems. It also does some reordering of the
          information in some cases where it would otherwise cause
          confusion.

   platform.version()¶
          Returns the system’s release version, e.g. '#3 on degas'. An
          empty string is returned if the value cannot be determined.

   platform.uname()¶
          Fairly portable uname interface. Returns a tuple of strings
          (system, node, release, version, machine, processor) identifying
          the underlying platform.

          Note that unlike the os.uname() function this also returns
          possible processor information as additional tuple entry.

          Entries which cannot be determined are set to ''.

15.14.2. Java Platform¶

   platform.java_ver(release='', vendor='', vminfo=('', '', ''),
          osinfo=('', '', ''))¶
          Version interface for Jython.

          Returns a tuple (release, vendor, vminfo, osinfo) with vminfo
          being a tuple (vm_name, vm_release, vm_vendor) and osinfo being
          a tuple (os_name, os_version, os_arch). Values which cannot be
          determined are set to the defaults given as parameters (which
          all default to '').

15.14.3. Windows Platform¶

   platform.win32_ver(release='', version='', csd='', ptype='')¶
          Get additional version information from the Windows Registry and
          return a tuple (version, csd, ptype) referring to version
          number, CSD level and OS type (multi/single processor).

          As a hint: ptype is 'Uniprocessor Free' on single processor NT
          machines and 'Multiprocessor Free' on multi processor machines.
          The ‘Free’ refers to the OS version being free of debugging
          code. It could also state ‘Checked’ which means the OS version
          uses debugging code, i.e. code that checks arguments, ranges,
          etc.

          Note

          Note: this function works best with Mark Hammond’s win32all
          package installed, but also on Python 2.3 and later (support for
          this was added in Python 2.6). It obviously only runs on Win32
          compatible platforms.

15.14.3.1. Win95/98 specific¶

   platform.popen(cmd, mode='r', bufsize=None)¶
          Portable popen() interface. Find a working popen implementation
          preferring win32pipe.popen(). On Windows NT, win32pipe.popen()
          should work; on Windows 9x it hangs due to bugs in the MS C
          library.

15.14.4. Mac OS Platform¶

   platform.mac_ver(release='', versioninfo=('', '', ''), machine='')¶
          Get Mac OS version information and return it as tuple (release,
          versioninfo, machine) with versioninfo being a tuple (version,
          dev_stage, non_release_version).

          Entries which cannot be determined are set to ''. All tuple
          entries are strings.

          Documentation for the underlying gestalt() API is available
          online at http://www.rgaros.nl/gestalt/.

15.14.5. Unix Platforms¶

   platform.dist(distname='', version='', id='', supported_dists=('SuSE',
          'debian', 'redhat', 'mandrake', ...))¶
          This is an old version of the functionality now provided by
          linux_distribution(). For new code, please use the
          linux_distribution().

          The only difference between the two is that dist() always
          returns the short name of the distribution taken from the
          supported_dists parameter.

          Deprecated since version 2.6.

   platform.linux_distribution(distname='', version='', id='',
          supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...),
          full_distribution_name=1)¶
          Tries to determine the name of the Linux OS distribution name.

          supported_dists may be given to define the set of Linux
          distributions to look for. It defaults to a list of currently
          supported Linux distributions identified by their release file
          name.

          If full_distribution_name is true (default), the full
          distribution read from the OS is returned. Otherwise the short
          name taken from supported_dists is used.

          Returns a tuple (distname,version,id) which defaults to the args
          given as parameters. id is the item in parentheses after the
          version number. It is usually the version codename.

          New in version 2.6.

   platform.libc_ver(executable=sys.executable, lib='', version='',
          chunksize=2048)¶
          Tries to determine the libc version against which the file
          executable (defaults to the Python interpreter) is linked.
          Returns a tuple of strings (lib, version) which default to the
          given parameters in case the lookup fails.

          Note that this function has intimate knowledge of how different
          libc versions add symbols to the executable is probably only
          usable for executables compiled using gcc.

          The file is read and scanned in chunks of chunksize bytes.

Table Of Contents

     * 15.14. platform — Access to underlying platform’s identifying data
          + 15.14.1. Cross Platform
          + 15.14.2. Java Platform
          + 15.14.3. Windows Platform
               o 15.14.3.1. Win95/98 specific
          + 15.14.4. Mac OS Platform
          + 15.14.5. Unix Platforms

Previous topic

   15.13. curses.panel — A panel stack extension for curses

Next topic

   15.15. errno — Standard errno system symbols

This Page

     * Report a Bug
     * Show Source

Quick search

   __________________ Go

   Enter search terms or a module, class or function name.

Navigation

     * index
     * modules |
     * next |
     * previous |
     *
     * Python v2.7 documentation »
     * The Python Standard Library »
     * 15. Generic Operating System Services »

   © Copyright 1990-2010, Python Software Foundation.
   The Python Software Foundation is a non-profit corporation. Please
   donate.
   Last updated on Aug 02, 2010. Found a bug?
   Created using Sphinx 0.6.5.
http://docs.python.org/_static/opensearch.xml
http://docs.python.org/copyright.html
http://docs.python.org/index.html
http://docs.python.org/library/allos.html
http://docs.python.org/library/errno.html
http://docs.python.org/library/curses.panel.html
http://docs.python.org/genindex.html
http://docs.python.org/modindex.html
http://docs.python.org/library/errno.html
http://docs.python.org/library/curses.panel.html
http://docs.python.org/index.html
http://docs.python.org/library/index.html
http://docs.python.org/library/allos.html
http://docs.python.org/library/platform.html#module-platform
http://docs.python.org/library/platform.html#cross-platform
http://docs.python.org/library/platform.html#platform.architecture
http://docs.python.org/library/platform.html#platform.machine
http://docs.python.org/library/platform.html#platform.node
http://docs.python.org/library/platform.html#platform.platform
http://docs.python.org/library/platform.html#platform.system_alias
http://docs.python.org/library/platform.html#platform.processor
http://docs.python.org/library/platform.html#platform.machine
http://docs.python.org/library/platform.html#platform.python_build
http://docs.python.org/library/platform.html#platform.python_compiler
http://docs.python.org/library/platform.html#platform.python_branch
http://docs.python.org/library/platform.html#platform.python_implementation
http://docs.python.org/library/platform.html#platform.python_revision
http://docs.python.org/library/platform.html#platform.python_version
http://docs.python.org/library/platform.html#platform.python_version_tuple
http://docs.python.org/library/platform.html#platform.release
http://docs.python.org/library/platform.html#platform.system
http://docs.python.org/library/platform.html#platform.system_alias
http://docs.python.org/library/platform.html#platform.version
http://docs.python.org/library/platform.html#platform.uname
http://docs.python.org/library/os.html#os.uname
http://docs.python.org/library/platform.html#java-platform
http://docs.python.org/library/platform.html#platform.java_ver
http://docs.python.org/library/platform.html#windows-platform
http://docs.python.org/library/platform.html#platform.win32_ver
http://docs.python.org/library/platform.html#win95-98-specific
http://docs.python.org/library/platform.html#platform.popen
http://docs.python.org/library/platform.html#platform.popen
http://docs.python.org/library/platform.html#mac-os-platform
http://docs.python.org/library/platform.html#platform.mac_ver
http://www.rgaros.nl/gestalt/
http://docs.python.org/library/platform.html#unix-platforms
http://docs.python.org/library/platform.html#platform.dist
http://docs.python.org/library/platform.html#platform.linux_distribution
http://docs.python.org/library/platform.html#platform.linux_distribution
http://docs.python.org/library/platform.html#platform.linux_distribution
http://docs.python.org/library/platform.html#platform.libc_ver
http://docs.python.org/contents.html
http://docs.python.org/library/platform.html
http://docs.python.org/library/platform.html#cross-platform
http://docs.python.org/library/platform.html#java-platform
http://docs.python.org/library/platform.html#windows-platform
http://docs.python.org/library/platform.html#win95-98-specific
http://docs.python.org/library/platform.html#mac-os-platform
http://docs.python.org/library/platform.html#unix-platforms
http://docs.python.org/library/curses.panel.html
http://docs.python.org/library/errno.html
http://docs.python.org/bugs.html
http://docs.python.org/_sources/library/platform.txt
http://docs.python.org/genindex.html
http://docs.python.org/modindex.html
http://docs.python.org/library/errno.html
http://docs.python.org/library/curses.panel.html
http://docs.python.org/index.html
http://docs.python.org/library/index.html
http://docs.python.org/library/allos.html
http://docs.python.org/copyright.html
http://www.python.org/psf/donations/
http://docs.python.org/bugs.html
http://sphinx.pocoo.org/
