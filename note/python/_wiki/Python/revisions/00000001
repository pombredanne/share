= Python =
<<TableOfContents>>

== Overview ==
http://www.python.org/

__Python is a ''dynamic object-oriented'' programming language that can be used for many kinds of software development. It offers strong support for ''integration'' with other languages and tools, comes with extensive standard libraries, and can be learned in a few days. '''Many Python programmers report substantial(重大的) productivity gains and feel the language encourages the development of higher quality, more maintainable code. (整合能力與生產力, 是 Python 最為人津津樂道的)'''__

Python runs on Windows, Linux/Unix, Mac OS X, OS/2, http://en.wikipedia.org/wiki/Amiga[Amiga], Palm Handhelds, and Nokia mobile phones. Python has also been ported to the Java and .NET virtual machines.

Python is distributed under an OSI-approved open source http://www.python.org/psf/license/[license] that makes it free to use, even for commercial products.

The http://www.python.org/psf/[Python Software Foundation (PSF)] holds and protects the intellectual property rights(著作權) behind Python, underwrites(承辦) the http://www.python.org/community/pycon/[PyCon] conference, and funds grants(撥款) and other projects in the Python community.

=== About Python ===
http://www.python.org/about/

Python is a remarkably powerful dynamic programming language that is used in a wide variety of ''application domains''. Python is often compared to http://en.wikipedia.org/wiki/Tcl[Tcl], Perl, Ruby, Scheme or Java. Some of its key distinguishing features include:

 * very clear, readable syntax
 * strong ''introspection(內省)'' capabilities
 * intuitive object orientation
 * natural expression of ''procedural code''
 * __full ''modularity'', supporting hierarchical packages__
 * exception-based error handling
 * very high level dynamic data types
 * extensive standard libraries and third party modules for virtually every task
 * __''extensions'' and ''modules'' easily written in C, C++ (or Java for http://www.jython.org/[Jython], or .NET languages for http://www.ironpython.com/[IronPython])__
 * __embeddable within applications as a ''scripting interface''__

==== Python is powerful... and fast ====

Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files. The language itself is a flexible powerhouse(發電廠) that can handle practically any ''problem domain''. __'''Build your own web server in three lines of code.''' Build flexible ''data-driven code'' using Python's powerful and dynamic ''introspection'' capabilities and advanced language features such as ''meta-classes'', ''duck typing'' and ''decorators''.__

Python lets you write the code you need, quickly. And, thanks to a highly optimized ''byte compiler'' and support ''libraries''(事先編譯好的套件而言), Python code runs more than fast enough for most applications.

==== Python plays well with others ====

Python can integrate with http://sourceforge.net/projects/pywin32/[COM], http://www.zope.org/Members/Brian/PythonNet[.NET], and http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/81254[CORBA] objects.

For Java libraries, use http://www.jython.org/[Jython], an implementation of Python for the Java Virtual Machine.

For .NET, try http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython[IronPython], Microsoft's new implementation of Python for .NET, or http://pythonnet.sourceforge.net/[Python for .NET].

Python is also supported for the http://www.zeroc.com/ice.html[Internet Communications Engine (ICE)] and many other integration technologies.

__If you find something that Python cannot do, or if you need the performance advantage of low-level code, you can write ''extension modules'' in C or C++, or ''wrap'' existing code with http://www.swig.org/[SWIG] or http://www.boost.org/libs/python/doc/[Boost.Python]. Wrapped modules appear to your program exactly like native Python code. '''That's ''language integration'' made easy. You can also go the opposite route and embed Python in your own application, providing your users with a language they'll enjoy using.'''__

==== Python runs everywhere ====

Python is available for all major operating systems: Windows, Linux/Unix, OS/2, Mac, Amiga, among others. There are even versions that runs on .NET, the Java virtual machine, and http://www.forum.nokia.com/python[Nokia Series 60] cell phones. You'll be pleased to know that the same source code will run unchanged across all implementations.

Your favorite system isn't listed here? It may still support Python if there's a C compiler for it. Ask around on [[news:comp.lang.python|news:comp.lang.python]] - or just try compiling Python yourself.

==== Python is friendly... and easy to learn ====

The Python newsgroup is known as one of the friendliest around. The avid(熱心的) developer and user http://www.python.org/community[community] maintains a http://wiki.python.org/moin/[wiki], hosts international and local http://www.python.org/community/workshops[conferences], runs development sprints(衝刺), and contributes to online code repositories.

Python also comes with complete http://www.python.org/doc[documentation], both integrated into the language and as separate web pages. Online tutorials target both the seasoned programmer and the newcomer. All are designed to make you productive quickly. The availability of first-rate http://wiki.python.org/moin/PythonBooks[books] completes the learning package.

==== Python is Open ====

The Python implementation is under an open source license that makes it freely usable and distributable, even for commercial use. The Python license is administered by the Python Software Foundation.

Take a look at http://www.python.org/about/apps[application domains] where Python is used, or try the http://www.python.org/download/[current download] for yourself.

== Python Tutorial (Release 2.5.2 / 21st February, 2008) ==
http://docs.python.org/tut/tut.html

=== Front Matter ===

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python's elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python Web site, http://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

__The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an ''extension language'' for customizable applications. (有許多應用程式均以 Python 來支援 scripting 功能, 例如 Blender 3D)__

This tutorial introduces the reader informally(簡略地) to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, see the http://docs.python.org/lib/lib.html[Python Library Reference] document. The http://docs.python.org/ref/ref.html[Python Reference Manual] gives a more formal definition of the language. To write extensions in C or C++, read http://docs.python.org/ext/ext.html[Extending and Embedding the Python Interpreter] and http://docs.python.org/api/api.html[Python/C API Reference]. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python's most noteworthy(值得注意的) features, and will give you a good idea of the language's flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described in the Python Library Reference.

=== 1. Whetting Your Appetite ===

If you do much work on computers, eventually you find that there's some task you'd like to automate. For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you'd like to write a small custom database, or a specialized GUI application, or a simple game.

__If you're a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow. Perhaps you're writing a test suite for such a library and find writing the testing code a tedious task. Or maybe you've written a program that could use an extension language, and you don't want to design and implement a whole new language for your application. (一直強調可以做為 extension language 使用, 這一點倒是不常見...)__

Python is just the language for you.

__You could write a Unix shell script or Windows batch files for some of these tasks, '''but shell scripts are best at moving around files and changing text data, not well-suited for GUI applications or games.''' You could write a C/C++/Java program, but it can take a lot of development time to get even a ''first-draft program''. Python is simpler to use, available on Windows, MacOS X, and Unix operating systems, and will help you get the job done more quickly.__

Python is simple to use, but it is a real programming language, offering much more structure and support for large programs than shell scripts or batch files can offer. On the other hand, Python also offers much more error checking than C, and, being a very-high-level language, it has high-level data types built in, such as flexible arrays and dictionaries. __Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages. (Perl 已經快被其他後起的語言, 壓縮到快沒有生存空間了...)__

__Python allows you to split your program into ''modules'' that can be reused in other Python programs.__ It comes with a large collection of standard modules that you can use as the basis of your programs -- or as examples to start learning to program in Python. Some of these modules provide things like file I/O, system calls, sockets, and even interfaces to graphical user interface toolkits like http://www.tcl.tk/[Tk].

__Python is an interpreted language, which can save you considerable time during program development because no compilation and linking is necessary. '''The interpreter can be used interactively, which makes it easy to experiment with features of the language, to write throw-away programs, or to test functions during ''bottom-up program development''.''' It is also a handy desk calculator.__

Python enables programs to be written compactly and readably. Programs written in Python are typically much shorter than equivalent C, C++, or Java programs, for several reasons:

 * the high-level data types allow you to express complex operations in a single statement;
 * __'''statement grouping is done by indentation instead of beginning and ending brackets; (這是讓人最不習慣的地方, 但另一方面也強迫實行縮排的好習慣...)'''__
 * no variable or argument declarations are necessary.

Python is extensible: if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that may only be available in binary form (such as a vendor-specific graphics library). __Once you are really hooked, you can link the Python interpreter into an application written in C and use it as an ''extension or command language'' for that application.__

__By the way, the language is named after the BBC show "Monty Python's Flying Circus"(蒙蒂蟒蛇的飛行馬戲團) and has nothing to do with nasty reptiles(令人厭惡的爬蟲類). Making references to Monty Python skits(幽默諷刺短劇) in documentation is not only allowed, it is encouraged! (語言怪異的文化, 自己的幽默...)__

Now that you are all excited about Python, you'll want to examine it in some more detail. Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read.

In the next chapter, the mechanics(技巧) of using the interpreter are explained. This is rather mundane(單調的) information, but essential for trying out the examples shown later.

The rest of the tutorial introduces various features of the Python language and system through examples, beginning with simple expressions, statements and data types, through functions and modules, and finally touching upon advanced concepts like exceptions and user-defined classes.

=== 2. Using the Python Interpreter ===

==== 2.1 Invoking the Interpreter ====

The Python interpreter is usually installed as `/usr/local/bin/python` on those machines where it is available; putting `/usr/local/bin` in your Unix shell's search path makes it possible to start it by typing the command

 {{{
python
 }}}

to the shell. Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator. (E.g., `/usr/local/python` is a popular alternative location.)

On Windows machines, the Python installation is usually placed in `C:\Python24`, though you can change this when you're running the installer. To add this directory to your path, you can type the following command into the command prompt in a DOS box:

 {{{
set path=%path%;C:\python24
 }}}

__Typing an ''end-of-file character'' (Control-D on Unix, Control-Z on Windows) at the ''primary prompt'' causes the interpreter to exit with a ''zero exit status''. If that doesn't work, you can exit the interpreter by typing the following commands: "`import sys; sys.exit()`".__

The interpreter's line-editing features usually aren't very sophisticated. On Unix, whoever installed the interpreter may have enabled support for the GNU readline library, which adds more elaborate(精巧的) interactive editing and history features. Perhaps the quickest check to see whether command line editing is supported is typing Control-P to the first Python prompt you get. If it beeps, you have command line editing; see Appendix A for an introduction to the keys. If nothing appears to happen, or if `P` is echoed, command line editing isn't available; you'll only be able to use backspace to remove characters from the current line. (如果出現 "SyntaxError: invalid syntax", 那代表什麼?)

__The interpreter operates somewhat like the Unix shell: when called with ''standard input'' connected to a ''tty device'' (後面沒有加參數的情況), it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a script from that file.__

A second way of starting the interpreter is "`python -c command [arg] ...`", which executes the statement(s) in command, analogous to the shell's `-c` option. Since Python statements often contain spaces or other characters that are special to the shell, it is best to quote command in its entirety with double quotes. (例如 `pyton -c "print 6 * 6"`)

__Some Python modules are also useful as scripts. These can be invoked using "`python -m module [arg] ...`", which executes the source file for module as if you had spelled out its full name on the command line. (很類似於 Java 裡頭 "`java -jar ...`" 的執行方式)__

__Note that there is a difference between "`python file`" and "`python <file`". In the latter case, input requests from the program, such as calls to `input()` and `raw_input()`, are satisfied from file. Since this file has already been read until the end by the parser before the program starts executing, the program will encounter end-of-file immediately. (如同最後按下 Control-D 或 Control-Z 一般, 這會影響 `-i` 參數的應用) In the former case (which is usually what you want) they are satisfied from whatever file or device is connected to standard input of the Python interpreter.__

When a script file is used, it is sometimes useful to be able to run the script and enter ''interactive mode'' afterwards(其後). This can be done by passing `-i` before the script. (執行完 script 後, 直接進入 python 提示字元, 不回到 shell 而言; This does not work if the script is read from standard input, for the same reason as explained in the previous paragraph)

===== 2.1.1 Argument Passing =====

__When known to the interpreter, the script name and additional arguments thereafter(此後) are passed to the script in the variable `sys.argv`, which is a list of strings. Its length is at least one; when no script and no arguments are given, `sys.argv[0]` is an empty string. When the script name is given as '`-`' (meaning standard input), `sys.argv[0]` is set to '`-`'. When `-c` command is used, `sys.argv[0]` is set to '`-c`'. When `-m module` is used, `sys.argv[0]` is set to the full name of the located module. Options found after `-c command` or `-m module` are not consumed by the Python interpreter's option processing but left in `sys.argv` for the command or module to handle.[?]__

===== 2.1.2 Interactive Mode =====

When commands are read from a tty, the interpreter is said to be in interactive mode. In this mode it prompts for the next command with the ''primary prompt'', usually three greater-than signs ("`>>> `"); for continuation(延續) lines it prompts with the ''secondary prompt'', by default three dots ("`... `"). The interpreter prints a welcome message stating its version number and a copyright notice before printing the first prompt:

 {{{
python
Python 1.5.2b2 (#1, Feb 28 1999, 00:02:06)  [GCC 2.8.1] on sunos5
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
>>>
 }}}

Continuation lines are needed when entering a multi-line construct. As an example, take a look at this `if` statement:

 {{{
>>> the_world_is_flat = 1
>>> if the_world_is_flat:
...     print "Be careful not to fall off!"
...
Be careful not to fall off!
 }}}

==== 2.2 The Interpreter and Its Environment ====

===== 2.2.1 Error Handling =====

__When an error occurs, the interpreter prints an error message and a ''stack trace''. In interactive mode, it then returns to the primary prompt; when input came from a file, it exits with a ''nonzero exit status'' after printing the stack trace. (Exceptions handled by an `except` clause in a `try` statement are not errors in this context; 有被攔截而言) Some errors are unconditionally(無條件地) fatal and cause an exit with a nonzero exit; this applies to internal inconsistencies and some cases of running out of memory. (等同於 Java 裡頭的 `Error`) '''All error messages are written to the ''standard error'' stream; normal output from executed commands is written to ''standard output''.'''__

__'''Typing the ''interrupt character'' (usually Control-C or DEL) to the primary or secondary prompt cancels the input and returns to the primary prompt. (要離開 interactive mode 則要按 Control-Z 或 Control-D) Typing an interrupt while a command is executing raises the `KeyboardInterrupt` exception, which may be handled by a `try` statement.'''__

===== 2.2.2 Executable Python Scripts =====

On BSD'ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line

`#!/usr/bin/env python`

(assuming that the interpreter is on the user's PATH) at the beginning of the script and giving the file an executable mode. __The "`#!`" must be the first two characters of the file. On some platforms, this first line must end with a Unix-style line ending ("`\n`"), not a Mac OS ("`\r`") or Windows ("`\r\n`") line ending. Note that the hash, or pound, character, "`#`", is used to start a comment in Python.__

The script can be given an executable mode, or permission, using the `chmod` command:

 {{{
$ chmod +x myscript.py
 }}}

===== 2.2.3 Source Code Encoding =====

It is possible to use encodings different than ASCII in Python source files. The best way to do it is to put one more special comment line right after the `#!` line to define the source file encoding:

 {{{
# -*- coding: encoding -*-
 }}}

With that declaration, all characters in the source file will be treated as having the encoding encoding, and it will be possible to directly write ''Unicode string literals'' in the selected encoding. The list of possible encodings can be found in the Python Library Reference, in the section on http://docs.python.org/lib/standard-encodings.html[codecs].

For example, to write Unicode literals including the Euro currency symbol, the ISO-8859-15 encoding can be used, with the Euro symbol having the ordinal value 164. This script will print the value 8364 (the Unicode codepoint corresponding to the Euro symbol) and then exit:

 {{{
# -*- coding: iso-8859-15 -*-

currency = u"€" // 前導的 "u" 表示 unicode string, 下面還有 "r" 表示 raw string
print ord(currency)
 }}}

If your editor supports saving files as UTF-8 with a UTF-8 ''byte order mark'' (aka BOM), you can use that instead of an ''encoding declaration''. http://en.wikipedia.org/wiki/IDLE_(Python)[IDLE] supports this capability if Options/General/Default Source Encoding/UTF-8 is set. __Notice that this signature is not understood in older Python releases (2.2 and earlier), and also not understood by the operating system for script files with `#!` lines (only used on Unix systems; 還是乖乖做 encoding declaration 比較實在).__

__By using UTF-8 (either through the signature or an encoding declaration), characters of most languages in the world can be used simultaneously in string literals and comments. '''Using non-ASCII characters in identifiers is not supported.''' To display all these characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the characters in the file.__

===== 2.2.4 The Interactive Startup File =====

When you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started. You can do this by setting an environment variable named `PYTHONSTARTUP` to the name of a file containing your start-up commands. This is similar to the `.profile` feature of the Unix shells.

__This file is only read in ''interactive sessions'', not when Python reads commands from a script, and not when `/dev/tty` is given as the explicit source of commands (which otherwise behaves like an interactive session). It is executed in the same ''namespace'' where interactive commands are executed, so that objects that it defines or imports can be used without qualification in the interactive session.__ You can also change the prompts `sys.ps1` and `sys.ps2 `in this file.

If you want to read an additional start-up file from the current directory, you can program this in the global start-up file using code like "`if os.path.isfile('.pythonrc.py'): execfile('.pythonrc.py')`" (最前面的 "." 有點怪? 不是應該用 "./" 嗎[?]). If you want to use the startup file in a script, you must do this explicitly in the script:

 {{{
import os
filename = os.environ.get('PYTHONSTARTUP')
if filename and os.path.isfile(filename):
    execfile(filename)
 }}}

=== 3. An Informal Introduction to Python ===

In the following examples, input and output are distinguished by the presence or absence of prompts ("`>>> `" and "`... `"): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. __Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.__

Many of the examples in this manual, even those entered at the interactive prompt, include comments. __Comments in Python start with the hash character, "#", and extend to the end of the ''physical line''. A comment may appear at the start of a line or following whitespace or code, but not within a string literal.__ A hash character within a string literal is just a hash character.

Some examples:

 {{{
# this is the first comment
SPAM = 1                 # and this is the second comment
                         # ... and now a third!
STRING = "# This is not a comment."
 }}}

==== 3.1 Using Python as a Calculator ====

Let's try some simple Python commands. Start the interpreter and wait for the primary prompt, "`>>> `". (It shouldn't take long.)

===== 3.1.1 Numbers =====

The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators `+`, `-`, `*` and `/` work just like in most other languages (for example, Pascal or C); parentheses can be used for grouping. For example: __(實驗確認, 在打完 comment 之後, 下一行會進入 secondary prompt, 但下一行並不因此屬於 comment 的一部份)__

 {{{
>>> 2+2
4
>>> # This is a comment
... 2+2
4
>>> 2+2  # and a comment on the same line as code
4
>>> (50-5*6)/4
5
>>> # Integer division returns the floor:
... 7/3
2
>>> 7/-3
-3
 }}}

The equal sign ("`=`") is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt:

 {{{
>>> width = 20
>>> height = 5*9
>>> width * height
900
 }}}

A value can be assigned to several variables simultaneously:

 {{{
>>> x = y = z = 0  # Zero x, y and z
>>> x
0
>>> y
0
>>> z
0
 }}}

__There is full support for floating point; operators with mixed type operands convert the integer operand to floating point:__

 {{{
>>> 3 * 3.75 / 1.5
7.5
>>> 7.0 / 2
3.5
 }}}

''Complex numbers''(複數) are also supported; imaginary numbers are written with a suffix of "`j`" or "`J`". Complex numbers with a nonzero real component are written as "`(real+imagj)`", or can be created with the "`complex(real, imag)`" function.

 {{{
>>> 1j * 1J
(-1+0j)
>>> 1j * complex(0,1)
(-1+0j)
>>> 3+1j*3
(3+3j)
>>> (3+1j)*3
(9+3j)
>>> (1+2j)/(1+1j)
(1.5+0.5j)
 }}}

Complex numbers are always represented as two floating point numbers, the real and imaginary part. To extract these parts from a complex number `z`, use `z.real` and `z.imag`.

 {{{
>>> a=1.5+0.5j
>>> a.real
1.5
>>> a.imag
0.5
 }}}

The conversion functions to floating point and integer (`float()`, `int()` and `long()`) don't work for complex numbers -- there is no one correct way to convert a complex number to a real number. Use `abs(z)` to get its magnitude (量值; as a float) or `z.real` to get its real part.

 {{{
>>> a=3.0+4.0j
>>> float(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: can't convert complex to float; use abs(z)
>>> a.real
3.0
>>> a.imag
4.0
>>> abs(a)  # sqrt(a.real**2 + a.imag**2)
5.0
>>>
 }}}

__In interactive mode, the last printed expression is assigned to the variable `_`. This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations,__ for example:

 {{{
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _
113.0625
>>> round(_, 2)
113.06
>>>
 }}}

This variable should be treated as read-only by the user. Don't explicitly assign a value to it -- you would create an independent local variable with the same name ''masking'' the built-in variable with its magic behavior.

===== 3.1.2 Strings =====

Besides numbers, Python can also manipulate strings, which can be expressed in several ways. __They can be enclosed in single quotes or double quotes: (輸出結果, 相對也會機動地調整最外層的單引號或雙引號...)__

 {{{
>>> 'spam eggs'
'spam eggs'
>>> 'doesn\'t'
"doesn't"
>>> "doesn't"
"doesn't"
>>> '"Yes," he said.'
'"Yes," he said.'
>>> "\"Yes,\" he said."
'"Yes," he said.'
>>> '"Isn\'t," she said.'
'"Isn\'t," she said.'
 }}}

String literals can span multiple lines in several ways. __Continuation lines can be used, with a backslash as the last character on the line indicating that the next line is a logical continuation of the line:__

 {{{
hello = "This is a rather long string containing\n\
several lines of text just as you would do in C.\n\
    Note that whitespace at the beginning of the line is\
 significant."

print hello
 }}}

__Note that newlines still need to be embedded in the string using `\n`; the newline following the trailing backslash is discarded.__ This example would print the following:

 {{{
This is a rather long string containing
several lines of text just as you would do in C.
    Note that whitespace at the beginning of the line is significant.
 }}}

__If we make the string literal a ''raw string'', however, the `\n` sequences are not converted to newlines, but the backslash at the end of the line, and the newline character in the source, are both included in the string as data. (由於下面還有 triple-quotes 的表示法, 因此 "r" 在實務上用在不想做跳脫時的單行字串就好...)__ Thus, the example:

 {{{
hello = r"This is a rather long string containing\n\
several lines of text much as you would do in C."

print hello
 }}}

would print:

 {{{
This is a rather long string containing\n\
several lines of text much as you would do in C.
 }}}

__Or, strings can be surrounded in a pair of matching ''triple-quotes'': `"""` or `'''`. End of lines do not need to be escaped (用 "\n" 來表示斷行而言) when using triple-quotes, but they will be included in the string. (這個表示法真是太完美了!!)__

 {{{
print """
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
"""
 }}}

produces the following output:

 {{{
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
 }}}

The interpreter prints the result of string operations in the same way as they are typed for input: inside quotes, and with quotes and other funny characters escaped by backslashes, to show the precise value. (所見即所得) __The string is enclosed in double quotes if the string contains a single quote and no double quotes, else it's enclosed in single quotes.__ (The `print` statement, described later, can be used to write strings without quotes or escapes.)

Strings can be concatenated (glued together) with the `+` operator, and repeated with `*`:

 {{{
>>> word = 'Help' + 'A'
>>> word
'HelpA'
>>> '<' + word*5 + '>'
'<HelpAHelpAHelpAHelpAHelpA>'
 }}}

[~~~]

== Teaching ==

 * 安裝 Python 與其他套件
   * Python http://www.python.org
   * PyGame http://www.pygame.org
   * PyOpenGL http://pyopengl.sourceforge.net
   * 跟 Python 的版本要一致
 * Python 可以寫出什麼遊戲?
   * http://www.pygame.org/project/932/ 魔術方塊
   * http://www.pyweek.org/ 程式挑戰賽
 * 有誰在用 Python?
   * http://wiki.python.org/moin/OrganizationsUsingPython
   * Google 大量將 Python 應用在網路爬蟲與搜尋引擎上
   * 其他還有 YouTube、Yahoo、NASA 等
 * 學習 Python 的好處
   * 容易上手, 適合做為入門程式設計的第一個語言
   * 許多應用程式都支援 Python 做為腳本控制的語言
     * http://www.openoffice.org/[OpenOffice]
     * http://www.blender.org/[Blender]
     * ...
   * 培養 "組合應用" 的能力, 而非重新造輪
 * 測試基本環境
   * 設定 PATH 環境變數
   * 如何開啟命令提示字元 (DOS)
   * 互動模式 (Interactive Mode)
     * 如何啟動互動模式
     * `>>>` Python 提示字元 (Prompt), 等待輸入指令 (Statement)
       {{{
>>> print "Hello, World!"
Hello, World!
>>> _
       }}}
     * 如何離開互動模式 - Ctrl-Z
   * 如何離開命令提示字元
   * 練習: 在命令提示字元下透過 Python 印出自己的名字, 然後離開命令提示字元
 * 數字 (Number)
   * 數字區分為整數 (Integer) 與小數 (Float)
   * 加減乘除分別由 `+`、`-`、`*`、`/` 來表示
   * 由左而右, 先乘除後加減
 * 四則運算
   {{{
>>> print 2 + 4 / 2
3
>>> 2 + 4 / 2 <-- 在 Interactive Mode 下不一定要加 print
3
>>> 2 + 4 / -2 <-- 負數也可以哦
0
   }}}
 * 練習題 / 九九乘法表
 * 

== Scratch ==

 * module 的概念全由 "相對於" Python's Search Path 的路徑階層來構成, 而 search path 可以透過直接對 `sys.path` 的操作或者是 `PYTHONPATH` 的宣告來達成. 事實上 `PYTHONPATH` 與 Java 的 `CLASSPATH` 很像, 只是 `.class` 內含 package 的資訊, 而 `.py` 並沒有. (例如 `/opt/reviewboard` 下有支 `settings.py` 的檔案, 如果想要存取得到 `reviewboard.settings`, 就必須將 `PYTHONPATH` 指向 `/opt` 而非 `/opt/reviewboard`)


