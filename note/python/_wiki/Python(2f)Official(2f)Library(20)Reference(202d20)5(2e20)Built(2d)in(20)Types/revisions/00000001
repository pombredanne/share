= Python / Official / Library Reference - 5. Built-in Types =
http://docs.python.org/library/stdtypes.html @2010/07/14
<<TableOfContents>>

:::

=== 5.6.1. String Methods ===

:::

'''`str.split([sep[, maxsplit]])`'''

__Return a list of the words in the string, using `sep` as the delimiter string. If `maxsplit` is given, at most `maxsplit` splits are done (thus, the list will have at most `maxsplit+1` elements). If `maxsplit` is not specified, then there is no limit on the number of splits (all possible splits are made).__

__If `sep` is given, ''consecutive delimiters'' are not grouped together and are deemed to delimit empty strings (for example, `'1,,2'.split(',')` returns `['1', '', '2'])`. The `sep` argument may consist of multiple characters (for example, `'1<>2<>3'.split('<>')` returns `['1', '2', '3']`). Splitting an empty string with a specified separator returns `['']`.__

__If `sep` is not specified or is `None`, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a `None` separator returns `[]`.__

For example, `' 1  2   3  '.split()` returns `['1', '2', '3']`, and `'  1  2   3  '.split(None, 1)` returns `['1', '2   3  ']`.

:::

=== 5.6.3. XRange Type ===

The `xrange` type is an ''immutable sequence'' which is commonly used for looping. __The advantage of the `xrange` type is that an `xrange` object will always take the same amount of memory, no matter the size of the range it represents. '''There are no consistent performance advantages.'''__

__XRange objects have very little behavior: they only support indexing, iteration, and the `len()` function.__

:::

== 5.9. File Objects ==

__File objects are implemented using C’s `stdio` package and can be created with the built-in `open()` function. File objects are also returned by some other built-in functions and methods, such as `os.popen()` and `os.fdopen()` and the `makefile()` method of socket objects. Temporary files can be created using the `tempfile` module, and high-level file operations such as copying, moving, and deleting files and directories can be achieved with the `shutil` module.__

__When a file operation fails for an I/O-related reason, the exception `IOError` is raised. This includes situations where the operation is not defined for some reason, like `seek()` on a tty device or writing a file opened for reading.__

Files have the following methods:

:::

'''`file.readline([size])`'''

__Read one entire line from the file. A trailing newline character is kept in the string (but may be absent when a file ends with an incomplete line). If the `size` argument is present and non-negative, it is a maximum byte count (including the trailing newline) and an incomplete line may be returned. An empty string is returned only when EOF is encountered immediately.__

__The advantage of leaving the newline on is that returning an empty string is then an unambiguous EOF indication. It is also possible (in cases where it might matter, for example, if you want to make an exact copy of a file while scanning its lines) to tell whether the last line of a file ended in a newline or not (yes this happens!).__

Note: Unlike `stdio`‘s `fgets()`, the returned string contains null characters (`'\0'`) if they occurred in the input.

'''`file.readlines([sizehint])`'''

__Read until EOF using `readline()` and return a list containing the lines thus read. If the optional `sizehint` argument is present, instead of reading up to EOF, whole lines totalling approximately `sizehint` bytes (possibly after rounding up to an internal buffer size) are read. Objects implementing a file-like interface may choose to ignore `sizehint` if it cannot be implemented, or cannot be implemented efficiently.__

'''`file.xreadlines()`'''

This method returns the same thing as `iter(f)`.

New in version 2.1.

Deprecated since version 2.3: Use `for line in file` instead.

:::

