

   re (version 2.2.1)                    index
                      /usr/lib/python2.6/re.py
                      Module Docs

   Support for regular expressions (RE).

   This module provides regular expression matching operations similar to
   those found in Perl.  It supports both 8-bit and Unicode strings; both
   the pattern and the strings being processed can contain null bytes and
   characters outside the US ASCII range.

   Regular expressions can contain both special and ordinary characters.
   Most ordinary characters, like "A", "a", or "0", are the simplest
   regular expressions; they simply match themselves.  You can
   concatenate ordinary characters, so last matches the string 'last'.

   The special characters are:
       "."      Matches any character except a newline.
       "^"      Matches the start of the string.
       "$"      Matches the end of the string or just before the newline a
   t
                the end of the string.
       "*"      Matches 0 or more (greedy) repetitions of the preceding RE
   .
                Greedy means that it will match as many repetitions as pos
   sible.
       "+"      Matches 1 or more (greedy) repetitions of the preceding RE
   .
       "?"      Matches 0 or 1 (greedy) of the preceding RE.
       *?,+?,?? Non-greedy versions of the previous three special characte
   rs.
       {m,n}    Matches from m to n repetitions of the preceding RE.
       {m,n}?   Non-greedy version of the above.
       "\\"     Either escapes special characters or signals a special seq
   uence.
       []       Indicates a set of characters.
                A "^" as the first character indicates a complementing set
   .
       "|"      A|B, creates an RE that will match either A or B.
       (...)    Matches the RE inside the parentheses.
                The contents can be retrieved or matched later in the stri
   ng.
       (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
       (?:...)  Non-grouping version of regular parentheses.
       (?P<name>...) The substring matched by the group is accessible by n
   ame.
       (?P=name)     Matches the text matched earlier by the group named n
   ame.
       (?#...)  A comment; ignored.
       (?=...)  Matches if ... matches next, but doesn't consume the strin
   g.
       (?!...)  Matches if ... doesn't match next.
       (?<=...) Matches if preceded by ... (must be fixed length).
       (?<!...) Matches if not preceded by ... (must be fixed length).
       (?(id/name)yes|no) Matches yes pattern if the group with id/name ma
   tched,
                          the (optional) no pattern otherwise.

   The special sequences consist of "\\" and a character from the list
   below.  If the ordinary character is not on the list, then the
   resulting RE will match the second character.
       \number  Matches the contents of the group of the same number.
       \A       Matches only at the start of the string.
       \Z       Matches only at the end of the string.
       \b       Matches the empty string, but only at the start or end of
   a word.
       \B       Matches the empty string, but not at the start or end of a
    word.
       \d       Matches any decimal digit; equivalent to the set [0-9].
       \D       Matches any non-digit character; equivalent to the set [^0
   -9].
       \s       Matches any whitespace character; equivalent to [ \t\n\r\f
   \v].
       \S       Matches any non-whitespace character; equiv. to [^ \t\n\r\
   f\v].
       \w       Matches any alphanumeric character; equivalent to [a-zA-Z0
   -9_].
                With LOCALE, it will match the set [0-9_] plus characters
   defined
                as letters for the current locale.
       \W       Matches the complement of \w.
       \\       Matches a literal backslash.

   This module exports the following functions:
       match    Match a regular expression pattern to the beginning of a s
   tring.
       search   Search a string for the presence of a pattern.
       sub      Substitute occurrences of a pattern found in a string.
       subn     Same as sub, but also return the number of substitutions m
   ade.
       split    Split a string by the occurrences of a pattern.
       findall  Find all occurrences of a pattern in a string.
       finditer Return an iterator yielding a match object for each match.
       compile  Compile a pattern into a RegexObject.
       purge    Clear the regular expression cache.
       escape   Backslash all non-alphanumerics in a string.

   Some of the functions in this module takes flags as optional parameters
   :
       I  IGNORECASE  Perform case-insensitive matching.
       L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale
   .
       M  MULTILINE   "^" matches the beginning of lines (after a newline)
                      as well as the string.
                      "$" matches the end of lines (before a newline) as w
   ell
                      as the end of the string.
       S  DOTALL      "." matches any character at all, including the newl
   ine.
       X  VERBOSE     Ignore whitespace and comments for nicer looking RE'
   s.
       U  UNICODE     Make \w, \W, \b, \B, dependent on the Unicode locale
   .

   This module also defines an exception 'error'.


   Modules

            copy_reg
                    sre_compile
                               sre_parse
                                        sys


   Classes


   exceptions.Exception(exceptions.BaseException)

        sre_constants.error



   class error(exceptions.Exception)


         Method resolution order:
                error
                exceptions.Exception
                exceptions.BaseException
                __builtin__.object
           __________________________________________________________________

         Data descriptors defined here:

         __weakref__
                list of weak references to the object (if defined)
           __________________________________________________________________

         Methods inherited from exceptions.Exception:

         __init__(...)
                x.__init__(...) initializes x; see x.__class__.__doc__ for signa
                ture
           __________________________________________________________________

         Data and other attributes inherited from exceptions.Exception:

         __new__ = <built-in method __new__ of type object at 0x8108c0>
                T.__new__(S, ...) -> a new object with type S, a subtype of T
           __________________________________________________________________

         Methods inherited from exceptions.BaseException:

         __delattr__(...)
                x.__delattr__('name') <==> del x.name

         __getattribute__(...)
                x.__getattribute__('name') <==> x.name

         __getitem__(...)
                x.__getitem__(y) <==> x[y]

         __getslice__(...)
                x.__getslice__(i, j) <==> x[i:j]

                Use of negative indices is not supported.

         __reduce__(...)

         __repr__(...)
                x.__repr__() <==> repr(x)

         __setattr__(...)
                x.__setattr__('name', value) <==> x.name = value

         __setstate__(...)

         __str__(...)
                x.__str__() <==> str(x)

         __unicode__(...)
           __________________________________________________________________

         Data descriptors inherited from exceptions.BaseException:

         __dict__

         args

         message


Functions


         compile(pattern, flags=0)
                Compile a regular expression pattern, returning a pattern object
                .

         escape(pattern)
                Escape all non-alphanumeric characters in pattern.

         findall(pattern, string, flags=0)
                Return a list of all non-overlapping matches in the string.

                If one or more groups are present in the pattern, return a
                list of groups; this will be a list of tuples if the pattern
                has more than one group.

                Empty matches are included in the result.

         finditer(pattern, string, flags=0)
                Return an iterator over all non-overlapping matches in the
                string.  For each match, the iterator returns a match object.

                Empty matches are included in the result.

         match(pattern, string, flags=0)
                Try to apply the pattern at the start of the string, returning
                a match object, or None if no match was found.

         purge()
                Clear the regular expression cache

         search(pattern, string, flags=0)
                Scan through string looking for a match to the pattern, returnin
                g
                a match object, or None if no match was found.

         split(pattern, string, maxsplit=0)
                Split the source string by the occurrences of the pattern,
                returning a list containing the resulting substrings.

         sub(pattern, repl, string, count=0)
                Return the string obtained by replacing the leftmost
                non-overlapping occurrences of the pattern in string by the
                replacement repl.  repl can be either a string or a callable;
                if a string, backslash escapes in it are processed.  If it is
                a callable, it's passed the match object and must return
                a replacement string to be used.

         subn(pattern, repl, string, count=0)
                Return a 2-tuple containing (new_string, number).
                new_string is the string obtained by replacing the leftmost
                non-overlapping occurrences of the pattern in the source
                string by the replacement repl.  number is the number of
                substitutions that were made. repl can be either a string or a
                callable; if a string, backslash escapes in it are processed.
                If it is a callable, it's passed the match object and must
                return a replacement string to be used.

         template(pattern, flags=0)
                Compile a template pattern, returning a pattern object


Data
         DOTALL = 16
         I = 2
         IGNORECASE = 2
         L = 4
         LOCALE = 4
         M = 8
         MULTILINE = 8
         S = 16
         U = 32
         UNICODE = 32
         VERBOSE = 64
         X = 64
         __all__ = ['match', 'search', 'sub', 'subn', 'split', 'findall',
         'compile', 'purge', 'template', 'escape', 'I', 'L', 'M', 'S', 'X', 'U',
         'IGNORECASE', 'LOCALE', 'MULTILINE', 'DOTALL', ...]
         __version__ = '2.2.1'
file://localhost/tmp/
file://localhost/usr/lib/python2.6/re.py
http://docs.python.org/library/re
file://localhost/tmp/re.html#error
file://localhost/tmp/copy_reg.html
file://localhost/tmp/sre_compile.html
file://localhost/tmp/sre_parse.html
file://localhost/tmp/sys.html
file://localhost/tmp/exceptions.html#Exception
file://localhost/tmp/exceptions.html#BaseException
file://localhost/tmp/sre_constants.html#error
file://localhost/tmp/exceptions.html#Exception
file://localhost/tmp/sre_constants.html#error
file://localhost/tmp/exceptions.html#Exception
file://localhost/tmp/exceptions.html#BaseException
file://localhost/tmp/__builtin__.html#object
file://localhost/tmp/exceptions.html#Exception
file://localhost/tmp/re.html#error-__init__
file://localhost/tmp/exceptions.html#Exception
file://localhost/tmp/re.html#error-__new__
file://localhost/tmp/exceptions.html#BaseException
file://localhost/tmp/re.html#error-__delattr__
file://localhost/tmp/re.html#error-__getattribute__
file://localhost/tmp/re.html#error-__getitem__
file://localhost/tmp/re.html#error-__getslice__
file://localhost/tmp/re.html#error-__repr__
file://localhost/tmp/re.html#error-__setattr__
file://localhost/tmp/re.html#error-__str__
file://localhost/tmp/exceptions.html#BaseException
