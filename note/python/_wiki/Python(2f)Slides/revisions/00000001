<<TableOfContents>>

<<Action(SlideShow, 開始播放投影片)>>

= 用 Python 寫游戲 =

http://www.simplbug.com/wiki/amanner

= 安裝 Python 與其他套件 =

 * Python http://www.python.org
 * !PyGame http://www.pygame.org <<FootNote(跟 Python 的版本要一致)>>
 * PyOpenGL http://pyopengl.sourceforge.net
----
<<FootNote>>

= Python 可以寫出什麼遊戲? =

 * http://www.pygame.org/project/932/ 魔術方塊
 * http://www.pyweek.org/ 程式挑戰賽

= 有誰在用 Python? =

 * http://wiki.python.org/moin/OrganizationsUsingPython
 * Google
   * 大量將 Python 應用在網路爬蟲與搜尋引擎上
   * http://code.google.com/appengine/[Google Apple Engine] 平台採用的正是 Python 語言
 * 其他還有 !YouTube、Yahoo、NASA 等

= 為什麼是 Python? =

 * 容易上手, 適合做為入門程式設計的第一個語言
   * 完成同樣的功能, Python 的程式碼通常比其他語言來得簡短
   * 培養 "組合應用" 的能力, 而非重新造輪; 使能專心解決問題, 而不是把時間花在處理技術細節上
 * 整合能力與生產力, 是 Python 最為人津津樂道的
 * 許多應用程式都支援 Python 做為腳本控制的語言, 例如 http://www.openoffice.org/[OpenOffice]、http://www.blender.org/[Blender] 等

= 測試基本環境 =

 * 設定 `PATH` 環境變數
 * 如何開啟命令提示字元 (DOS)
 * 互動模式 (Interactive Mode)<<FootNote(互動模式是一個絕佳的測試環境, 即便你對 Python 已經駕輕就熟, 還是很常有機會到互動模式裡做一些零星的測試)>>
   * 如何啟動互動模式
   * 如何離開互動模式 - `Ctrl-Z`<<FootNote(在 Linux 下要用 `Ctrl-D`)>>
 * 如何離開命令提示字元

----
<<FootNote>>

= Hello World =

`>>>` 是 Python 提示字元 (Prompt), 表示它正等待您輸入新的陳述式 (Statement)

{{{
>>> print "Hello, World!" <-- 按 Enter
Hello, World!
>>> print 'Hello, World!' <-- 可以用上下鍵叫出舊陳述式做修改
Hello, World!
>>> print `Hello, World!` <-- 別跟鍵盤左上方的 "`" 重音符號搞混了
  File "<stdin>", line 1
    print `Hello, World!`
                       ^
SyntaxError: invalid syntax
>>> _ <-- 繼續等待下一個陳述式
}}}

= 你在跟誰說話? =

{{{
C:\> python <-- 跟 DOS 交談, 提示字元是 C:\>
Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> "Hello, World!" <-- 跟 Python 交談, 提示字元是 >>>
'Hello, World!'
>>> 按 Ctrl-Z 離開
C:\> "Hello, World!" <-- DOS 聽不懂 Python 的話
'"Hello, World!"' is not recognized as an internal or external command,
operable program or batch file.
}}}

= 大小寫有別 =

{{{
>>> "Hello, World!" <-- 在 Interactive Mode 下不一定要加 print
'Hello, World!'
>>> print "HELLO, WORLD!"
'HELLO, WORLD!'
>>> PRINT "Hello, World!" <-- 陳述式區分大小寫
  File "<stdin>", line 1
    PRINT "Hello, World!"
                        ^
SyntaxError: invalid syntax
>>> _
}}}

= 練習 =

在命令提示字元下透過 Python 印出自己的中文名字, 然後離開命令提示字元

= 數值 (Numbers) =

 * 數值區分為整數 (Whole Number) 與小數 (Float)<<FootNote(在電腦上, 我們通常稱帶有小數點 (Decimal Point) 的數字為浮點數 (Float))>>
 * 加減乘除分別由 `+`、`-`、`*`、`/` 來表示
   * 尤其注意乘與除的表示法與手寫的不同, 別拿字母的 `x` 或 `X` 來充當乘法
   * 除法的 `/` 也別跟 `\` 搞混了<<FootNote(一般我們稱 `/` 為斜線 (Slash), 稱 `\` 為反斜線 (Backslash))>>
 * 由左而右, 先乘除後加減
 * 可以用括號 `(...)` 來指定運算順序

----
<<FootNote>>

= 四則運算 =

{{{
>>> print 2+4/2 <-- 擠在一起, 不容易閱讀
4
>>> 2 + 4 / -2 <-- 負數也可以哦
4
>>> (2 + 4) / 2
3
>>> 1 / 0 <-- 你覺得答案是多少?
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero <-- 這裡暗示 integer 的內部型態
}}}

= 無條件捨去 =

整數運算的結果會直接將小數的部份 (fractional part) 捨去, 不會做四捨五入

{{{
>>> 5 / 2
2
}}}

= 浮點運算 =

在整數後面加上 `.` (小數點) 就可以變成浮點運算

{{{
>>> 5. / 2
2.5
>>> 5 / 2. <-- 在誰後面加上小數點都可以
2.5
}}}

= 運算式 (Expressions) =

下面每一行陳述式都由一個運算式組成:

{{{
    +----+------------- 運算元
    v    v
>>> 7. / 2
3.5    ^
       +--------------- 二元運算子

     +----------------- 運算元
     v
>>> -2
-2  ^
    +------------------ 一元運算子
}}}

= 運算式 + 運算式 = ? =

一個運算式由運算子 (Operand) 與運算元 (Operator) 組成:

 * 運算子: 要做什麼?
 * 運算元: 對誰做?

運算式的特色是它運算後會有一個 "結果", 而這個結果又可以再成為另一個運算式的運算元...

{{{
>>> (2 + 4) / 2
3
}}}

其中 `(2 + 4)` 是一個運算式, 它的運算結果繼續加入另一個運算式 `? / 2`, 結果就變成 `6 / 2`

= 加與不加 print, 真的有差!! =

{{{
>>> 1 / 3
0
>>> 1 / 3.
0.33333333333333331 <-- as-code repr (內部表示)
>>> print 1 / 3.
0.333333333333      <-- user-friendly str (給人看的)
}}}

= 取餘數 =

`%` 可以用來取得餘數

{{{
>>> 9 % 5
4
>>> 9 % 5.
4.0
>>> 9.5 % 5
4.5
}}}

= 超級計算機 =

`**` 可以用來做指數運算<<FootNote(沒有比 Python 更強的計算機了吧!!)>>

{{{
>>> 2. ** 10
1024.0
>>> 2 ** 100
1267650600228229401496703205376L <-- 這裡多了個 L, 表示結果是一個長整數 (Long)
>>> 2 ** 10000 <-- 天文數字!! 你能證明 Python 沒有算錯嗎? ^_^
}}}

----
<<FootNote>>

= 簡單的數學題 =

40 公尺的道路, 在兩側每隔 10 公尺設一支路燈 (兩端都要), 請問總共要立幾支路燈?

{{{
>>> (40 / 10 + 1) * 2
10
}}}

假設用 `x` 來表示道路的長度, `y` 來表示每隔幾公尺要設一支路燈, 我們會得下面的公式:

{{{
(x / y + 1) * 2
}}}

= 套用公式再算一遍 =

{{{
>>> x = 40
>>> y = 10
>>> (x / y + 1) * 2
10
>>> y = 5 <-- 如果改成每 5 公尺要設一支路燈呢?
>>> (x / y + 1) * 2
18
}}}

= 變數 (Variables) =

{{{
>>> x = 40 <-- 將右邊的值指定 (assign) 給左邊
>>> y = 10
>>> (x / y + 1) * 2
10
}}}

 * 上面的 `x` 跟 `y` 就是變數
 * 變數不用事先建立或宣告 (Declaration), 它單純就是把記憶體的某個位置貼上標籤 (變數名稱) 而已

= 練習 =

迴轉壽司依盤子的顏色計價 (綠色 40、紅色 60、黑色 80、金色 120), 並加收 10% 的服務費. 請先寫出公式, 再依公式計算下面這幾組客人分別要付多少錢?

 * 綠色 x 2 + 黑色 x 3 + 紅色 x 1 + 金色 x 2
 * 黑色 x 3 + 紅色 x 2 + 金色 x 3
 * 黑色 x 1 + 金色 x 5

= 給變數起個名 =

 * 最好給變數名稱取個有意義的名字
   * 變數一多, 很容易搞錯對象
   * 時間一久, 連自己都看不懂
 * 變數名稱可以由大小寫字母、數字、底線組成, 但開頭不能是數字
   * 合法的名稱: `my_name`, `myname`, `MyName`, `myName`, `v2210`
   * 不合法的名稱: `my name`, `2210v`
 * 變數跟陳述式一樣大小寫有別, 因此 `name` 與 `Name` 會被視為兩個不同的變數
 * 不要為了少打一些字用縮寫, 除非這個縮寫的用法廣為人知

= 練習 =

把上面迴轉壽司的計算公式, 重新依新的變數名稱調整過

= 字串 (String) =

顧名思義就是將一或多個字元 (Character) 串接起來的結果<<FootNote(事實上有一種字串叫 "空字串", 它裡面一個字也沒有!! 跟空白不同)>>. 字串可以用單引號 (`'`) 或雙引號 (`"`) 框起來, 但必須要成對

{{{
>>> "Hello"
'Hello' <-- Python 內部預設以單引號來表示字串
>>> 'Hello'
'Hello'
>>> "Hello'
  File "<stdin>", line 1
    print "Hello!'
                 ^
SyntaxError: EOL while scanning single-quoted string
}}}

----
<<FootNote>>

= 單引號還是雙引號? =

這兩種用法基本上沒什麼差別, 只要 Python 可以認出字串從哪裡開始, 到哪裡結束就好

{{{
>>> hello = "我是 "海綿寶""
  File "<stdin>", line 1
    hello = "我是 "海綿寶""
                    ^
SyntaxError: invalid syntax
>>> hello = '我是 "海綿寶"' <-- 替換引號
>>> hello = "我是 '海綿寶'"
}}}

'''想想看'''

如何將 "`我是 "海綿寶", 他是 '派大'`" 這個字串指定給 `hello` 變數?

= 這該怎麼辦? =

可以用 `\` 明確地告訴 Python, 下一個引號不是字串的結尾:<<FootNote(如果數量一多, 會讓字串內容變得難以閱讀)>>

{{{
>>> hello = "我是 \"海綿寶\", 他是 '派大'"
>>> hello = '我是 "海綿寶", 他是 \'派大\''
}}}

'''想想看'''

如何將 "`我是 "海綿寶" \ 他是 '派大'`" 這個字串指定給 `hello` 變數?

----
<<FootNote>>

= 原來還有這一招!! =

Python 還支援了第 3 種表示字串的方式 - 用 3 個單引號或雙引號框起來<<FootNote(表示操作說明之類多行的文字時尤其方便, 因為很少有機會出現連續 3 個單引號或雙引號的用法)>>

{{{
>>> hello = """我是 "海綿寶", 他是 '派大'"""
>>> hello = '''我是 "海綿寶", 他是 '派大''''
}}}

'''想想看'''

如何將 "`字串也可以用 3 個連續的單引號 (''') 或雙引號 (""") 框起來`" 這個字串指定給 `usage` 變數?

----
<<FootNote>>

= Python 會說火星文? =

{{{
>>> hello = """我是 "海綿寶", 他是 '派大'"""
>>> hello
'\xe6\x88\x91\xe6\x98\xaf "\xe6\xb5\xb7\xe7\xb6\xbf\xe5\xaf\xb6", \xe4\xbb\x96\xe6\x98\xaf \'\xe6\xb4\xbe\xe5\xa4\xa7\''
}}}

回想一下 `1 / 3.` 與 `print 1 / 3.` 輸出上的差異:

{{{
>>> hello
'\xe6\x88\x91\xe6\x98\xaf "\xe6\xb5\xb7\xe7\xb6\xbf\xe5\xaf\xb6", \xe4\xbb\x96\xe6\x98\xaf \'\xe6\xb4\xbe\xe5\xa4\xa7\''
>>> print hello
我是 "海綿寶", 他是 '派大' <-- 有沒有發現, 兩側的單引號也不見了? user-friendly!!
}}}

= 把字串接起來 (Concatenation) =

字串與字串也可以用 `+` 再串接起來, 變成更長的字串

{{{
>>> print '我是 "海綿寶", ' + "他是 '派大'"
我是 "海綿寶", 他是 '派大'
}}}

= 練習 =

假設 `me = "海綿寶"`、`him = "派大"`, 如何用 `+` 串接出 "`我是 "海綿寶", 他是 '派大'`" 的結果?

= 沒聽過字串也可以乘... =

把字串拿來與數字相乘, 會讓字串重複 n 次

{{{
>>> print "他打了一個" + "好大" * 3 + "的哈欠" <-- 先乘除後加減, 酷吧!!
'他打了一個好大好大好大的哈欠'
}}}

但字串不支援 "減" 或 "除" 的動作<<FootNote(你覺得 `"海綿寶" - "派大"` 或 `"海綿寶" / "派大"` 的結果是什麼? :))>>

----
<<FootNote>>

= 但字串還是字串 =

字串不能跟數字相加, 數字也不能跟字串相加

{{{
>>> "好大" * "3"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> 1 + "2"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> "(2 + 4) / 2" <-- 一串文字, 不能計算
'(2 + 4) / 2'
}}}

= 轉個彎不就行了? =

可以用 `str()` 這個函數 (Function)<<FootNote(函數通常提供特定的功能, 只要把參數 (Arguments) 丟進去, 內部加工之後就會有結果 (Return) 傳回來)>><<FootNote(這種可以直接叫用的函數, 我們稱之為 "" (Built-in Fuctions))>> 將數字轉成字串

{{{
>>> str(1) + "2"
'12'
}}}

也可以用 `int()` 將字串轉成數字

{{{
>>> print "好大" * int("3") <-- 還記得為什麼要加 print 嗎?
好大好大好大
>>> 1 + int("2")
3
>>> int("1 + 2") <-- 這樣是不行的啦!!
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '1 + 2'
}}}

----
<<FootNote>>

= 資料型態 =

雖然變數在使用前不用額外宣告它的型態 (Type)<<FootNote(嚴格上應該稱作 Object Type; 這種可以直接使用的資料型態, 我們稱之為 "內建型態" (Built-in Types))>>, 但事實上 Python 內部的變數是有型態之分的

可以用 `type()` 這個函數來查看變數背後真正的型態:

{{{
>>> a = 1 
>>> type(a)
<type 'int'>
>>> a = 2 ** 100
>>> type (a)
<type 'long'>
>>> a = 1.0
>>> type(a)
<type 'float'>
>>> a = '1.0'
>>> type(a)
<type 'str'>
>>> a = '海綿寶'
>>> type(a)
<type 'str'>
>>> a = u'海綿寶'
>>> type(a)
<type 'unicode'>
}}}

----
<<FootNote>>

= 字串的組成 =

字串是由零或多個字元串起來的結果, 我們可以給每一個位置編上號碼 - 從左邊起算, 由零開始編號

{{{
  0   1   2   3
| C | A | K | E | <-- 以 "CAKE" 的字串為例
}}}

這個編號就是字串裡每一個字元的位置索引值 (Index), 有了這個號碼我們就可以透過 `[索引]` 的語法取出特定位置上的字元

{{{
>>> cake = "CAKE";
>>> cake[0]
'C'
>>> cake[3]
'E'
>>> cake[4] <-- 超出索引值
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
}}}

= 從右邊數回來 =

當索引值為負值時, 表示位置是從右邊起算:<<FootNote(`-0` 視同 `0`, 因此也是左邊起算)>>

{{{
  -4  -3  -2  -1
| C | A | K | E |
}}}

我們同樣也可以用這個索引值, 來取得特定位置上的字元

{{{
>>> cake = "CAKE"
>>> cake[-1]
'E'
>>> cake[-4]
'C'
>>> cake[-5]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
}}}

----
<<FootNote>>

= 如果沒有負的索引? =

[TODO] 用 `len()` 改寫

= 取出一小段 =

可以用 `[開始索引:結束索引]` 的語法 (slice notation) 來取出字串的某一段

{{{
>>> cake = "CAKE"
>>> cake[0:1]
'C' <-- 怪怪的?
}}}

事實上, 索引值是字元相對於字串開頭位置的偏移量 (Offset)

{{{
 0   1   2   3   4
 | C | A | K | E |
-4  -3  -2  -1
}}}

透過上圖就不難理解, 為什麼 `cake[0:1]` 只傳回 "`C`" 而不是 "`CA`"

= 切蛋糕 =

{{{
 0   1   2   3   4
 | C | A | K | E |
-4  -3  -2  -1
}}}

你可以把 `[開始索引:結束索引]` 的語法, 想成是分別從開始與結束索引處切兩刀下去:

{{{
>>> cake[0:2]
'CA'
>>> cake[2:0] <-- 第一刀要下在左邊才行
'' <-- 傳說中的空字串!!
>>> cake[-4:4]  <-- 正負索引值可以混用
'CAKE'
>>> cake[2:2] <-- 你覺得能切下什麼?
''
>>> cake[-6:6]  <-- 完全沒沾到邊, 整塊拿走!!
'CAKE'
}}}

= 語法上的甜頭 =

{{{
 0   1   2   3   4
 | C | A | K | E |
-4  -3  -2  -1
}}}

事實上開始與結束索引值都可以省略, 視同 "字串開頭" 與 "字串結尾" 的位置:

{{{
>>> cake[2:]
'KE'
>>> cake[-2:] <-- 注意不是往左邊切下 "CA" 哦!!
'KE'
>>> cake[:3]
'CAK'
>>> cake[:-1]
'CAK'
}}}

'''想想看'''

你覺得 `cake[:]` 的結果會是什麼?

= 練習 =

 * 假設 `msg = u"我他是是海綿寶派大"`, 試著用 `[索引]` 跟 `[開始索引:結束]` 寫出最簡短的運算式, 分別取出 "`我是海綿寶`" 與 "`他是派大`".
 * 把 "`寶綿海是我`" 倒過來寫

= 我不喜歡吃奶油!! =

{{{
 0   1   2   3   4   5   6   7   8   9
 | ~ | C | ~ | A | ~ | K | ~ | E | ~ |
-9  -8  -7  -6  -5  -4  -3  -2  -1
}}}

要怎麼從字串 "`~C~A~K~E~`" 中去掉 "`~`" (奶油 :-? ) 呢?

{{{
>>> cake = "~C~A~K~E~"
>>> cake[1:8:2]
'CAKE'
>>> cake[1:8:-2]
''
>>> cake[7:1:-2]
'EKA'
>>> cake[7:0:-2]
'EKAC'
}}}

= 發生了什麼事? =

上面的 slice notation (`[開始索引:結束索引:間隔]`) 多了第 3 個參數 - 間隔值 (Step Value). 其運作原理為:

[TODO] 學完 `do...while` 再做說明, 比較容易理解...

{{{
>>> cake = "~C~A~K~E~"
>>> cake[::] <-- step value 的預設值是 1
'~C~A~K~E~'
>>>
}}}

= 這算是密技嗎? =

{{{
>>> hello = "CAKE"
>>> hello[::-1]
'EKAC'
>>> hello[::-1][::-1]
'CAKE'
}}}

你知道發生什麼事嗎? B-)

= 腳本程式 (Scripts) =

 * 把多個陳述式集合起來儲存在一個檔案裡, 方便重複執行 (Execute)
 * 副檔名為 `.py`
 * 可以用任何純文字編輯器 (Text Editor) 撰寫

= 最簡單的 Script =

 1. 開啟您最熟悉的純文字編輯器 (例如記事本)

 2. 輸入下面的內容, 並存成 `hello.py`<<FootNote(前面要加上 `coding` 的宣告, 否則執行期會出現錯誤: File "hello.py", line 1 !SyntaxError: Non-ASCII character '\xae' in file hello.py on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details)>>

{{{
# -*- coding: big5 -*-   <-- 如果程式碼裡面有中文, 這一行就不能省

my_name = "海綿寶"
greeting = "Hello World!! I am " + my_name
print greeting           <-- 還記得, print 只有在 Interactive Mode 下才能省略嗎?
}}}

----
<<FootNote>>

= 如何執行 Python Scripts =

 * 透過命令列執行
 * 點兩下 (double click) `.py` 檔的圖示

= 透過命令列執行 =

假設 `hello.py` 儲存在 `C:\tmp` 底下, 透過下面的陳述式執行:

{{{
C:\tmp> python hello.py
Hello World!! I am 海綿寶
}}}

= 練習 =

迴轉壽司依盤子的顏色計價 (綠色 40、紅色 60、黑色 80、金色 120), 並加收 10% 的服務費. 請先寫出公式, 再依公式計算下面這幾組客人分別要付多少錢?

 * 綠色 x 2 + 黑色 x 3 + 紅色 x 1 + 金色 x 2
 * 黑色 x 3 + 紅色 x 2 + 金色 x 3
 * 黑色 x 1 + 金色 x 5

請將上面的計算寫成一支腳本程式, 並輸出下面的結果:

{{{
綠色 x 2 + 黑色 x 3 + 紅色 x 1 + 金色 x 2 = 682.0
黑色 x 3 + 紅色 x 2 + 金色 x 3 = 792.0
黑色 x 1 + 金色 x 5 = 748.0
}}}

= 參考解答 =

`sushi.py`:

{{{
# -*- coding: big5 -*-

green = 2
red = 1
black = 3
gold = 2
total = (40 * green + 60 * red + 80 * black + 120 * gold) * 1.1
print "綠色 x 2 + 黑色 x 3 + 紅色 x 1 + 金色 x 2 = " + str(total)

green = 0
red = 2
black = 3
gold = 3
total = (40 * green + 60 * red + 80 * black + 120 * gold) * 1.1
print "黑色 x 3 + 紅色 x 2 + 金色 x 3 = " + str(total)

green = 0
red = 0
black = 1
gold = 5
total = (40 * green + 60 * red + 80 * black + 120 * gold) * 1.1
print "黑色 x 1 + 金色 x 5 = " + str(total)
}}}

= 點兩下執行, 再簡單不過? =

 1. 開啟檔案總管, 並瀏覽 `sushi.py` 所在的資料夾
 
 2. 點兩下 `sushi.py` 的點示, 你看到了什麼?

= Python 快閃!! =

問題在於程式執行完畢後, 就會直接把視窗關掉...

我們需要在程式最後面加上 `raw_input()` 這個函數的呼叫:<<FootNote(這個函數主要是讓使用者輸入文字, 並用 Enter 鍵做確認)>>

{{{
...
print "黑色 x 1 + 金色 x 5 = " + str(total)

raw_input("請按 Enter 鍵繼續...")
}}}

----
<<FootNote>>

= 如何查閱參考手冊 =

Python 官方參考文件都可以在 http://www.python.org/doc/ 找到

 * The Python Standard Library > http://docs.python.org/library/functions.html[Built-in Functions] - 內建函數的說明可以在這裡找到
 * The Python Standard Library > http://docs.python.org/library/stdtypes.html[Built-in Types] - 內建型態的說明可以在這裡找到
 * http://docs.python.org/reference/[The Python Language Reference] - 內建陳述式的說明可以在這裡找到

例如 http://docs.python.org/library/functions.html#str[str()|target=_blank] 的說明如下:

''Return a string containing a nicely printable representation of an object. For strings, this returns the string itself. The difference with `repr(object)` is that `str(object)` does not always attempt to return a string that is acceptable to `eval()`; its goal is to return a printable string. If no argument is given, returns the empty string, `''`...''

= 練習 =

找出 `raw_input()` 的說明

= 由使用者來決定變數的值 =

`raw_input()` 的參考手冊這樣寫著:

''If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that.''

{{{
>>> my_name = raw_input("請輸入您的大名: ")
請輸入您的大名: 派大
>>> print "您好, " + my_name
您好, 派大
}}}

= 練習 =

將 `sushi2.py` 改寫為 `sushi3.py` , 讓它可以由使用者來分別輸入不同顏色盤子的數量, 然後算出總價. 執行結果如下:

{{{
請您依序回答不同顏色盤子的數量 (沒有請輸入 "0"), 輸入完畢請按 Enter 繼續

綠色? 0
紅色? 4
黑色? 1
金色? 2

您的消費總額為 260 元, 再加收 10% 的服務費, 所以總共要收您 286 元.
}}}

= 參考解答 =

`sushi2.py`:

{{{
# -*- coding: big5 -*-

print '請您依序回答不同顏色盤子的數量 (沒有請輸入 "0"), 輸入完畢請按 Enter 繼續'
print

green = int(raw_input("綠色? "))
red = int(raw_input("紅色? "))
black = int(raw_input("黑色? "))
gold = int(raw_input("金色? "))
subtotal = 40 * green + 60 * red + 80 * black + 120 * gold
total = int(subtotal * 1.1) # 去掉小數

print
print "您的消費總額為 " + str(subtotal) + " 元, 再加收 10% 的服務費, 所以總共要收您 " + str(total) + " 元."
}}}

= 註解 (Comments) =

從 `#` 開始到該行的結尾, 都會被視為註解

{{{
# 這裡是註解
total = int(subtotal * 1.1) # 這裡也是註解
}}}

註解是給人看的, 它並不會被執行. 因此它可以用來註解掉暫時不想要執行的程式片段

{{{
...
#total = subtotal * 1.1
total = int(subtotal * 1.1) <-- 試看看把小數點去掉的效果
}}}

= 註解要怎麼寫 =

 * 如果變數名稱取得有意義, 程式結構清楚, 那麼程式 "在做什麼" 自然就很清楚, 不需要額外做說明
 * 但看您程式的人可能不清楚你 "為什麼要這樣做", 這就是註解要寫的東西
 * 註解有時也會拿來做為一個程式區段的說明

= 陳述式 (Statements) =

 * 簡單陳述式 (Simple Statements)
 * 複合式陳述式 (Compound Statements)
 * 縮排 (Identitation)

= 自訂函數 =

除了內建函數以外, 我們也可以用 `def` 來自訂函數, 將常用的功能 (多個陳述式) 包裝起來, 方便重複使用

{{{
>>> def say_hello(name):
...    return "Hello, " + name
...
>>> say_hello()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: say_hello() takes exactly 1 argument (0 given)
>>> say_hello("海綿寶")
'Hello, \xe6\xb5\xb7\xe7\xb6\xbf\xe5\xaf\xb6'
print say_hello("海綿寶")
Hello, 海綿寶
}}}

= 參數 (Parameters) 與引數 (Arguments) =

 * 呼叫端的引數
 * 被呼叫端的參數

= 練習 =

`sushi.py` 存在一個很大的問題, 就是 `total = (40 * green + 60 * red + 80 * black + 120 * gold) * 1.1` 一再地重複, 請將它改寫成一個可重複呼叫的函數.

= 猜字游戲 =

`guess.py`

{{{
# -*- coding: big5 -*-
import random

words = ["fruit", "cake", "cookie", "water", "food", "milk"]
word = words[random.randint(0, 5)]
lost = random.randint(0, 5)

# 單字可能不夠長, 超過範圍就取最後一個字母
if lost >= len(word):
    lost = len(word) - 1

lost_letter = word[lost]
question = word[0:lost] + '_' + word[lost+1:]

while True:
    answer = raw_input("請問 '%s' 這個單字少了哪個字母? (大小寫皆可) " % question)
    if len(answer) == 1 and answer.isalpha():
        if answer.lower() == lost_letter:
            print "答對了!!"
            break;
        else:
            print "再試一次"
            continue;
    else:
        print "你輸入的不是一個字母!!"
        continue;
}}}

= 練習 =

寫一支程式, 每次執行都會不規率地輸出 "letter", "keyboard", "mouse", "disk", "monitor" 的其中一個單字.

= 練習 =

寫一支程式 `guess2.py`, 固定輸出 "guess" 這個單字, 但每次都將不同的字母藏起來 (代換成 "`_`")

{{{
C:\> python guess2.py
gues_
C:\> python guess2.py
gu_ss
}}}

= 參考解答 =

{{{
import random

word = "keyboard"
hide = random.randint(0, len(word) - 1)
print word[:hide] + '_' + word[hide + 1:]
}}}

= 模組 (Module) =

 * 一個模組將相關的功能包裝起來
 * 如何查詢 standard library 下特定模組的文件

= 物件 (Object) =

 * 方法 (Methods) - 依附在特定一個物件的函數
 * 屬性 (Attributes)

= 物件的樣板 - 類別 (Class) =

= 佈林值 (Boolean) 運算式 =

 * `True`
 * `False`

= 練習 =

將 `guess.py` 改寫成答錯 3 次時會換題目, 答對之後還會換另外一題...

= boolean expression =

= 再導入 List 與 Tuple =

= For =

= 格式化輸出 =

= 九九乘法表 =

= import =

= 引入 random =

= 控制 NXT 機器人 =

= 安裝 Eclipse Pydev =

= 正式進入 PyGame =


