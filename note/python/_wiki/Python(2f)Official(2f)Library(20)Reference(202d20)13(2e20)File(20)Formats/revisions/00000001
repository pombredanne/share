= Python / Official / Library Reference - 13. File Formats =
http://docs.python.org/library/fileformats.html
<<TableOfContents>>

== 13.2. ConfigParser — Configuration file parser ==
http://docs.python.org/library/configparser.html @2010/12/16

Note: __The `ConfigParser` module has been renamed to `configparser` in Python 3.0.__ The `2to3` tool will automatically adapt imports when converting your sources to 3.0.

This module defines the class `ConfigParser`. __The `ConfigParser` class implements a basic configuration file parser language which provides a structure ''similar'' to what you would find on Microsoft Windows INI files. You can use this to write Python programs which can be customized by end users easily.__

Note: This library does not interpret or write the value-type prefixes used in the Windows Registry extended version of INI syntax.

__The configuration file consists of ''sections'', led by a `[section]` header and followed by `name: value` entries, with continuations in the style of http://tools.ietf.org/html/rfc822.html[RFC 822] (see section 3.1.1, “LONG HEADER FIELDS”); `name=value` is also accepted. Note that ''leading'' whitespace is removed from values. The ''optional'' values can contain ''format strings'' which refer to other values in the ''same section'', or values in a special `DEFAULT` section. Additional defaults can be provided on initialization and retrieval. Lines beginning with `'#'` or `';'` are ignored and may be used to provide comments.__

__Configuration files may include comments, prefixed by specific characters (`#` and `;`). Comments may appear on their own in an otherwise empty line, or may be entered in lines holding values or section names. In the latter case, they need to be preceded by a whitespace character to be recognized as a comment. '''(For backwards compatibility, only `;` starts an inline comment, while `#` does not.)'''__

__On top of the core functionality, `SafeConfigParser` supports ''interpolation''. This means values can contain format strings which refer to other values in the same section, or values in a special `DEFAULT` section. Additional defaults can be provided on initialization.__

For example:

 {{{
[My Section]
foodir: %(dir)s/whatever
dir=frob
long: this value continues
   in the next line
 }}}

would resolve the `%(dir)s` to the value of `dir` (`frob` in this case). __All ''reference expansions'' are done ''on demand''.__

__Default values can be specified by passing them into the `ConfigParser` constructor as a dictionary. Additional defaults may be passed into the `get()` method which will override all others.__

__Sections are normally stored in a ''built-in dictionary''. An alternative dictionary type can be passed to the `ConfigParser` constructor. For example, if a dictionary type is passed that sorts its keys, the sections will be sorted on write-back, as will be the keys within each section.__

'''`class ConfigParser.RawConfigParser([defaults[, dict_type[, allow_no_value]]])`'''

__The basic configuration object. When `defaults` is given, it is initialized into the dictionary of ''intrinsic defaults''. When `dict_type` is given, it will be used to create the dictionary objects for the list of sections, for the options within a section, and for the default values. When `allow_no_value` is true (default: `False`), options without values are accepted; the value presented for these is `None`.__

__This class does not support the magical interpolation behavior.__

New in version 2.3.

Changed in version 2.6: `dict_type` was added.

Changed in version 2.7: The default `dict_type` is `collections.OrderedDict`. `allow_no_value` was added.

'''`class ConfigParser.ConfigParser([defaults[, dict_type[, allow_no_value]]])`'''

__Derived class of `RawConfigParser` that implements the magical interpolation feature and adds optional arguments to the `get()` and `items()` methods. The values in `defaults` must be appropriate for the `%()s` string interpolation. Note that `__name__` is an intrinsic default; its value is the section name, and will override any value provided in `defaults`.__

__All option names used in interpolation will be passed through the `optionxform()` method just like any other option name reference. For example, using the default implementation of `optionxform()` (which converts option names to lower case), the values `foo %(bar)s` and `foo %(BAR)s` are equivalent.[?]__

New in version 2.3.

Changed in version 2.6: `dict_type` was added.

Changed in version 2.7: The default `dict_type` is `collections.OrderedDict`. `allow_no_value` was added.

'''`class ConfigParser.SafeConfigParser([defaults[, dict_type[, allow_no_value]]])`'''

__Derived class of `ConfigParser` that implements a ''more-sane'' variant of the magical interpolation feature. This implementation is more ''predictable'' as well. New applications should prefer this version if they don’t need to be compatible with older versions of Python.__

New in version 2.3.

Changed in version 2.6: `dict_type` was added.

Changed in version 2.7: The default `dict_type` is `collections.OrderedDict`. `allow_no_value` was added.

'''`exception ConfigParser.Error`'''

Base class for all other configparser exceptions.

'''`exception ConfigParser.NoSectionError`'''

Exception raised when a specified section is not found.

'''`exception ConfigParser.DuplicateSectionError`'''

Exception raised if `add_section()` is called with the name of a section that is already present.

'''`exception ConfigParser.NoOptionError`'''

Exception raised when a specified option is not found in the specified section.

'''`exception ConfigParser.InterpolationError`'''

Base class for exceptions raised when problems occur performing string interpolation.

'''`exception ConfigParser.InterpolationDepthError`'''

Exception raised when string interpolation cannot be completed because the number of iterations exceeds `MAX_INTERPOLATION_DEPTH`. Subclass of `InterpolationError`.

'''`exception ConfigParser.InterpolationMissingOptionError`'''

Exception raised when an option referenced from a value does not exist. Subclass of `InterpolationError`.

New in version 2.3.

'''`exception ConfigParser.InterpolationSyntaxError`'''

Exception raised when the source text into which substitutions are made does not conform to the required syntax. Subclass of `InterpolationError`.

New in version 2.3.

'''`exception ConfigParser.MissingSectionHeaderError`'''

Exception raised when attempting to parse a file which has no section headers.

'''`exception ConfigParser.ParsingError`'''

Exception raised when errors occur attempting to parse a file.

'''`ConfigParser.MAX_INTERPOLATION_DEPTH`'''

__The maximum depth for ''recursive interpolation'' for `get()` when the `raw` parameter is false. This is relevant only for the `ConfigParser` class.__

See also:

 * Module `shlex` - Support for a creating Unix shell-like mini-languages which can be used as an alternate format for application configuration files.

=== 13.2.1. RawConfigParser Objects ===

`RawConfigParser` instances have the following methods:

'''`RawConfigParser.defaults()`'''

__Return a dictionary containing the ''instance-wide'' defaults.__

'''`RawConfigParser.sections()`'''

__Return a list of the sections available; `DEFAULT` is not included in the list.__

'''`RawConfigParser.add_section(section)`'''

__Add a section named `section` to the instance. If a section by the given name already exists, `DuplicateSectionError` is raised. If the name `DEFAULT` (or any of it’s ''case-insensitive variants'') is passed, `ValueError` is raised.__

'''`RawConfigParser.has_section(section)`'''

__Indicates whether the named section is present in the configuration. The `DEFAULT` section is not acknowledged.__

'''`RawConfigParser.options(section)`'''

__Returns a list of options available in the specified section.__

'''`RawConfigParser.has_option(section, option)`'''

__If the given section exists, and contains the given option, return `True`; otherwise return `False`.__

New in version 1.6.

'''`RawConfigParser.read(filenames)`'''

__Attempt to read and parse a list of filenames, returning a list of filenames which were successfully parsed. If `filenames` is a string or Unicode string, it is treated as a single filename. If a file named in `filenames` cannot be opened, that file will be ignored. This is designed so that you can specify a list of ''potential'' configuration file locations (for example, the current directory, the user’s home directory, and some system-wide directory), and all existing configuration files in the list will be read. If none of the named files exist, the `ConfigParser` instance will contain an ''empty dataset''. An application which requires initial values to be loaded from a file should load the required file or files using `readfp()` before calling `read()` for any optional files:__

 {{{
import ConfigParser, os

config = ConfigParser.ConfigParser()
config.readfp(open('defaults.cfg'))
config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')])
 }}}

Changed in version 2.4: Returns list of successfully parsed filenames.

'''`RawConfigParser.readfp(fp[, filename])`'''

__Read and parse configuration data from the file or file-like object in `fp` (only the `readline()` method is used). If `filename` is omitted and `fp` has a `name` attribute, that is used for filename; the default is `<???>`.__

'''`RawConfigParser.get(section, option)`'''

__Get an option value for the named section.__

'''`RawConfigParser.getint(section, option)`'''

__A convenience method which coerces the option in the specified section to an integer.__

'''`RawConfigParser.getfloat(section, option)`'''

__A convenience method which coerces the option in the specified section to a floating point number.__

'''`RawConfigParser.getboolean(section, option)`'''

__A convenience method which coerces the option in the specified section to a Boolean value. Note that the accepted values for the option are `"1"`, `"yes"`, `"true"`, and `"on"`, which cause this method to return `True`, and `"0"`, `"no"`, `"false"`, and `"off"`, which cause it to return `False`. These string values are checked in a ''case-insensitive'' manner. Any other value will cause it to raise `ValueError`.__

'''`RawConfigParser.items(section)`'''

__Return a list of `(name, value)` pairs for each option in the given section.__

'''`RawConfigParser.set(section, option, value)`'''

__If the given section exists, set the given option to the specified value; otherwise raise `NoSectionError`. While it is possible to use `RawConfigParser` (or `ConfigParser` with `raw` parameters set to true) for internal storage of ''non-string values'', full functionality (including interpolation and output to files) can only be achieved using string values.__

New in version 1.6.

'''`RawConfigParser.write(fileobject)`'''

__Write a representation of the configuration to the specified file object. This representation can be parsed by a future `read()` call.__

New in version 1.6.

'''`RawConfigParser.remove_option(section, option)`'''

__Remove the specified option from the specified section. If the section does not exist, raise `NoSectionError`. If the option existed to be removed, return `True`; otherwise return `False`.__

New in version 1.6.

'''`RawConfigParser.remove_section(section)`'''

__Remove the specified section from the configuration. If the section in fact existed, return `True`. Otherwise return `False`.__

'''`RawConfigParser.optionxform(option)`'''

__Transforms the option name `option` as found in an input file or as passed in by client code to the form that should be used in the ''internal structures''. The default implementation returns a lower-case version of `option`; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior.__

__You don’t necessarily need to subclass a `ConfigParser` to use this method, you can also ''re-set it on an instance'', to a function that takes a string argument. Setting it to `str`, for example, would make option names ''case sensitive'':

 {{{
cfgparser = ConfigParser()
...
cfgparser.optionxform = str
 }}}

__Note that when reading configuration files, whitespace around the option names are stripped before `optionxform()` is called.__

=== 13.2.2. ConfigParser Objects ===

:::

