= link:../python.html[Python] / 字串（String） =
:title: [Python] 字串（String）

== 判斷字串是否出現在另一個字串裡 ==

單純要判斷字串是否出現在另一個字串裡，用 `in` 就可以辦到了：

--------------------------------------------------------------------------------
>>> s = 'This is a book.'
>>> 'book' in s, 'pencile' in s
(True, False)
--------------------------------------------------------------------------------

如果要限定出現在開頭或結尾，可以用下面兩個方法來做判斷：

 * `str.startswith(prefix[, start[, end]])` - 判斷 'prefix' 是否出現在字串的開頭。
 * `str.endswith(suffix[, start[, end]])` - 判斷 'suffix' 是否出現在字串的結尾。

其中 `[, start[, end]]` 可以將搜尋限縮在 `[start:]` 或 `[start:end]` 的範圍裡。'start' 與 'end' 的預設值分別是 0 跟 `len(s)`。

--------------------------------------------------------------------------------
>>> s = 'This is a book.'
>>> s.startswith('This')
True
>>> s.endswith('book')
False
>>> s[0:-1], s.endswith('book', 0, -1)
('This is a book', True)
--------------------------------------------------------------------------------

Python 2.5 後 'prefix' 跟 ‘suffix' 都開始支援 tuple，只是以其中一個字串做為開頭或結尾，就會得到 `True`。

--------------------------------------------------------------------------------
>>> s1 = 'This is a book'; s2 = 'That is a pencile'; s3 = 'Today is my day'
>>> prefix = ('This', 'That'); suffix = ('book', 'pen')
>>> s1.startswith(prefix), s1.endswith(suffix)
(True, True)
>>> s2.startswith(prefix), s2.endswith(suffix)
(True, False)
--------------------------------------------------------------------------------

如果需要進一步知道出現的位置（以 0 為啟始的索引值），才需要用到下面這些方法：

 * `str.find(sub[, start[, end]])` - 從字串左邊開始找起，傳回 'sub' 出現的位置，否則傳回 `-1`。
 * `str.rfind(sub[, start[, end]])` - 從字串右邊開始找起，傳回 'sub' 出現的位置，否則傳回 `-1`。
 * `str.index(sub[, start[, end]])` - 跟 `find()` 一樣，只是找不到時會丟出 `ValueError`。
 * `str.rindex(sub[, start[, end]])` - 跟 `rfind()` 一樣，只是找不到時會丟出 `ValueError`。

--------------------------------------------------------------------------------
>>> s = '0A2B4C6B8A'; len(s)
10
>>> s.rfind('B8')
7
>>> s.find('B4')
3
>>> s[3:], s.index('B4', 3)
('B4C6B8A', 3) <1>
>>> s[4:], s.index('B4', 4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: substring not found
--------------------------------------------------------------------------------
<1> 即使用 `[, start[, end]]` 來限定搜尋的範圍，回傳的位置還是從原始字串的第一個位置開始計算。

TIP: 如果 'sub' 一定會出現，用 `str.index()` 或 `str.rindex()` 可以省去檢查回傳值是否為 `-1` 的麻煩。

== 格式化 ==

 * str.format(*args, **kwargs)
 * str.center(width[, fillchar])
 * str.ljust(width[, fillchar])
 * str.rjust(width[, fillchar])
 * str.zfill(width)

== 調整字串內容 ==

 * str.capitalize()
 * str.title()
 * str.expandtabs([tabsize])
 * str.lower()
 * str.upper()
 * str.swapcase()
 * str.lstrip([chars])
 * str.rstrip([chars])
 * str.strip([chars])

== 用 Regex 更聰明地拆解字串 ==

假設檔案內容如下：

.link:string/ifconfig.txt[`ifconfig.txt`]
--------------------------------------------------------------------------------
eth0      Link encap:Ethernet  HWaddr 00:00:00:da:0b:0f  
          inet addr:10.201.175.201  Bcast:10.201.175.255  Mask:255.255.254.0
          inet6 addr: fe80::226:9eff:feda:b0f/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:2332718 errors:0 dropped:0 overruns:0 frame:0
          TX packets:64375 errors:0 dropped:0 overruns:0 carrier:1
          collisions:0 txqueuelen:1000 
          RX bytes:177828762 (177.8 MB)  TX bytes:17929110 (17.9 MB)
          Interrupt:46 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:10768 errors:0 dropped:0 overruns:0 frame:0
          TX packets:10768 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1360723 (1.3 MB)  TX bytes:1360723 (1.3 MB)

wlan0     Link encap:Ethernet  HWaddr 00:00:00:12:45:44  
          inet addr:10.1.247.66  Bcast:10.1.247.255  Mask:255.255.252.0
          inet6 addr: fe80::224:d6ff:fe12:4544/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:21850 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2504 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1188659 (1.1 MB)  TX bytes:376448 (376.4 KB)
--------------------------------------------------------------------------------

如何快速拆解出三張網卡的資訊，答案是 regex：

--------------------------------------------------------------------------------
import re

config = open('ifconfig.txt').read()
re.findall(r'^\w+.*?^$', config, re.DOTALL | re.MULTILINE)
--------------------------------------------------------------------------------

== 取代字串的內容 ==

 * str.replace(old, new[, count])

== 延伸閱讀 ==

 * link:split-string.html[拆解字串]
 * link:../python-encoding.html[處理不同的文字編碼]

== 參考資料 ==

.文件
--
 * http://docs.python.org/2/library/stdtypes.html#string-methods[Built-in Types > String Methods — The Python Standard Library]
 * http://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation[Lexical analysis > String literal concatenation — The Python Language Reference]
--

////////////////////////////////////////////////////////////////////////////////

 * string literal -> quoting styles/conventions
 * adjacent string literals = concatenation (syntatical level, at compile time)
 * reduce the number of backslashes needed <-- 跟 line concatenation 一樣，官方都建議儘量少用 backslash

--------------------------------------------------------------------------------
re.compile("[A-Za-z_]"       # letter or underscore <-- add comments to parts of strings 的用法很酷
           "[A-Za-z0-9_]*"   # letter, digit or underscore
          )
--------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////

