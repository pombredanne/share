= link:development.html[Python / Development] / IoC =
:title: [Python][Development] IoC

 * http://springpython.webfactional.com/[Spring Python]

== 延伸閱讀 ==

 * link:../../ioc/ioc.html[IoC (Inversion of Control)]

== 參考資料 ==

 * http://stackoverflow.com/questions/2461702/why-is-ioc-di-not-common-in-python[design patterns - Why is IoC / DI not common in Python? - Stack Overflow] (2010-03-17)
// stackoverflow.com_questions_2461702_why-is-ioc-di-not-common-in-python.pdf
   ** 目前 (2010-09-12) Jörg W Mittag 的回答分數最高, 但他的回答有點偏激, IoC 應該不只是他說的那樣 - nothing but an interpreter for a dynamic scripting language 而已.
   ** TM 的回答倒是比較衷肯 - Part of it is the way the module system works in Python. You can get a sort of "singleton" for free, just by importing it from a module. Define an actual instance of an object in a module, and then any client code can import it and actually get a working, fully constructed / populated object. (當 Constructor 參數的預設值指向另一個 Module 的 Varialbe 時, 不就是一種可替換 Collaborators 的實作?)
   ** bcarlso 從測試的角度切入. When I'm working in Ruby, however, I can dynamically replace the 'puts' method on STDOUT to do the verify, leaving DI completely out of the picture. 但這麼做會影響到接下來的其他測試不是嗎?
   ** Daniel Newby 簡單演示了一下如何用 Python Code 動態選用不同的實作
 * http://ryansvihla.blogspot.tw/2009/01/pinsor-python-diioc-framework.html[Mind Dump: Pinsor Python DI/IoC framework] (2009-01-26)

