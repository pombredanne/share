= link:python.html[Python] / 斷言（Assertions） =
:title: [Python] 斷言（Assertions）

在 Python 裡可以用 `assert` 來做 debug assertion，有 simple/extended 兩種用法：

 assert condition
 assert condition, message

其中 'condition' 跟 'message' 都是 expression。內部的行為等同於下面兩段程式：

--------------------------------------------------------------------------------
# assert condition
if __debug__: <1>
   if not condition: raise AssertionError

# assert condition, message
if __debug__:
   if not condition: raise AssertionError(message) <2>
--------------------------------------------------------------------------------
<1> `assert` 只有在 `__debug__` 為 `True` 才有作用，'condition' 不成立時會丟出 `AssertionError`。
+
--
`__debug__` 在 interpreter 啟動時就決定了，預設是 `True`（這一點跟 link:../java/java-assertion.html[Java 的 assertion] 剛好相反），搭配 `-O` 或 `-O0` 啟動 interpreter 時才會是 `False`。

 $ python
 >>> __debug__
 True

 $ python -O
 >>> __debug__
 False
--
+
<2> 採用 extended 的寫法時，'message' 會做為 `AssertionError` 的 error message。 

IMPORTANT: 由於 assertion 有可能被停用，`assert` 後面 expression 的運算不該對程式的其他部份產生影響，否則就會產生 "but it works in dev environment" 的狀況。

下面比較 simple/extended 兩種用法，從結果來看有什麼差別：

.`example.py`
--------------------------------------------------------------------------------
def zeropad(num, digits):
    num = str(num)
    results = '0' * (digits - len(num)) + num
    assert len(results) == digits
    return results

def zeropad2(num, digits):
    num = str(num)
    results = '0' * (digits - len(num)) + num
    assert len(results) == digits, (num, digits, results)
    return results
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
>>> from example import *
>>> zeropad('9', 4)
'0009'
>>>
>>> zeropad('99999', 4)
Traceback (most recent call last): <1>
  File "<stdin>", line 1, in <module>
  File "example.py", line 4, in zeropad
    assert len(results) == digits
AssertionError
>>>
>>> zeropad2('99999', 4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "example.py", line 10, in zeropad2
    assert len(results) == digits, (num, digits, results)
AssertionError: ('99999', 4, '99999') <2>
--------------------------------------------------------------------------------
<1> `assert` 的輸出固定會伴隨著 stack trace，不過 simple 的用法看不出來當時出錯的數據是多少？
<2> 'message' 會搭配著 stack trace 跟 source code 看，所以 'message' 只要輸出關鍵的數據即可，不需要額外的綴詞。

跟其他語言一樣，assertion 有它存在的意義、適用的時機等，但 Python 官方文件在這方面的著墨並不多。還好 Java 的 http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html[Programming With Assertions] 對這幾個面向有很完整的說明，概念上也適用於 Python。

== 延伸閱讀 ==

 * link:../java/java-assertion.html[[Java&#93; 斷言（Assertions）]

== 參考資料 ==

.文件
--
 * http://docs.python.org/2/reference/simple_stmts.html#the-assert-statement[Simple statements > The assert statement — The Python Language Reference]
--

.其他文件
--
 * http://stackoverflow.com/questions/944592/best-practice-for-python-assert[Best practice for Python Assert - Stack Overflow] (2009-06-03)
--

