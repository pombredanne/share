= link:programming.html[Python / Programming] / Decorators =
:title: [Python] Decorators

Decorator 其實就是 Python 對於 link:../../aop/aop.html[AOP] 的實現。

--------------------------------------------------------------------------------
>>> def plus_five(func):
...     x = func()
...     return x + 5
... 
>>> @plus_five
... def add_nums():
...     return 1 + 2
... 
>>> type(add_nums) # <1>
<type 'int'>
>>> type(add_nums), add_nums
(<type 'int'>, 8)
--------------------------------------------------------------------------------
<1> `add_nums` 的型態竟是 `int`。那是因為過程中已經發生 `add_nums = plus_five(add_nums)` 這件事，結果 `add_nums` 就是一個運算結果，而非包裝過一層的 function。

解法就是 `plus_five` 回傳一個 function 而非運算結果。 

--------------------------------------------------------------------------------
>>> def plus_five(func):
...     def inner(*args, **kwargs):
...         x = func(*args, **kwargs) + 5
...         return x
...     return inner
... 
>>> @plus_five
... def add_nums(num1, num2):
...     return num1 + num2
>>> type(add_nums), add_nums
(<type 'function'>, <function inner at 0x7ff8b2e0c668>)
>>> 
--------------------------------------------------------------------------------

用 class 來寫的彈性比較大：

.`deco.py`
--------------------------------------------------------------------------------
class decoargs():

    def __init__(self, arg):
        self.arg = arg

    def __call__(self, func):

        def wrapper(*args, **kwargs):
            print '[%s] before' % self.arg
            result = func(*args, **kwargs)
            print '[%s] after' % self.arg
            return result

        return wrapper

@decoargs('hello1')
def calc1(a, b):
    print '----------> calc1'
    return a + b

decoargs = decoargs('hello2')

@decoargs
def calc2(a, b):
    print '----------> calc2'
    return a + b

print calc1(1, 1)
print calc2(2, 2)
--------------------------------------------------------------------------------

Python/Jython 都支援這樣的用法：

--------------------------------------------------------------------------------
$ python deco.py
[hello1] before
----------> calc1
[hello1] after
2
[hello2] before
----------> calc2
[hello2] after
4

$ jython deco.py
[hello1] before
----------> calc1
[hello1] after
2
[hello2] before
----------> calc2
[hello2] after
4
--------------------------------------------------------------------------------

== 延伸閱讀 ==

 * link:../../aop/aop.html[Aspect-Oriented Programming (AOP)]

== 參考資料 ==

.文件
--
 * http://www.python.org/dev/peps/pep-0318/[PEP 318 -- Decorators for Functions and Methods]
 * http://www.python.org/dev/peps/pep-3129/[PEP 3129 -- Class Decorators]
 * http://docs.python.org/glossary.html#term-decorator[Glossary > decorator]
 * http://www.artima.com/weblogs/viewpost.jsp?thread=240808[Decorators I: Introduction to Python Decorators] (2008-10-18)
 * http://www.artima.com/weblogs/viewpost.jsp?thread=240845[Python Decorators II: Decorator Arguments] (2008-10-19)
 * http://www.artima.com/weblogs/viewpost.jsp?thread=241209[Python Decorators III: A Decorator-Based Build System] (2008-10-26)
 * http://wiki.python.org/moin/PythonDecorators[PythonDecorators - PythonInfo Wiki]
 * http://wiki.python.org/moin/PythonDecoratorLibrary[PythonDecoratorLibrary - PythonInfo Wiki]
 * http://www.jython.org/jythonbook/en/1.0/DefiningFunctionsandUsingBuilt-Ins.html#function-decorators[Chapter 4: Defining Functions and Using Built-ins — Jython Book v1.0 documentation]
--

.其他文件
--
 * http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/[simeonfranklin.com - Understanding Python Decorators in 12 Easy Steps!] (2012-07-01)
 * https://pythonconquerstheuniverse.wordpress.com/2012/04/29/python-decorators/[Python Decorators | Python Conquers The Universe] (2012-04-29)
 * http://www.siafoo.net/article/68[Python Decorators Don't Have to be (that) Scary - Siafoo] (2010-03-17)
 * http://pythonconquerstheuniverse.wordpress.com/2009/08/06/introduction-to-python-decorators-part-1/[Introduction to Python Decorators | Python Conquers The Universe] (2009-08-06)
 * http://stackoverflow.com/questions/739654/understanding-python-decorators[Understanding Python decorators - Stack Overflow] (2009-04-11)
 * http://ipozgaj.blogspot.com/2008/03/python-decorators-demistified.html#!/2008/03/python-decorators-demistified.html[Python decorators demystified | Daily nitpicking by ipozgaj] (2008-03-26)
 * http://www.ibm.com/developerworks/linux/library/l-cpdecor/index.html[Charming Python: Decorators make magic easy] (2006-12-29)
 * http://blog.roodo.com/descriptor/archives/9206319.html[descriptor:Python Idiom: Decorator I - 樂多日誌] (2006-06-11)
 * http://drdobbs.com/web-development/184406073[Python 2.4 Decorators | Dr Dobb's] (2005-03-01)
--

////////////////////////////////////////////////////////////////////////////////

== 雜記 ==

 * 其實 `property` 跟 `staticmethod` 等就是 Python 內建的 decorator，但又不一定要採用 `@property` 的表示法。

////////////////////////////////////////////////////////////////////////////////

