= link:programming.html[Python / Programming] / Circular Imports =
:title: [Python] Circular Imports

[quote,'Duncan Booth','https://groups.google.com/forum/?fromgroups=#!topic/comp.lang.python/HYChxtsrhnw[Coping with cyclic imports - Google Groups]']
________________________________________________________________________________
Imports are pretty straightforward really. Just remember the following:

'import' and 'from xxx import yyy' are executable statements. They execute when the running program reaches that line.

If a module is not in sys.modules, then an import creates the new module entry in sys.modules and then executes the code in the module. It does not return control to the calling module until the execution has completed.

If a module does exist in sys.modules then an import simply returns that module whether or not it has completed executing. That is the reason why cyclic imports may return modules which appear to be partly empty.

Finally, the executing script runs in a module named __main__, importing the script under its own name will create a new module unrelated to  __main__.

Take that lot together and you shouldn't get any surprises when importing modules.
________________________________________________________________________________

[quote,'http://effbot.org/zone/import-confusion.htm[Importing Python Modules]']
________________________________________________________________________________
Modules are executed during import, and new functions and classes won’t appear in the module’s namespace until the def (or class) statement has been executed.
________________________________________________________________________________

== 參考資料 ==

 * https://dev.launchpad.net/PythonStyleGuide#Circular_imports[PythonStyleGuide > Circular imports - Launchpad Development] - 把其中一方的 import 移到 function/method 裡（nested import），並且在一開頭就加註是為了避開 circular imports 才這麼做的。
 * http://stackoverflow.com/questions/894864/circular-dependency-in-python[Circular dependency in Python - Stack Overflow] (2009-05-21) - "Python is not Java. You don't need one class per file." 點出了根本的問題，但不拆出來的話 `.py` 會變得太長而難以維護。
 * http://stackoverflow.com/questions/744373/circular-or-cyclic-imports-in-python[Circular (or cyclic) imports in Python - Stack Overflow] (2009-04-13) - 引用 Duncan Booth 的看法，另外也討論到 circular 的說法會比 cyclic 來得好。
 * https://groups.google.com/forum/?fromgroups=#!topic/comp.lang.python/HYChxtsrhnw[Coping with cyclic imports - Google Groups] (2008-04-09) - 最後導出 Duncan Booth 的看法，也就是這份文件最上頭引用的那一段話。
 * http://effbot.org/zone/import-confusion.htm[Importing Python Modules] (1999-01-07) - circular import 應該避免，但小心安排的話是沒有問題的。對於 "Modules are executed during import" 這件事講得很清楚。

////////////////////////////////////////////////////////////////////////////////

 * 我們清楚知道應該避免 circular imports，例如把共用的部份另外抽出去。
 * 好像目前遇到的例子都是因為 class 的造成，parent class 某個方法內部的實作會引用到 subclass；但 subclass 又必須繼承 parent class。
 * 看似 one module per class 是 Java 帶過來的壞習慣？但不拆的話 .py 又太大而難以維護。
 * 常見的解法是把一方的 import 移到 function/method 內部，並在開頭加註這麼做是為了要避開 circular imports。
 * http://stackoverflow.com/questions/10957694/reason-for-circular-references-with-classes 說明在 Java 裡 circular class reference 其實很常見。這種狀況拆也拆不開(硬是拆出去變得難維護也不值得)，只能合併成一個 module？

////////////////////////////////////////////////////////////////////////////////

