= link:oop.html[Python / OOP] / New-style Classes =
:title: [Python] New-style Classes

相對於 old-style (classic) class，所謂的 new-style 指的是繼承自 `object` 的 class，有許多操作只能用在 new-style class。

Python 2.2 提出了 new-style class 的概念，用以跟 Python 2.1 之前的 old-style/classic class 做區隔。（Python 3.0 已經不再支援 old-style class）

--------------------------------------------------------------------------------
>>> class new(object): pass <1>
...
>>> class old(): pass       <2>
...
>>> type(new), type(old)
(<type 'type'>, <type 'classobj'>) <3>
>>>
--------------------------------------------------------------------------------
<1> 所有的 new-style class 都直接或間接繼承自 `object`。
<2> 其他沒有直接或間接繼承 `object` 的 class 預設被視為 old-style class。
<3> 這說明了為什麼官方文件習慣稱 new-style class 為 'type object'，稱 old-style class 為 'class object'。

進一步觀察 new-style/old-style class 的差異：

--------------------------------------------------------------------------------
>>> newobj = new(); oldobj = old()
>>> newobj.__class__, oldobj.__class__
(<class '__main__.new'>, <class __main__.old at 0xb779f0ec>)
>>> type(newobj), type(oldobj) <1>
(<class '__main__.new'>, <type 'instance'>)
>>>
>>> newobj.foo = 'bar'
>>> oldobj.foo = 'bar'
>>> obj = object()
>>> obj.foo = 'bar'    <2>
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'object' object has no attribute 'foo'
--------------------------------------------------------------------------------
<1> 兩者在 `__class__` 的行為沒有差別，但對 `type()` 的反應卻很不一樣。也就是說，如果想知道某個 instance 的型態，從 `__class__` 總是能找到答案。
<2> 不論是 new-style 或 old-style class 都支援 'arbitrary attributes'，但直接拿 `object` 來用是不行的。

== 延伸閱讀 ==

 * link:descriptors.html[Descriptors]

== 參考資料 ==

.文件
--
 * http://www.python.org/doc/newstyle/[New-style Classes]
 * http://docs.python.org/glossary.html#term-new-style-class[Glossary > new-style class]
 * http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes[Data model > New-style and classic classes — The Python Language Reference]
 * http://docs.python.org/2/library/types.html[types — Names for built-in types — The Python Standard Library]
 * http://www.python.org/download/releases/2.2.3/descrintro/[Unifying types and classes in Python 2.2]
--

