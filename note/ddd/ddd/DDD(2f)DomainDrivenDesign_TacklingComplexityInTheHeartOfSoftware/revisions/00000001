= Domain-Driven Design: Tackling(認真應對) Complexity in the Heart of Software =
<<TableOfContents>>

== Overview ==

__The software development community widely acknowledges(注意到) that domain modeling is central to software design. '''Through domain modeling, software developers are able to express rich functionality and translate that functionality into software implementation that truly serves the needs of its users.''' Despite its obvious importance, however, there are few practical resources that show how to incorporate(結合) effective domain modeling into the software development process.__

Domain-Driven Design fills that need. It offers readers a systematic(有系統的) approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains (= problem domains). Intertwining(糾結的) design and development practice, Domain-Driven Design incorporates numerous examples in Java-case (這呼應了企業多採用 Java 來處理複雜商業問題的事實) studies taken from actual projects that illustrate the application of domain-driven design to real-world software development.

Readers will find an overview of domain-driven design that highlights key principles, terms, and implications(含意). __The book presents a core of best practices and standard patterns that provide a common language for the development team. In addition, it highlights how refactoring in domain modeling, integrated with the frequent iterations of Agile development (沒想到 refactoring, xp 等概念在 2003 寫這本書的時候就已成形), leads to deeper insight into domains and enhanced communication between domain expert and programmer.__ Building on this foundation, the book then addresses domain-driven design for complex systems and larger organizations(商業應用).

Specific topics covered include:

 * Isolating the domain
 * Entities, value objects, services, and modules
 * The lifecycle of a domain object
 * Representing processes as domain objects (跟 BPM 有關嗎[?])
 * Creating functions free of side effects
 * Conceptual contours(輪廓)
 * Standalone classes
 * Extending specifications
 * Applying analysis patterns
 * Relating design patterns to the model
 * Maintaining model integrity
 * Formulating the domain vision statement
 * Choosing refactoring targets
 * Responsibility layers
 * Creating a pluggable component framework
 * Bringing together large-scale structures and bounded contexts[?]

With this book in hand, object-oriented developers, system analysts, and designers will have the guidance they need to think deeply about domains, create rich and accurate domain models, and transform these models into high-quality, long-lasting software implementations.

=== Praise(讚揚) for Domain-Driven Design ===

"This book belongs on the shelf of every thoughtful(深思的) software developer."

—Kent Beck

"Eric Evans has written a fantastic(很棒的) book on how you can make the design of your software match your mental model(心智模型) of the problem domain you are addressing.

__"'''His book is very compatible with XP. It is not about drawing pictures of a domain; it is about how you think of it, the language you use to talk about it, and how you organize your software to reflect your improving understanding of it.''' Eric thinks that learning about your problem domain is as likely to happen at the end of your project as at the beginning, and so refactoring is a big part of his technique."__

"The book is a fun read. Eric has lots of interesting stories, and he has a way with words. I see this book as essential reading for software developers—it is a future classic(未來的典範)."

—Ralph Johnson, author of Design Patterns

__"If you don't think you are getting value from your investment in object-oriented programming, this book will tell you what you've forgotten to do." (如果掉進 Anemic Domain Model 的陷阱, OO 的概念幾乎套用不上...)__

—Ward Cunningham

__"What Eric has managed to capture is a part of the design process that experienced object designers have always used, but that we have been singularly(少見地) unsuccessful as a group in conveying(傳達) to the rest of the industry. We've given away bits and pieces of this knowledge . . . but we've never organized and systematized the principles of building domain logic. This book is important." '''(這本書所講述的概念會讓人覺得 "事情本該如此, 但為何沒人這麼做", 這是個秘密!!)'''__

—Kyle Brown, author of Enterprise Java Programming with IBM WebSphere

__"Eric Evans convincingly(令人信服地) argues(主張) for the importance of domain modeling as the central focus of development and provides a solid framework and set of techniques for accomplishing it. '''This is timeless(永恆的) wisdom, and will hold up(保持不衰) long after the methodologies have gone out of fashion.'''"__

—Dave Collins, author of Designing Object-Oriented User Interfaces

"Eric weaves real-world experience modeling—and building—business applications into a practical, useful book. Written from the perspective of a trusted practitioner(從業者; 因此這本書不會偏離實務), Eric's descriptions of ubiquitous language(通用語言), the benefits of sharing models with users, object life-cycle management, logical and physical application structuring, and the process and results of deep refactoring are major contributions to our field(領域)."

—Luke Hohmann, author of Beyond Software Architecture

=== Foreword(序; 大師 Martin Fowler 推薦) ===

There are many things that make software development complex. But the heart of this complexity is the essential intricacy(錯綜複雜) of the problem domain itself. If you're trying to add automation to complicated human enterprise (尤指商業問題, 人是最難搞的...), then your software cannot dodge(閃避) this complexity—all it can do is control it.

The key to controlling complexity is a good domain model, a model that goes beyond a surface vision of a domain by introducing an underlying structure, which gives the software developers the leverage(手段) they need. __A good domain model can be incredibly(難以置信地) valuable, but it's not something that's easy to make. '''Few people can do it well, and it's very hard to teach.'''__

Eric Evans is one of those few who can create domain models well. I discovered this by working with him—one of those wonderful times when you find a client who's more skilled than you are. Our collaboration was short but enormous(非凡的) fun. Since then we've stayed in touch, and I've watched this book gestate(醞釀) slowly.

It's been well worth the wait.

__This book has evolved into one that satisfies a huge ambition: '''To describe and build a vocabulary about the very(真正的) art of domain modeling. To provide a frame of reference through which we can explain this activity as well as teach this hard-to-learn skill.'''__ It's a book that's given me many new ideas as it has taken shape, and I'd be astonished(感到驚訝) if even old hands(老手) at conceptual modeling don't get a raft of(許多) new ideas from reading this book.

__Eric also cements(接合) many of the things that we've learned over the years. '''First, in domain modeling, you shouldn't separate the concepts from the implementation. (務實的想法)''' An effective domain modeler can not only use a whiteboard with an accountant, but also write Java with a programmer. '''Partly(某種程度上) this is true because you cannot build a useful conceptual model without considering implementation issues. But the primary reason why concepts and implementation belong together is this: The greatest value of a domain model is that it provides a ubiquitous language that ties domain experts and technologists together.'''__

__Another lesson you'll learn from this book is that domain models aren't first modeled and then implemented. Like many people, I've come to reject the phased thinking of "design, then build." But the lesson of Eric's experience is that '''the really powerful domain models evolve over time, and even the most experienced modelers find that they gain their best ideas after the initial releases of a system. (Refactoring)'''__

I think, and hope, that this will be an enormously(非常地) influential(有影響力的) book. One that will add structure and cohesion(內聚性) to a very slippery(難以捉摸的) field while it teaches a lot of people how to use a valuable tool. Domain models can have big consequences(結果) in controlling software development—in whatever language or environment they are implemented.

One final yet important thought. One of things I most respect about this book is that Eric is not afraid to talk about the times when he hasn't been successful. Most authors like to maintain an air of disinterested(無私的) omnipotence(全能). Eric makes it clear that like most of us, he's tasted both success and disappointment. The important thing is that he can learn from both—and more important for us is that he can pass on(傳授) his lessons.

Martin Fowler
April 2003

=== Preface ===

Leading software designers have recognized domain modeling and design as critical topics for at least 20 years, yet surprisingly little has been written about what needs to be done or how to do it. Although it has never been formulated(系統化地整理) clearly, a philosophy has emerged(浮現) as an undercurrent in the object community, a philosophy I call domain-driven design.

I have spent the past decade developing complex systems in several business and technical domains. In my work, I have tried best practices in design and development process as they have emerged from the leaders in object-oriented development. Some of my projects were very successful; a few failed. __'''A feature common to the successes was a rich domain model that evolved through iterations of design and became part of the fabric(結構) of the project.'''__

This book provides a framework for making design decisions and a technical vocabulary for discussing domain design. It is a synthesis(綜合體) of widely accepted best practices along with my own insights and experiences. Software development teams facing complex domains can use this framework to approach domain-driven design systematically.

==== Contrasting(對照) Three Projects ====

Three projects stand out in my memory as vivid(生動的) examples of how dramatically(戲劇性地) domain design practice can affect development results. Although all three projects delivered useful software, only one achieved its ambitious objectives and produced complex software that continued to evolve to meet the ongoing needs of the organization (擁抱改變).

I watched one project get out of the gate(推出) fast, by delivering a useful, simple Web-based trading system. Developers were flying by the seat of their pants, but this didn't hinder(阻礙) them because simple software can be written with little attention to design (= poor design). As a result of this initial success, expectations for future development were sky-high. That is when I was asked to work on the second version. When I took a close look, I saw that they lacked a domain model, or even a common language on the project, and were saddled with an unstructured design. The project leaders did not agree with my assessment(判斷), and I declined(辭退) the job. __A year later, the team found itself bogged down(陷於泥沼) and unable to deliver a second version. Although their use of technology was not exemplary(值得仿效的), '''it was the business logic that over-came them. Their first release had ossified(已硬化的) prematurely(過早地) into a high-maintenance legacy.'''__

Lifting(仰視) this ceiling(天花板) on complexity calls for(需要) a more serious approach to the design of domain logic. Early in my career, I was fortunate to end up on a project that did emphasize domain design. This project, in a domain at least as complex as the first one, also started with a modest(保守的) initial success, delivering a simple application for institutional(協會的) traders. But in this case, the initial delivery was followed up with successive(連續的) accelerations of development. Each iteration opened exciting new options for integrating and elaborating(變複雜) the functionality of the previous release. The team was able to respond to the needs of the traders with flexibility and expanding capability. __This upward trajectory(曲線) was directly attributable(歸因於) to an incisive(機敏的) domain model, repeatedly refined and expressed in code. '''As the team gained new insight into the domain, the model deepened(深化).''' The quality of communication improved not only among developers but also between developers and domain experts, and the design—far from imposing(印象深刻的) an ever-heavier maintenance burden—became easier to modify and extend.__

Unfortunately, projects don't arrive at such a virtuous(高潔的) cycle just by taking models seriously. One project from my past started with lofty aspirations(宏願) to build a global enterprise system based on a domain model, but after years of disappointment, it lowered its sights and settled into conventionality(老套). The team had good tools and a good understanding of the business, and it gave careful attention to modeling. __But a poorly chosen separation of developer roles disconnected modeling from implementation, so that the design did not reflect the deep analysis that was going on (沒有辦法深化). In any case, the design of detailed business objects was not rigorous(嚴密的) enough to support combining them in elaborate(精心製作的) applications. '''Repeated iteration produced no improvement in the code, due to(歸因於) uneven(不均等的) skill levels among developers, who had no awareness of the informal body of style and technique for creating model-based objects that also function as practical, running software. (不只是做系統規劃的人要能夠掌握 DDD, 負責實作的工程師也要對 DDD 有一定程度的瞭解; 因此需要有一套系統化的方法傳承...)'''__ As months rolled by, development work became mired(陷入泥沼) in complexity and the team lost its cohesive(內聚的) vision of the system. After years of effort, the project did produce modest, useful software, but the team had given up its early ambitions along with the model focus.

==== The Challenge of Complexity ====

Many things can put a project off course(偏離正軌): bureaucracy(官僚制度), unclear objectives, and lack of resources, to name a few. But it is the approach to design that largely determines how complex software can become. __'''When complexity gets out of hand(變得難以控制), developers can no longer understand the software well enough to change or extend it easily and safely. (這與 API 在設計上拋出 `IllegalStateException` 的考量, 似乎有點關聯 [...])''' On the other hand, a good design can create opportunities to exploit(利用) those complex features.__

Some design factors are technological. A great deal of effort has gone into the design of networks, databases, and other technical dimensions of software. Many books have been written about how to solve these problems. Legions(多數) of developers have cultivated(被栽培的) their skills and followed each technical advancement(進化).

__'''Yet the most significant complexity of many applications is not technical. It is in the domain itself, the activity or business of the user. (笨蛋, 問題不在技術!!)''' When this domain complexity is not handled in the design, it won't matter(無關緊要) that the infrastructural technology is well conceived(設想). A successful design must systematically deal with this central aspect of the software.__

The premise(前提) of this book is twofold(有兩要素的):

 * __For most software projects (尤其是 business applications), the primary focus should be on the domain and domain logic.__
 * __Complex domain designs should be based on a model.__

Domain-driven design is both a way of thinking and a set of priorities, aimed at accelerating software projects that have to deal with complicated domains. To accomplish that goal, this book presents an extensive set of design practices, techniques, and principles.

==== Design Versus Development Process ====

__Design books. Process books. They seldom(很少) even reference each other. Each topic is complex in its own right. This is a design book, but I believe that design and process are inextricable(分不開的). '''Design concepts must be implemented successfully or else they will dry up into academic discussion.'''__

__'''When people learn design techniques, they feel excited by the possibilities (每一個方法論講得跟真的一樣, 但在實務的應用上可能不是如此...). Then the messy(難纏的) realities of a real project descend on(襲擊) them. They can't fit the new design ideas with the technology they must use.''' Or they don't know when to let go of(放開) a particular design aspect in the interest of time and when to dig in(努力幹) their heels and find a clean solution. '''Developers can and do talk with each other abstractly about the application of design principles, but it is more natural to talk about how real things get done.''' So, although this is a design book, I'm going to barge(闖入) right across that artificial boundary into process when I need to. This will help put design principles in context.__

This book is not tied to a particular methodology, but it is oriented toward the new family of "Agile development processes." Specifically, it assumes that a couple of practices are in place(各得其所) on the project. These two practices are prerequisites for applying the approach in this book.

 * __'''Development is iterative.''' Iterative development has been advocated(提倡) and practiced for decades (一個觀念的成形需要時間, 一個觀念的推廣也是; 在 1998 年相關書籍出現之前, 這些觀念已蘊釀了很長的一段時間, 到這個觀念被所有人注意到或接受, 又過了將近 10 年...), and it is a cornerstone(基石) of Agile development methods.__ There are many good discussions in the literature of Agile development and Extreme Programming (or XP), among them, ''Surviving Object-Oriented Projects'' (Cockburn 1998) and ''Extreme Programming Explained'' (Beck 1999).

 * __'''Developers and domain experts have a close relationship.''' Domain-driven design crunches(咬嚼) a huge amount of knowledge into a model that reflects deep insight into the domain and a focus on the key concepts. '''This is a collaboration between those who know the domain and those who know how to build software. (專家與技術的完美結合)''' Because development is iterative, this collaboration must continue throughout the project's life.__

Extreme Programming, conceived(構思) by Kent Beck, Ward Cunningham, and others (see Extreme Programming Explained [Beck 2000]), is the most prominent(廣為所知的) of the Agile processes and the one I have worked with most. Throughout this book, to make explanations concrete, I will use XP as the basis for discussion of the interaction of design and process. The principles illustrated are easily adapted to other Agile processes.

__In recent years there has been a rebellion(反動) against elaborate(精心制作的) development methodologies that burden projects with useless, static documents and obsessive(過度的) upfront planning and design. Instead, the Agile processes, such as XP, emphasize the ability to cope with(有效地對付) change and uncertainty(不確定).__

__Extreme Programming recognizes the importance of design decisions, but it strongly resists(對抗) upfront design. Instead, it puts an admirable(令人驚嘆的) effort into communication and improving the project's ability to change course rapidly. '''With that ability to react, developers can use the "simplest thing that could work" at any stage of a project and then continuously refactor, making many small design improvements, ultimately arriving at a design that fits the customer's true needs.'''__

__This minimalism(極簡派藝術) has been a muchneeded(許多) antidote(對策) to some of the excesses of design enthusiasts(狂熱者; 過度設計). '''Projects have been bogged down by cumbersome documents that provided little value. They have suffered from "analysis paralysis(麻痺)," with team members so afraid of an imperfect(不完善的) design that they made no progress at all. Something had to change.'''__

__Unfortunately, some of these process ideas can be misinter-preted(誤解). Each person has a different definition of "simplest." Continuous refactoring is a series of small redesigns; developers without solid design principles will produce a code base that is hard to understand or change—the opposite of agility. '''And although fear(恐懼) of unanticipated(未預料到的) requirements often leads to overengineering, the attempt to avoid overengineering can develop into another fear: a fear of doing any deep design thinking at all.'''__

__In fact, XP works best for developers with a sharp(清晰的) design sense. The XP process assumes that you can improve a design by refactoring, and that you will do this often and rapidly. '''But past design choices make refactoring itself either easier or harder. The XP process attempts to increase team communication, but model and design choices clarify or confuse communication.'''__

This book intertwines(交錯) design and development practice and illustrates how domain-driven design and Agile development reinforce(強化) each other. A sophisticated approach to domain modeling within the context of an Agile development process will accelerate development. The interrelationship of process with domain development makes this approach more practical than any treatment(論法) of "pure" design in a vacuum(真空).

==== The Structure of This Book ====

The book is divided into four major sections:

 ''Part I: Putting the Domain Model to Work'' presents the basic goals of domain-driven development; these goals motivate(為...之動機) the practices in later sections. Because there are so many approaches to software development, Part I defines terms and gives an overview of the implications of using the domain model to drive communication and design.

 ''Part II: The Building Blocks of a Model-Driven Design'' condenses(濃縮) a core of best practices in object-oriented domain modeling into a set of basic building blocks. This section focuses on bridging the gap between models and practical, running software. __Sharing these standard patterns brings order to the design. Team members more easily understand each other's work. Using standard patterns also contributes terminology to a common language, which all team members can use to discuss model and design decisions.__

 But the main point of this section is to focus on the kinds of decisions that keep the model and implementation aligned with each other, each reinforcing the other's effectiveness. This alignment requires attention to the detail of individual elements. Careful crafting at this small scale gives developers a steady(穩固的) foundation from which to apply the modeling approaches of Parts III and IV.

 ''Part III: Refactoring Toward Deeper Insight'' goes beyond the building blocks to the challenge of assembling them into practical models that provide the payoff(收益). Rather than jumping directly into esoteric(只有少數人了解的) design principles, this section emphasizes the discovery process. __Valuable models do not emerge(浮現) immediately; they require a deep understanding of the domain. That understanding comes from diving in, implementing an initial design based on a probably naive model, and then transforming it again and again. '''Each time the team gains insight, the model is transformed to reveal that richer knowledge, and the code is refactored to reflect the deeper model and make its potential available to the application.''' Then, once in a while(有時), this onion peeling(徹底瞭解; 就如同逐層剝掉洋蔥一樣地探究) leads to an opportunity to break through to a much deeper model, attended(從事) by a rush of profound(徹底的) design changes.__

 Exploration(探究) is inherently openended, but it does not have to be random. Part III delves into modeling principles that can guide choices along the way, and techniques that help direct the search.

 __''Part IV: Strategic Design''[?] deals with situations that arise in complex systems, larger organizations, and interactions with external systems and legacy systems. This section explores a triad(三合一) of principles that apply to the system as a whole: context, distillation(蒸餾), and large-scale structure. Strategic design decisions are made by teams, or even among teams. Strategic design enables the goals of Part I to be realized on a larger scale, for a big system or an application that fits into a sprawling(不規則延伸的), enterprise-wide network.__

Throughout the book, discussions are illustrated not with over-simplified, "toy" problems, but with realistic examples adapted from actual projects.

Much of the book is written as a set of "patterns." Readers should be able to understand the material without concern about this device, but those who are interested in the style and format of the patterns may want to read the appendix.

Supplemental materials can be found at http://domaindrivendesign.org, including additional example code and community discussion.

==== Who Should Read This Book ====

This book is written primarily for developers of object-oriented software. Most members of a software project team can benefit from some parts of the book. It will make the most sense to people who are currently involved with a project, trying to do some of these things as they go through, and to people who already have deep experience with such projects.

Some knowledge of object-oriented modeling is necessary to benefit from this book. The examples include UML diagrams and Java code, so the ability to read those languages at a basic level is important, but it is unnecessary to have mastered the details of either. Knowledge of Extreme Programming will add perspective to the discussions of development process, but the material should be understandable to those without background knowledge.

For intermediate(中級的) software developers—readers who already know something of object-oriented design and may have read one or two software design books—this book will fill in gaps and provide perspective on how object modeling fits into real life on a software project. The book will help intermediate developers learn to apply sophisticated modeling and design skills to practical problems.

__Advanced or expert software developers will be interested in the book's comprehensive(全面的) framework for dealing with the domain. '''This systematic approach to design will help technical leaders guide their teams down this path. Also, the coherent(前後連貫的) terminology used through-out the book will help advanced developers communicate with their peers.'''__

This book is a narrative(故事體的), and it can be read from beginning to end, or from the beginning of any chapter. Readers of various backgrounds may wish to take different paths through the book, but I do recommend that all readers start with the introduction to Part I, as well as Chapter 1. Beyond that, the core is probably Chapters 2, 3, 9, and 14. A skimmer(大略閱讀的人) who already has some grasp(理解) of a topic should be able to pick up the main points by reading headings and bold text. A very advanced reader may want to skim Parts I and II and will probably be most interested in Parts III and IV.

In addition to this core readership(讀者群), analysts and relatively(相對地) technical project managers will also benefit from reading the book. Analysts can draw on(利用) the connection between model and design to make more effective contributions in the context of an Agile project. Analysts may also use some of the principles of strategic design to better focus and organize their work.

__Project managers should be interested in the emphasis on '''making a team more effective and more focused on designing software meaningful to business experts and users.'''__ And because strategic design decisions are interrelated with team organization and work styles, these design decisions necessarily involve the leadership of the project and have a major impact on the project's trajectory(軌蹟).

==== A Domain-Driven Team ====

__Although an individual developer who understands domain-driven design will gain valuable design techniques and perspective(洞察力), '''the biggest gains come when a team joins together to apply a domain-driven design approach and to move the domain model to the project's center of discourse(論述).''' By doing so, the team members will share a language that enriches their communication and keeps it connected to the software. They will produce a lucid(清楚易懂的) implementation in step(步調一致) with a model, giving leverage(影響力) to application development. They will share a map of how the design work of different teams relates, and they will systematically '''focus attention on the features that are most distinctive(獨特的; 差異化是企業成功的要素之一) and valuable to the organization.'''__

Domain-driven design is a difficult technical challenge that can pay off big, opening opportunities just when most software projects begin to ossify(僵化) into legacy.

== Part I: Putting the Domain Model to Work ==

[...]

== Resource ==

=== Reference ===

=== Attachments ===

|| Filename || Description ||
||  ||  ||

=== Links ===

=== Search ===

== Scratch ==
