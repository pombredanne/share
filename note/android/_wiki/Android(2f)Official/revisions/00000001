= Android - An Open Handset Alliance Project =
<<TableOfContents>>

== Google Projects for Android - Google Code ==
http://code.google.com/android/ @2010/01/15

__Android is a ''software stack'' for mobile devices that includes an operating system, ''middleware'' and key applications.__ The http://developer.android.com/sdk/[Android SDK] provides the tools and APIs necessary to begin developing applications that run on Android-powered devices.

__This site provides information about Google projects based on the Android platform, (發展 Android 週邊的東西)__ such as ''external libraries'' that extend the Android platform, Android applications, ''hosted services'' and APIs, the Android Developer Contest, and more. Everything on this site is provided by Google for the benefit of Android developers.

__If you are looking for general information about Android, please visit the http://www.android.com/[www.android.com] site.__ If you are interested in developing applications for Android devices, please visit the Android Developers site at http://developer.android.com/[developer.android.com]

'''Google APIs add-on'''

__The Google APIs add-on extends your Android SDK to give your applications access to Google libraries such as Maps.__ Using the Maps library, you can quickly add powerful mapping capabilities to your Android applications.

== Download the Android SDK ==
http://developer.android.com/sdk/index.html @2010/09/17

Welcome Developers! If you are new to the Android SDK, please read the Quick Start, below, for an overview of how to install and set up the SDK.

__If you are already using the Android SDK and would like to update to the latest tools or platforms, please use the Android SDK and ''AVD Manager'' to get the components, rather than downloading a new SDK package.__

|| Platform || Package || Size || MD5 Checksum ||
|| Windows || `android-sdk_r07-windows.zip` || 23669664 bytes || 69c40c2d2e408b623156934f9ae574f0 ||
|| Mac OS X (intel) || `android-sdk_r07-mac_x86.zip` || 19229546 bytes || 0f330ed3ebb36786faf6dc72b8acf819 ||
|| Linux (i386) || `android-sdk_r07-linux_x86.tgz` || 17114517 bytes  || e10c75da3d1aa147ddd4a5c58bfc3646 ||

=== Quick Start ===

The steps below provide an overview of how to get started with the Android SDK. For detailed instructions, start with the Installing the SDK guide.

1. Prepare your development computer

Read the System Requirements document and make sure that your development computer meets the hardware and software requirements for the Android SDK. Install any additional software needed before downloading the Android SDK. __In particular, you may need to install the JDK (version 5 or 6 required) and Eclipse (version 3.4 or 3.5, needed only if you want develop using the ADT Plugin).__

2. Download and install the SDK ''starter package''

Select a starter package from the table at the top of this page and download it to your development computer. __To install the SDK, simply unpack the starter package to a safe location and then add the location to your `PATH`.__

3. Install the ADT Plugin for Eclipse

__If you are developing in Eclipse, set up a remote update site at https://dl-ssl.google.com/android/eclipse/. Install the Android Development Tools (ADT) Plugin, restart Eclipse, and set the "Android" preferences in Eclipse to point to the SDK install location.__ For detailed instructions, see ADT Plugin for Eclipse.

4. Add Android platforms and other components to your SDK

__Use the Android SDK and AVD Manager, included in the SDK starter package, to add one or more Android platforms (for example, Android 1.6 or Android 2.2) and other components to your SDK.__ If you aren't sure what to add, see Which components do I need?

To launch the Android SDK and AVD Manager on Windows, execute `SDK Setup.exe`, at the root of the SDK directory. On Mac OS X or Linux, execute the `android` tool in the `<sdk>/tools/` folder. For detailed instructions, see Adding SDK Components.

Done!

If you are new to Android, you can use the Hello World tutorial to get started quickly. Next Steps offers other suggestions of how to begin.

For a more detailed guide to installing and setting up the SDK, read Installing the SDK.

== Download the Android SDK ==
http://developer.android.com/sdk/index.html @2010/01/15

    * Use the Android SDK and AVD Manager (), included in the SDK starter package, to add one or more Android platforms (for example, Android 1.6 or Android 2.0) to your SDK. ____ Information about each platform is available at left, under "Downloadable SDK Components."

    * __To launch the Android SDK and AVD Manager on Windows, execute `SDK Setup.exe`, at the root of the SDK directory. On Mac OS X or Linux, execute the `android` tool in the `<sdk>/tools/` folder.__ For more information about how to add platforms and other components, see http://developer.android.com/sdk/adding-components.html[Adding SDK Components].

 4. Get the latest documentation

    If you develop while offline, use the Android SDK and AVD Manager to download the latest documentation package. __The documentation covers all versions of the API and lets you filter out those versions that your application won't support. Once installed, the documentation is also available to you directly from the Eclipse IDE.__ When you are online, you can always access the latest documentation at the Android Developers site.

 5. Download other SDK components

    You can use the Android SDK and AVD Manager to download other ''SDK components'', such as the SDK add-ons. __An SDK add-on provides a development environment for an Android ''external library'' or a customized Android ''system image''.__ For example, the Google APIs Add-On lets you develop an application that takes advantage of the Google Maps external library.

 6. Get started with an application project

    Once you've set up your SDK, the next step is to start a new application project or move existing applications into the new SDK.

If you are new to Android, you can use the http://developer.android.com/resources/tutorials/hello-world.html[Hello World] tutorial to get started quickly. http://developer.android.com/sdk/installing.html#NextSteps[Next Steps] offers other suggestions of how to begin. Welcome!

== Installing the Android SDK ==
http://developer.android.com/sdk/installing.html @2010/01/15

This page describes how to install the latest version of the Android SDK and set up your development environment for the first time.

If you encounter any problems during installation, see the Troubleshooting section at the bottom of this page.

=== Updating? ===

If you are currently using the Android 1.6 SDK, you do not necessarily need to install a newer SDK, since you can already update the platforms, tools, and other components using the Android SDK and AVD Manager tool. __To develop against the latest Android platform, for example, you could just download the latest SDK Tools and then add the new Android platform into your existing SDK. (顯然 SDK 跟 Android Platforms 是不同的東西; Android 1.6 SDK 開始提供自動更新的功能)__

If you are using Android 1.5 SDK or older, you should install the new SDK as described in this document and move your application projects to the new SDK environment.

=== Prepare for Installation ===

Before you begin, take a moment to confirm that your development machine meets the http://developer.android.com/sdk/requirements.html[System Requirements].

If you will be developing in Eclipse with the Android Development Tools (ADT) Plugin — the recommended path if you are new to Android — make sure that you have a suitable version of Eclipse installed on your computer (3.4 or newer is recommended). If you need to install Eclipse, you can download it from this location:

http://www.eclipse.org/downloads/

__A Java or RCP version of Eclipse is recommended. '''For Eclipse 3.5, the "Eclipse Classic" version is recommended.'''__

=== Download and Install the SDK ===

Download the SDK package that is appropriate for your development computer. You can get the latest version from the SDK download page.

After downloading, unpack the Android SDK archive to a suitable location on your machine. By default, the SDK files are unpacked into a directory named `android-sdk-<machine-platform>`. Make a note of the name and location of the unpacked SDK directory on your system — you will need to refer to the SDK directory later, when setting up the ADT plugin or when using the SDK tools.

Optionally, you may want to add the location of the SDK's primary `tools` directory to your system `PATH`. The primary `tools/` directory is located at the root of the SDK folder. Adding `tools` to your path lets you run Android Debug Bridge (`adb`) and the other command line http://developer.android.com/guide/developing/tools/index.html[tools] without needing to supply the full path to the tools directory.

 * On Linux, edit your `~/.bash_profile` or `~/.bashrc` file. Look for a line that sets the `PATH` environment variable and add the full path to the `tools/` directory to it. If you don't see a line setting the path, you can add one:

 {{{
export PATH=${PATH}:<your_sdk_dir>/tools
 }}}

 * On a Mac OS X, look in your home directory for `.bash_profile` and proceed as for Linux. You can create the `.bash_profile` if you haven't already set one up on your machine.

 * On Windows, right-click on My Computer, and select Properties. Under the Advanced tab, hit the Environment Variables button, and in the dialog that comes up, double-click on `Path` (under System Variables). Add the full path to the `tools/` directory to the path.

If you will be using the Eclipse IDE as your development environment, the next section describes how to install the Android Development Tools (ADT) plugin and set up Eclipse. __If you choose not to use Eclipse, you can develop Android applications in an IDE of your choice and then compile, debug and deploy using the tools included in the SDK__ (skip to Next Steps).

=== Install the ADT Plugin for Eclipse ===

Android offers a custom plugin for the Eclipse IDE, called Android Development Tools (ADT), that is designed to give you a powerful, integrated environment in which to build Android applications. It extends the capabilites of Eclipse to let you quickly set up new Android projects, create an application UI, add components based on the Android Framework API, debug your applications using the Android SDK tools, and even export signed (or unsigned) APKs (這裡 APK 指的是 "Android Package", 以 `.apk` 為副檔名) in order to distribute your application.

__In general, using Eclipse with ADT is a highly recommended approach to Android development and is the fastest way to get started.__ For complete information about how to install ADT, see http://developer.android.com/sdk/eclipse-adt.html[Installing and Updating ADT].

If you prefer to work in an IDE other than Eclipse, you do not need to install Eclipse or ADT, instead, you can directly use the SDK tools to build and debug your application.

=== Add Android Platforms and Other Components ===

__The Android SDK uses a modular structure that separates the major parts of the SDK — platforms, add-ons, tools, and the API documentation — into a set of separately installable components. The SDK components are available to you for individual download, as needed, from the Android SDK ''repository'' site.__

__The Android SDK starter package includes only a single component: the latest version of the SDK Tools. Included in that component is a tool called ''Android SDK and AVD Manager'' that you can use to download other components from the SDK repository site. (難怪會有 "Starter" 的說法; '''要注意 Android SDK and AVD Manager 也是標準 SDK Tools 的成員, 但因為它具有 UI, 很容易讓人誤以為是 ADT 的一部份''')__ The tool provides a graphical UI that lets you browse the repository, select new or updated components for download, and then install them in your SDK. 

Tip: __The Android SDK and AVD Manager tool is pre-installed in your SDK. (也就是 `<sdk>/Setup.exe` 或 `<sdk>/tools/android`) Using the tool is a key part of performing the ''initial setup'' of your SDK, as well as keeping it up-to-date with the latest platforms, tools, and other components. (這裡的 "initial setup" 指的應該就是下載幾個 Android Platforms, 例如 Hello World Tutorial 就假設讀者安裝有 Android Platform 1.1 跟 1.5)__ For full instructions on how to use the tool, see http://developer.android.com/sdk/adding-components.html#installingComponents[Adding SDK Components].

There are several types of SDK components available:

 * SDK Tools (available pre-installed in the Android SDK package) — Contains the full set of SDK tools for developing, debugging, and testing your application code and UI. You can read about the tools in the http://developer.android.com/guide/developing/tools/index.html[Dev Guide] and access them in the `<sdk>/tools/` directory.

 * Android platforms — An SDK platform component is available for every production Android platform deployable to Android-powered devices. __Each platform component includes a fully compliant Android library and system image, sample code, emulator skins, and any version specific tools.__ For detailed information about each platform, see the overview documents available under the section "Downloadable SDK Components," at left.

 * SDK Add-Ons — SDK add-ons provide a development environment for specific Android external library or a customized (but fully compliant) Android system image. The Android SDK repository offers the Google APIs Add-On, which gives your application access to powerful mapping capabilities through the `com.google.android.maps` library. __You can also add additional repositories, so that you can download other SDK add-ons, where available. '''(一開始就將 CPAN、Maven 之類 Repositories 的概念規劃進來...)'''__

 * Documentation — Contains a local copy of the latest ''multiversion'' documentation for the Android framework API.

__To develop any Android application, even if you are following the http://developer.android.com/resources/tutorials/hello-world.html[Hello World] tutorial, you must download at least one Android platform into your SDK.__ Typically, you will want to download multiple platforms, so that you can build your application on the lowest version you want to support, but test against higher versions that you intend the application to run on. __You can test your applications on different platforms by running in an ''Android Virtual Device (AVD)'' on the ''Android Emulator''.__

For step-by-step instructions on how to use the Android SDK and AVD Manager to add components, see the http://developer.android.com/sdk/adding-components.html[Adding SDK Components] document.

For release notes and other detailed information about individual SDK components, see the documents listed under "Downloadable SDK Components" in the navigation at left.

=== Explore the SDK ===

Once you've installed the SDK and downloaded the platforms, documentation, and add-ons that you need, open the SDK directory and take a look at what's inside.

The table below describes the full SDK directory contents, with components installed.

||<-3> Name || Description ||
||<-3> `add-ons/` || __Contains add-ons to the Android SDK development environment, which let you develop against external libraries that are available on some devices. (跟 Android Platform 的版本無關?)__ ||
||<-3> `docs/` || A full set of documentation in HTML format, including the Developer's Guide, API Reference, and other information. To read the documentation, load the file `offline.html` in a web browser. ||
||<-3> `platforms/` || Contains a set of Android platform versions that you can develop applications against, each in a separate directory. ||
||<|8> ||<-2> `<platform>/`  || Platform version directory, for example "Android 1.6". All platform version directories contain a similar set of files and subdirectory structure. ||
||<|7> || `data/` || Storage area for default fonts and resource definitions. ||
|| `images/` || __Storage area for default disk images, including the Android system image, the default userdata image, the default ramdisk image, and more. The images are used in ''emulator sessions''.__ ||
|| `samples/` || Contains a wide variety of sample applications that you can load as projects into your development environment, compile, and run on the emulator. ||
|| `skins/` || A set of emulator skins available for the platform version. Each skin is designed for a specific screen resolution. ||
|| `templates/` || Storage area for file templates used by the SDK development tools. ||
|| `tools/` || Any development tools that are specific to the platform version. (跟 SDK Tools 不太一樣?) ||
|| `android.jar` || __The Android library used when compiling applications against this platform version. (就這麼一個 JAR 檔!!)__ ||
||<-3> `tools/` || Contains the set of development and profiling tools available to you, such as the `emulator`, the `android` tool, `adb`, `ddms`, and more. ||
||<-3> `SDK Readme.txt` || A file that explains how to perform the initial setup of your SDK, including how to launch the Android SDK and AVD Manager tool on all platforms ||
||<-3> `SDK Setup.exe` || For Windows SDK only. A shortcut that launches the Android SDK and AVD Manager tool, which you use to add components to your SDK. ||

=== Next Steps ===

Once you have completed installation, you are ready to begin developing applications. Here are a few ways you can get started:

Learn about Android:

 * Take a look at the http://developer.android.com/guide/index.html[Dev Guide] and the types of information it provides

 * Read an introduction to Android as a platform in http://developer.android.com/guide/basics/what-is-android.html[What is Android?]

 * Learn about the Android framework and how applications run on it in http://developer.android.com/guide/topics/fundamentals.html[Application Fundamentals]

 * Take a look at the Android framework API specification in the Reference tab

Explore the SDK:

 * Get an overview of the http://developer.android.com/guide/developing/tools/index.html[development tools] that are available to you

 * Read how to develop http://developer.android.com/guide/developing/eclipse-adt.html[in Eclipse/ADT] or http://developer.android.com/guide/developing/other-ide.html[in other IDEs]

Explore some code:

 * Set up a http://developer.android.com/resources/tutorials/hello-world.html[Hello World application] (highly recommended, especially for Eclipse users)

 * Follow the http://developer.android.com/resources/tutorials/notepad/index.html[Notepad Tutorial] to build a full Android application

 * Create a new project for one of the other sample applications included in `<sdk>/platforms/<platform>/samples`, then compile and run it in your development environment

Visit the Android developer groups:

 * Take a look at the http://developer.android.com/resources/community-groups.html[Community] pages to see a list of Android developers groups. In particular, you might want to look at the http://groups.google.com/group/android-developers[Android Developers] group to get a sense for what the Android developer community is like.

=== Troubleshooting ===

'''Ubuntu Linux Notes'''

If you need help installing and configuring Java on your development machine, you might find these resources helpful:

 * https://help.ubuntu.com/community/Java
 * https://help.ubuntu.com/community/JavaInstallation

Here are the steps to install Java and Eclipse, prior to installing the Android SDK and ADT Plugin.

 1. __If you are running a 64-bit distribution on your development machine, you need to install the `ia32-libs` package__ using `apt-get`:

 {{{
apt-get install ia32-libs
 }}}

 2. Next, install Java:

 {{{
apt-get install sun-java6-bin
 }}}

 3. The Ubuntu package manager does not currently offer an Eclipse 3.3 version for download, so we recommend that you download Eclipse from eclipse.org ([[http://www.eclipse.org/downloads/]]). A Java or RCP version of Eclipse is recommended.

 4. Follow the steps given in previous sections to install the SDK and the ADT plugin.

'''Other Linux Notes'''

 * If JDK is already installed on your development computer, please take a moment to make sure that it meets the version requirements listed in the http://developer.android.com/sdk/requirements.html[System Requirements]. __In particular, note that some Linux distributions may include JDK 1.4 or Gnu Compiler for Java, both of which are not supported for Android development.__

== Installing and Updating ADT ==
http://developer.android.com/sdk/eclipse-adt.html @2010/01/15

Android offers a custom plugin for the Eclipse IDE, called Android Development Tools (ADT), that is designed to give you a powerful, integrated environment in which to build Android applications.

ADT extends the capabilites of Eclipse to let you quickly set up new Android projects, create an application UI, add components based on the Android Framework API, debug your applications using the Android SDK tools, and even export signed (or unsigned) APKs in order to distribute your application.

In general, using Eclipse with ADT is a highly recommended approach to Android development and is the fastest way to get started. If you use Eclipse, the ADT plugin gives you an incredible boost in developing Android applications.

To install and update the ADT Plugin, you can take advantage of the Eclipse remote update feature. By setting up a remote update site, you can easily download, install, and check for ADT updates. Alternatively, you can download the latest ADT to your development computer as a ''local site archive''. The sections below provide instructions for both methods.

=== Prepare for Installation ===

Before you begin, take a moment to confirm that your development machine meets the http://developer.android.com/sdk/requirements.html[System Requirements].

If you will be developing in Eclipse with the Android Development Tools (ADT) Plugin — the recommended path if you are new to Android — make sure that you have a suitable version of Eclipse installed on your computer (3.4 or newer is recommended). If you need to install Eclipse, you can download it from this location:

http://www.eclipse.org/downloads/

A Java or RCP version of Eclipse is recommended.

=== Installing the ADT Plugin ===

Once you have the Eclipse IDE installed, as described in Preparing for Installation, above, follow these steps to download the ADT plugin and install it in your respective Eclipse environment.

'''Eclipse 3.4 (Ganymede)'''

 1. Start Eclipse, then select Help > Software Updates.... In the dialog that appears, click the Available Software tab.

 2. Click Add Site...

 3. In the Add Site dialog that appears, enter this URL in the "Location" field:

 {{{
https://dl-ssl.google.com/android/eclipse/
 }}}

 Note: If you have trouble aqcuiring the plugin, try using "http" in the Location URL, instead of "https" (https is preferred for security reasons). Click OK.

 4. Back in the Available Software view, you should see the plugin listed by the URL, with "Developer Tools" nested within it. Select the checkbox next to Developer Tools and click Install...

 5. On the subsequent Install window, "Android DDMS" and "Android Development Tools" should both be checked. Click Next.

 6. Read and accept the license agreement, then click Finish.

 7. Restart Eclipse.

'''Eclipse 3.5 (Galileo)'''

 1. Start Eclipse, then select Help > Install New Softare.

 2. In the Available Software dialog, click Add....

 3. In the Add Site dialog that appears, enter a name for the remote site (for example, "Android Plugin") in the "Name" field. In the "Location" field, enter this URL:

 {{{
https://dl-ssl.google.com/android/eclipse/
 }}}

 Note: If you have trouble aqcuiring the plugin, you can try using "http" in the URL, instead of "https" (https is preferred for security reasons). Click OK.

 4. Back in the Available Software view, you should now see "Developer Tools" added to the list. Select the checkbox next to Developer Tools, which will automatically select the nested tools Android DDMS and Android Development Tools. Click Next.

 5. In the resulting Install Details dialog, the Android DDMS and Android Development Tools features are listed. Click Next to read and accept the license agreement and install any dependencies, then click Finish.

 6. Restart Eclipse.

Now modify your Eclipse preferences to point to the Android SDK directory:

 1. Select Window > Preferences... to open the Preferences panel (Mac OS X: Eclipse > Preferences).
 2. Select Android from the left panel.
 3. For the SDK Location in the main panel, click Browse... and locate your downloaded SDK directory.
 4. Click Apply, then OK.

Done! If you haven't encountered any problems, then you're ready to begin developing Android applications.

:::

== Tutorial / Hello, World ==
http://developer.android.com/resources/tutorials/hello-world.html @2010/01/15

As a developer, you know that the first impression of a development framework is how easy it is to write "Hello, World." Well, on Android, it's pretty easy. It's particularly easy if you're using Eclipse as your IDE, because we've provided a great plugin that handles your project creation and management to greatly speed-up your development cycles.

If you're not using Eclipse, that's okay. Familiarize yourself with http://developer.android.com/guide/developing/other-ide.html[Developing in Other IDEs]. You can then return to this tutorial and ignore anything about Eclipse.

Before you start, you should already have the very latest SDK installed, and if you're using Eclipse, you should have installed the ADT plugin as well. If you have not installed these, see http://developer.android.com/sdk/installing.html[Installing the Android SDK] and return here when you've completed the installation.

=== Create an AVD ===

To learn more about how to use AVDs and the options available to you, refer to the http://developer.android.com/guide/developing/tools/avd.html[Android Virtual Devices] document.

In this tutorial, you will run your application in the Android Emulator. Before you can launch the emulator, you must create an Android Virtual Device (AVD). __An AVD defines the system image and device settings used by the emulator. ('''可以將 AVD 想像成手邊的 Android 手機, 有不同的 Hardware Profiles.''' 平常就可以透過 Android SDK and AVD Manager 將某個 Virtual Device 執行起來, 佈署的程式或修改過的設定都會保留)__

To create an AVD, use the "`android`" tool provided in the Android SDK. (也就是 `android` 可以 UI/CLI 兩用) Open a command prompt or terminal, navigate to the `tools/` directory in the SDK package and execute:

 {{{
android create avd --target 2 --name my_avd
 }}}

The tool now asks if you would like to create a ''custom hardware profile''. For the time being, press Return to skip it ("no" is the default response). That's it. This configures an AVD named `"my_avd"` (`~/.android/avd/my_avd.avd`) that uses the Android 1.5 platform. The AVD is now ready for use in the emulator.

按照下面 Create a New Android Project 步驟的截圖, 作者在本機上裝有 Android 1.1 與 1.5, 這說明了為何 `--target 2` 會對應到 Android 1.5. 雖然 Tutorial 不該做這樣的假設...

__In the above command, the `--target` option is required and specifies the ''deployment target'' to run on the emulator. The `--name` option is also required and defines the name for the new AVD.__

 {{{
% android list target
Available Android targets:
id: 1 or "android-5"
     Name: Android 2.0
     Type: Platform
     API level: 5
     Revision: 1
     Skins: QVGA, HVGA (default), WQVGA432, WQVGA400, WVGA800, WVGA854
id: 2 or "android-6"
     Name: Android 2.0.1
     Type: Platform
     API level: 6
     Revision: 1
     Skins: QVGA, HVGA (default), WQVGA432, WQVGA400, WVGA800, WVGA854
id: 3 or "android-7"
     Name: Android 2.1
     Type: Platform
     API level: 7
     Revision: 1
     Skins: QVGA, HVGA (default), WQVGA432, WQVGA400, WVGA800, WVGA854
 }}}

=== Create a New Android Project ===

After you've created an AVD, the next step is to start a new Android project in Eclipse.

 1. From Eclipse, select File > New > Project. <<BR>> If the ADT Plugin for Eclipse has been successfully installed, the resulting dialog should have a folder labeled "Android" which should contain "Android Project". (After you create one or more Android projects, an entry for "Android XML File" will also be available; 另外還有 "Android Test Project")

 2. Select "Android Project" and click Next.

 3. Fill in the project details with the following values: (Click Finish.)

    * Project name: `HelloAndroid`
    * Application name: `Hello, Android`
    * Package name: `com.example.helloandroid` (or your own private namespace)
    * Create Activity: `HelloAndroid`
    * Min SDK Version: `2`

Here is a description of each field:

 * Project Name - This is the Eclipse Project name — the name of the directory that will contain the project files.

 * Application Name - This is the human-readable title for your application — the name that will appear on the Android device.

 * Package Name - This is the package namespace (following the same rules as for packages in the Java programming language) that you want all your source code to reside under. This also sets the package name under which the stub `Activity` will be generated.

 . __'''Your package name must be unique across all packages installed on the Android system;''' for this reason, it's very important to use a standard domain-style package for your applications.__ The example above uses the `"com.example"` namespace, which is a namespace reserved for example documentation — when you develop your own applications, you should use a namespace that's appropriate to your organization or entity.

 * Create Activity - This is the name for the stub class that will be generated by the plugin. This will be a subclass of Android's `Activity` class. __'''An `Activity` is simply a class that can run and do work.''' It can create a UI if it chooses, but it doesn't need to.__ As the checkbox suggests, this is optional, but an `Activity` is almost always used as the basis for an application.

 * Min SDK Version - This value specifies the ''minimum API Level'' required by your application. If the API Level entered here matches the API Level provided by one of the available targets, then that Build Target will be automatically selected (in this case, entering "2" as the API Level will select the Android 1.1 target). __With each new version of the Android system image and Android SDK, there have likely been additions or changes made to the APIs. When this occurs, a new API Level is assigned to the system image to regulate(限制) which applications are allowed to be run. If an application requires an API Level that is higher than the level supported by the device, then the application will not be installed.__

Other fields: The checkbox for "Use default location" allows you to change the location on disk where the project's files will be generated and stored. "Build Target" is the platform target that your application will be compiled against (this should be selected automatically, based on your Min SDK Version).

Notice that the "Build Target" you've selected uses the Android 1.1 platform. This means that your application will be compiled against the Android 1.1 platform library. __If you recall, the AVD created above runs on the Android 1.5 platform. These don't have to match; '''Android applications are forward-compatible,''' so an application built against the 1.1 platform library will run normally on the 1.5 platform. The reverse is not true.__

Your Android project is now ready. It should be visible in the Package Explorer on the left. Open the `HelloAndroid.java` file, located inside HelloAndroid > src > com.example.helloandroid). It should look like this:

 {{{
package com.example.helloandroid;

import android.app.Activity;
import android.os.Bundle;

public class HelloAndroid extends Activity {
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main); // 載入 XML Layout
  }
}
 }}}

Notice that the class is based on the `Activity` class. __An `Activity` is a single ''application entity'' that is used to perform ''actions''. '''An application may have many separate activities, but the user interacts with them one at a time.''' The `onCreate()` method will be called by the Android system when your `Activity` starts — it is where you should perform all initialization and UI setup. '''An activity is not required to have a user interface, but usually will.'''__

Now let's modify some code! 

=== Construct the UI ===

Take a look at the revised code below and then make the same changes to your `HelloAndroid` class. The bold items are lines that have been added.

 {{{
package com.android.helloandroid;

import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class HelloAndroid extends Activity {
 /** Called when the activity is first created. */
 @Override
 public void onCreate(Bundle savedInstanceState) {
   super.onCreate(savedInstanceState);
   TextView tv = new TextView(this);
   tv.setText("Hello, Android");
   setContentView(tv);
 }
}
 }}}

Tip: An easy way to add import packages to your project is to press Ctrl-Shift-O (Cmd-Shift-O, on Mac). This is an Eclipse shortcut that identifies missing packages based on your code and adds them for you.

__An Android user interface is composed of ''hierarchies of objects'' (也因此 XML Layout 才有機會取代 Programmatic UI Layout) called `View`s. A `View` is a ''drawable object'' used as an element in your UI layout, such as a button, image, or (in this case) a text label.__ Each of these objects is a subclass of the `View` class and the subclass that handles text is `TextView`.

In this change, you create a `TextView` with the class constructor, which accepts an Android `Context` instance as its parameter. __'''A `Context` is a ''handle'' to the system; it provides services like resolving resources, obtaining access to databases and preferences, and so on. (未來應該會有人發展出 Android 專用的 IoC Container, 到時候就不用手動傳遞 `Context` 了[...])''' The `Activity` class inherits from `Context`, and because your `HelloAndroid` class is a subclass of `Activity`, it is also a `Context`. So, you can pass this as your `Context` reference to the `TextView`.__

Next, you define the text content with `setText(CharSequence)`.

Finally, you pass the `TextView` to `setContentView()` in order to display it as the content for the `Activity` UI. If your `Activity` doesn't call this method, then no UI is present and the system will display a blank screen.

There it is — "Hello, World" in Android! The next step, of course, is to see it running.

=== Run the Application ===

The Eclipse plugin makes it very easy to run your applications:

 1. Select Run > Run.
 2. Select "Android Application". (會自動依 API Level 找出適用的 AVD)

To learn more about creating and editing run configurations in Eclipse, refer to http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig[Developing In Eclipse, with ADT].

The Eclipse ADT will automatically create a new run configuration for your project and the Android Emulator will automatically launch. Once the emulator is booted up, your application will appear after a moment. You should now see something like this: (剛開起來時 CPU 的 Loading 還滿高的, 要等 Device 開機完成後才會顯示 "Hello, Android" 的字樣; 修改程式後再執行一次即可, 不用重新啟動 Device)

{{attachment:hello_world_5.png}}

The "Hello, Android" you see in the grey bar is actually the application title. __The Eclipse plugin creates this automatically (the string is defined in the `res/values/strings.xml` file and referenced by your `AndroidManifest.xml` file; 從專案建立時的 Application Name 而來. 原先以為只有 XML Layouts 才能引用 String Resources, 沒想到 `AndroidManifest.xml` 也可以這麼做).__ The text below the title is the actual text that you have created in the `TextView` object.

That concludes the basic "Hello World" tutorial, but you should continue reading for some more valuable information about developing Android applications.

=== Upgrade the UI to an XML Layout ===

The "Hello, World" example you just completed uses what is called a "programmatic" UI layout. This means that you constructed and built your application's UI directly in source code. __If you've done much UI programming, you're probably familiar with how brittle(脆弱的) that approach can sometimes be: small changes in layout can result in big source-code headaches. '''It's also very easy to forget to properly connect `View`s together, which can result in errors in your layout and wasted time debugging your code. (XML Layout 是 UI 設計上的趨勢 - XUL 跟 JavaFX 就是最好的例子, 另外聽說 GWT 2.0 也將支援 XML Layout)'''__

That's why Android provides an alternate ''UI construction model'': XML-based layout files. The easiest way to explain this concept is to show an example. Here's an XML layout file that is identical in behavior to the programmatically-constructed example:

 {{{
<?xml version="1.0" encoding="utf-8"?>
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="fill_parent"
  android:layout_height="fill_parent"
  android:text="@string/hello"/>
 }}}

__The general structure of an Android XML layout file is simple: it's a tree of XML elements, wherein each node is the name of a `View` class (this example, however, is just one `View` element; GUI 元件之間就有層層相疊的關係, 因此 XML 樹狀結構很適合用來表現 GUI 的構成). You can use the name of any class that extends `View` as an element in your XML layouts, including custom `View` classes you define in your own code. This structure makes it very easy to quickly build up UIs, using a more simple structure and syntax than you would use in a programmatic layout. '''This model is inspired by the web development model, wherein you can separate the presentation of your application (its UI) from the application logic used to fetch and fill in data.'''__

In the above XML example, there's just one `View` element: the `TextView`, which has four XML attributes. Here's a summary of what they mean:

|| Attribute || Meaning ||
|| `xmlns:android` || __This is an XML namespace declaration that tells the Android tools that you are going to refer to common attributes defined in the Android namespace. '''The outermost tag in every Android layout file must have this attribute.'''__ ||
|| `android:layout_width` || This attribute defines how much of the available width on the screen this `View` should consume. In this case, it's the only `View` so you want it to take up the entire screen, which is what a value of `"fill_parent"` means. ||
|| `android:layout_height` || This is just like `android:layout_width`, except that it refers to available screen height. ||
|| `android:text` || This sets the text that the `TextView` should display. __In this example, you use a ''string resource'' instead of a hard-coded string value. The hello string is defined in the `res/values/strings.xml` file.__ This is the recommended practice for inserting strings to your application, because it makes the localization of your application to other languages graceful, without need to hard-code changes to the layout file. For more information, see http://developer.android.com/guide/topics/resources/resources-i18n.html[Resources and Internationalization]. ||

__These XML layout files belong in the `res/layout/` directory of your project. The "res" is short for "resources" and the directory contains all the ''non-code assets'' that your application requires. In addition to layout files, resources also include assets such as images, sounds, and localized strings.__

__Landscape layout - When you want a different design for landscape (切換到水平檢視時), put your layout XML file inside `/res/layout-land`. '''Android will automatically look here when the layout changes. Without this special landscape layout defined, Android will ''stretch'' the default layout. (當然程式也可以要求固定水平或垂直顯示)'''__

The Eclipse plugin automatically creates one of these layout files for you: `main.xml`. In the "Hello World" application you just completed, this file was ''ignored'' and you created a layout programmatically. __This was meant to teach you more about the Android framework, but you should almost always define your layout in an XML file instead of in your code.__ The following procedures will instruct you how to change your existing application to use an XML layout.

 1.  In the Eclipse Package Explorer, expand the `/res/layout/` folder and open `main.xml` (once opened, you might need to click the "main.xml" tab at the bottom of the window to see the XML source). Replace the contents with the following XML:

 {{{
<?xml version="1.0" encoding="utf-8"?>
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="fill_parent"
  android:layout_height="fill_parent"
  android:text="@string/hello"/>
 }}}

 Save the file.

 2. Inside the `res/values/` folder, open `strings.xml`. This is where you should save all ''default'' (從多國語言的角度來看) text strings for your user interface. If you're using Eclipse, then ADT will have started you with two strings, `hello` and `app_name`. Revise `hello` to something else. Perhaps `"Hello, Android! I am a string resource!"` The entire file should now look like this:

 {{{
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <string name="hello">Hello, Android! I am a string resource!</string>
  <string name="app_name">Hello, Android</string>
</resources>
 }}}

 3. __Now open and modify your `HelloAndroid` class use the XML layout.__ Edit the file to look like this:

 {{{
package com.example.helloandroid;

import android.app.Activity;
import android.os.Bundle;

public class HelloAndroid extends Activity {
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
  }
}
 }}}

When you make this change, type it by hand to try the code-completion feature. As you begin typing `"R.layout.main"` the plugin will offer you suggestions. You'll find that it helps in a lot of situations.

Instead of passing `setContentView()` a `View` object, you give it a reference to the ''layout resource''. __'''The resource is identified as `R.layout.main` (型態是 `int`; 許多方法都提供有 Resource ID 的版本), which is actually a ''compiled object representation'' of the layout defined in `/res/layout/main.xml`.''' The Eclipse plugin automatically creates this reference for you inside the project's `R.java` class. (位在 `gen/` 資料夾下; 這種將 `res/` 與 `gen/` 拆出來的做法跟 Maven 很像, 未來導入 Maven Building 應該會比較順利...) If you're not using Eclipse, then the `R.java` class will be generated for you when you run Ant to build the application.__ (More about the `R` class in a moment.)

Now re-run your application — because you've created a launch configuration, all you need to do is click the green arrow icon to run, or select Run > Run History > Android Activity. Other than the change to the `TextView` string, the application looks the same. After all, the point was to show that the two different layout approaches produce identical results.

Tip: Use the shortcut Ctrl-F11 (Cmd-Shift-F11, on Mac) to run your currently visible application.

Continue reading for an introduction to debugging and a little more information on using other IDEs. When you're ready to learn more, read http://developer.android.com/guide/topics/fundamentals.html[Application Fundamentals] for an introduction to all the elements that make Android applications work. Also refer to the http://developer.android.com/guide/index.html[Developer's Guide] introduction page for an overview of the Dev Guide documentation.

==== R class ====

In Eclipse, open the file named `R.java` (in the `gen/ [Generated Java Files]` folder). It should look something like this:

 {{{
package com.example.helloandroid;

public final class R {
  public static final class attr {
  }

  public static final class drawable {
    public static final int icon=0x7f020000;
  }

  public static final class layout {
    public static final int main=0x7f030000;
  }

  public static final class string {
    public static final int app_name=0x7f040001;
    public static final int hello=0x7f040000;
  }
}
 }}}

__A project's `R.java` file is an index into all the resources defined in the file. '''You use this class in your source code as a sort of short-hand way to refer to resources you've included in your project. (這種用法也出現在標準的 Framework API 裡, 例如 `android.R.drawable.ic_delete` 對應到標準的 "刪除" 圖示)'''__ This is particularly powerful with the code-completion features of IDEs like Eclipse because it lets you quickly and interactively locate the specific reference you're looking for.

It's possible yours looks slighly different than this (perhaps the hexadecimal values are different). __For now, notice the inner class named `"layout"`, and its member field `"main"`. The Eclipse plugin noticed the XML layout file named `main.xml` and generated a class for it here. As you add other resources to your project (such as strings in the `res/values/strings.xml` file or drawables inside the `res/drawable/` direcory) you'll see `R.java` change to keep up(跟上).__

2010-01-24 實驗確認在 `res/layout`、`res/values`、`res/drawable` 下新增檔案時, 會在 `R.java` 上產生不同的反應:

 {{{
public final class R {

  public static final class attr {
  }

  public static final class drawable {
    public static final int hello=0x7f020000; <-- 從 icon.jpg 複製出 icon.png 時會產生衝突, 因為只取主檔名
    public static final int icon=0x7f020001;
  }

  public static final class layout {
    public static final int main=0x7f030000;
    public static final int other=0x7f030001; <-- 從 main.xml 複製出 other.xml
  }

  public static final class string { <-- 從 strings.xml 複製出 others.xml; 檔名不重要, 重要的是 Key 值不能重複
    public static final int app_name=0x7f040003;
    public static final int app_name2=0x7f040001; <-- others.xml 裡的 app_name 要改掉才不會有衝突 (單一命名空間)
    public static final int hello=0x7f040002;
    public static final int hello2=0x7f040000;
  }

}
 }}}

When not using Eclipse, this class file will be generated for you at build time (with the Ant tool).

__You should never edit this file by hand.__

=== Debug Your Project ===

The Android Plugin for Eclipse also has excellent integration with the Eclipse debugger. To demonstrate this, introduce a bug into your code. Change your `HelloAndroid` source code to look like this:

 {{{
package com.android.helloandroid;

import android.app.Activity;
import android.os.Bundle;

public class HelloAndroid extends Activity {
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    Object o = null;
    o.toString();
    setContentView(R.layout.main);
  }
}
 }}}

This change simply introduces a `NullPointerException` into your code. If you run your application again, you'll eventually see this:

{{attachment:hello_world_8.png}} <<BR>> Press "Force Quit" to terminate the application and close the emulator window.

To find out more about the error, set a breakpoint in your source code on the line `Object o = null;` (double-click on the marker bar next to the source code line). Then select Run > Debug History > Hello, Android from the menu to enter debug mode. __Your app will restart in the emulator, but this time it will suspend when it reaches the breakpoint you set. You can then step through the code in Eclipse's Debug Perspective, just as you would for any other application.__

{{attachment:hello_world_9.png}}

=== Creating the Project without Eclipse ===

If you don't use Eclipse (such as if you prefer another IDE, or simply use text editors and command line tools) then the Eclipse plugin can't help you. __Don't worry though — you don't lose any functionality just because you don't use Eclipse.__

__The Android Plugin for Eclipse is really just a ''wrapper'' around a set of tools included with the Android SDK. (These tools, like the `emulator`, `aapt`, `adb`, `ddms`, and others are http://developer.android.com/guide/developing/tools/index.html[documented elsewhere].) Thus, it's possible to wrap those tools with another tool, such as an 'ant' build file.__

The Android SDK includes a tool named `"android"` that can be used to create all the source code and directory stubs for your project, as well as an ant-compatible `build.xml` file. This allows you to build your project from the command line, or integrate it with the IDE of your choice.

For example, to create a `HelloAndroid` project similar to the one created in Eclipse, use this command: (沒想到 `android` 這個指令能做的事還真多!!)

 {{{
android create project \
    --package com.android.helloandroid \
    --activity HelloAndroid \ 
    --target 2 \
    --path <path-to-your-project>/HelloAndroid 
 }}}

This creates the required folders and files for the project at the location defined by the path.

For more information on how to use the SDK tools to create and build projects, please read http://developer.android.com/guide/developing/other-ide.html[Developing in Other IDEs].

== Tutorial / Notepad ==
http://developer.android.com/resources/tutorials/notepad/index.html @2010/01/24

This tutorial on writing a notepad application gives you a "hands-on" introduction to the Android framework and the tools you use to build applications on it. Starting from a preconfigured project file, it guides you through the process of developing a simple notepad application and provides concrete examples of how to set up the project, develop the application logic and user interface, and then compile and run the application.

The tutorial presents the application development as a set of exercises (see below), each consisting of several steps. You should follow the steps in each exercise to gradually build and refine your application. The exercises explain each step in detail and provide all the sample code you need to complete the application.

When you are finished with the tutorial, you will have created a functioning Android application and will have learned many of the most important concepts in Android development. If you want to add more complex features to your application, you can examine the code in an alternative implementation of a http://developer.android.com/resources/samples/NotePad/index.html[Note Pad] application, in the http://developer.android.com/resources/samples/index.html[Sample Code] section.

=== Who Should Use this Tutorial ===

This tutorial is designed for experienced developers, especially those with knowledge of the Java programming language. If you haven't written Java applications before, you can still use the tutorial, but you might need to work at a slower pace.

Also note that this tutorial uses the Eclipse development environment, with the Android plugin installed. If you are not using Eclipse, you can follow the exercises and build the application, but you will need to determine how to accomplish the Eclipse-specific steps in your environment.

=== Preparing for the Exercises ===

The tutorial assumes that you have some familiarity with basic Android application concepts and terminology. If you are not, you should read http://developer.android.com/guide/topics/fundamentals.html[Application Fundamentals] before continuing.

This tutorial also builds on the introductory information provided in the http://developer.android.com/resources/tutorials/hello-world.html[Hello World] tutorial, which explains how to set up your Eclipse environment for building Android applications. We recommend you complete the Hello World tutorial before starting this one.

To prepare for this lesson:

 1. Download the http://developer.android.com/resources/tutorials/notepad/codelab/NotepadCodeLab.zip[project exercises archive (.zip)].
 2. Unpack the archive file to a suitable location on your machine.
 3. Open the `NotepadCodeLab` folder.

Inside the `NotepadCodeLab` folder, you should see six project files: `Notepadv1`, `Notepadv2`, `Notepadv3`, `Notepadv1Solution`, `Notepadv2Solution` and `Notepadv3Solution`. The `Notepadv#` projects are the starting points for each of the exercises, while the `Notepadv#Solution` projects are the exercise solutions. __If you are having trouble with a particular exercise, you can compare your current work against the exercise solution.__

===  Exercises ===

The table below lists the tutorial exercises and describes the development areas that each covers. Each exercise assumes that you have completed any previous exercises.

|| http://developer.android.com/resources/tutorials/notepad/notepad-ex1.html[Exercise 1] || Start here. Construct a simple notes list that lets the user add new notes but not edit them. Demonstrates the basics of `ListActivity` and creating and handling ''menu options'' (即按下 Menu 後, 出現在螢幕下方的選單). Uses a SQLite database to store the notes. ||
|| http://developer.android.com/resources/tutorials/notepad/notepad-ex2.html[Exercise 2] || Add a second `Activity` to the application. Demonstrates constructing a new `Activity`, adding it to the Android manifest, passing data between the activities, and using more advanced screen layout. Also shows how to invoke another `Activity` to return a result, using `startActivityForResult()`. ||
|| http://developer.android.com/resources/tutorials/notepad/notepad-ex3.html[Exercise 3] || Add handling of life-cycle events to the application, to let it ''maintain application state across the life cycle''. ||
|| http://developer.android.com/resources/tutorials/notepad/notepad-extra-credit.html[Extra Credit] || Demonstrates how to use the Eclipse debugger and how you can use it to view life-cycle events as they are generated. This section is optional but highly recommended. ||

=== Other Resources and Further Learning ===

 * For a lighter but broader introduction to concepts not covered in the tutorial, take a look at http://developer.android.com/resources/faq/commontasks.html[Common Android Tasks].

 * __The Android SDK includes a variety of fully functioning sample applications that make excellent opportunities for further learning.__ You can find the sample applications in the `samples/` directory of your downloaded SDK, or browser them here, in the Sample Code section.

 * This tutorial draws from the full Notepad application included in the `samples/` directory of the SDK, though it does not match it exactly. When you are done with the tutorial, it is highly recommended that you take a closer look at this version of the Notepad application, as it demonstrates a variety of interesting additions for your application, such as:

   * Setting up a custom striped(有條紋的?) list for the list of notes.
   * Creating a custom text edit view that overrides the `draw()` method to make it look like a lined notepad.
   * Implementing a full `ContentProvider` for notes.
   * Reverting and discarding edits instead of just automatically saving them.

== Tutorial / Notepad / Exercise 1 ==
http://developer.android.com/resources/tutorials/notepad/notepad-ex1.html @2010/01/30

In this exercise, you will construct a simple notes list that lets the user add new notes but not edit them. The exercise demonstrates:

 * The basics of `ListActivities` and creating and handling menu options.

 * How to use a SQLite database to store the notes.

 * __How to bind data from a database cursor into a `ListView` using a `SimpleCursorAdapter`.__

 * The basics of screen layouts, including how to lay out a list view, how you can add items to the ''activity menu'', and how the activity handles those menu selections.

=== Step 1 ===

Open up the `Notepadv1` project in Eclipse.

`Notepadv1` is a project that is provided as a starting point. It takes care of some of the boilerplate work that you have already seen if you followed the Hello, World tutorial.

 1. Start a new Android Project by clicking File > New > Android Project.

 2. In the New Android Project dialog, select Create project from existing source.

 3. Click Browse and navigate to where you copied the `NotepadCodeLab` (downloaded during setup) and select `Notepadv1`.

 4. The Project Name and other properties should be automatically filled for you. __You must select the Build Target—we recommend selecting a target with the lowest platform version available. Also add an integer to the Min SDK Version field that matches the API Level of the selected Build Target. (否則會出現 "An SDK Target must be specified" 的錯誤; 在 Netbook 開發時畫面較小, 可以用 Alt+F7 跟 Alt+F8 來做視窗的 Move 跟 Resize)__

 5. Click Finish. The `Notepadv1` project should open and be visible in your Eclipse package explorer.

If you see an error about `AndroidManifest.xml`, or some problems related to an Android zip file, right click on the project and select Android Tools > Fix Project Properties. (The project is looking in the wrong location for the library file, this will fix it for you.)

=== Step 2 ===

 {{{#!wiki note
'''Accessing and modifying data'''

For this exercise, we are using a SQLite database to store our data. __This is useful if only your application will need to access or modify the data. If you wish for other activities to access or modify the data, you have to expose the data using a `ContentProvider`.__

If you are interested, you can find out more about http://developer.android.com/guide/topics/providers/content-providers.html[content providers] or the whole subject of http://developer.android.com/guide/topics/data/data-storage.html[Data Storage]. The Notepad sample in the `samples/` folder of the SDK also has an example of how to create a `ContentProvider`.
 }}}

__Take a look at the `NotesDbAdapter` class — this class is provided to ''encapsulate data access'' to a SQLite database that will hold our notes data and allow us to update it. (這正是 DAO 的實現)__

At the top of the class are some constant definitions that will be used in the application to look up data from the proper field names in the database. There is also a database creation string defined, which is used to create a new database schema if one doesn't exist already.

Our database will have the name `data`, and have a single table called `notes`, which in turn has three fields: `_id`, `title` and `body`. __The `_id` is named with an underscore convention used in a number of places inside the Android SDK and helps keep a track of state.__ The `_id` usually has to be specified when querying or updating the database (in the ''column projections'' and so on). The other two fields are simple text fields that will store data.

__The constructor for `NotesDbAdapter` takes a `Context`, which allows it to communicate with aspects of the Android operating system. This is quite common for classes that need to touch the Android system in some way. The `Activity` class implements the `Context` class, so usually you will just pass `this` from your `Activity`, when needing a `Context`.__

The `open()` method calls up(召喚) an instance of `DatabaseHelper`, which is our ''local implementation'' (被實作成 Private Class) of the `SQLiteOpenHelper` class. It calls `getWritableDatabase()`, which handles creating/opening a database for us.

`close()` just closes the database, releasing resources related to the connection.

`createNote()` takes strings for the title and body of a new note, then creates that note in the database. Assuming the new note is created successfully, the method also returns the row `_id` value for the newly created note.

`deleteNote()` takes a `rowId` for a particular note, and deletes that note from the database.

`fetchAllNotes()` issues a query to return a `Cursor` over all notes in the database. The `query()` call is worth examination and understanding. The first field is the name of the database table to query (in this case `DATABASE_TABLE` is `"notes"`). The next is the list of columns we want returned, in this case we want the `_id`, `title` and `body` columns so these are specified in the `String` array. __The remaining fields are, in order: `selection`, `selectionArgs`, `groupBy`, `having` and `orderBy`. Having these all `null` means we want all data, need no grouping, and will take the ''default order''.__ See http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html[SQLiteDatabase] for more details.

Note: __A `Cursor` is returned rather than a collection of rows. This allows Android to use resources efficiently -- instead of putting lots of data straight into memory '''the cursor will retrieve and release data as it is needed, which is much more efficient for tables with lots of rows.'''__

`fetchNote()` is similar to `fetchAllNotes()` but just gets one note with the `rowId` we specify. It uses a slightly different version of the `SQLiteDatabase` `query()` method. The first parameter (set `true`) indicates that we are interested in one ''distinct'' result. The `selection` parameter (the fourth parameter) has been specified to search only for the row `"where _id ="` the `rowId` we passed in. So we are returned a `Cursor` on the one row. (只有一筆資料為什麼還要傳回 `Cursor`?)

And finally, `updateNote()` takes a `rowId`, `title` and `body`, and uses a `ContentValues` instance to update the note of the given `rowId`.

=== Step 3 ===

 {{{#!wiki note
Layouts and activities

__Most `Activity` classes will have a layout associated with them. '''The layout will be the "face" of the `Activity` to the user.'''__ In this case our layout will take over the whole screen and provide a list of notes.

__Full screen layouts are not the only option for an `Activity` however.__ You might also want to use a floating layout (for example, a dialog or alert), or perhaps you don't need a layout at all (the `Activity` will be invisible to the user unless you specify some kind of layout for it to use).
 }}}

Open the `notepad_list.xml` file in `res/layout` and take a look at it. (You may have to hit the xml tab, at the bottom, in order to view the XML markup.)

This is a mostly-empty layout definition file. Here are some things you should know about a layout file:

 * All Android layout files must start with the XML header line: `<?xml version="1.0" encoding="utf-8"?>`.

 * The next definition will often (but not always) be a layout definition of some kind, in this case a `LinearLayout`.

 * The XML namespace of Android should always be defined in the top level component or layout in the XML so that `android:` tags can be used through the rest of the file:

 {{{
xmlns:android="http://schemas.android.com/apk/res/android"
 }}}

=== Step 4 ===

We need to create the layout to hold our list. Add code inside of the `LinearLayout` element so the whole file looks like this:

 {{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content">

  <ListView android:id="@android:id/list"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"/>
  <TextView android:id="@android:id/empty"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/no_notes"/>
</LinearLayout>
 }}}

 * __The `@` symbol in the `id` strings of the `ListView` and `TextView` tags means that '''the XML parser should parse and expand the rest of the `id` string and use an ''ID resource''.'''__

 * __The `ListView` and `TextView` can be thought as two alternative(二選一的) views, only one of which will be displayed at once.__ `ListView` will be used when there are notes to be shown, while the `TextView` (which has a default value of "No Notes Yet!" defined as a string resource in `res/values/strings.xml`) will be displayed if there aren't any notes to display.

 * __The `list` and `empty` IDs are provided for us by the Android platform, so, we must prefix the `id` with `android:` (e.g., `@android:id/list`).__

 * The `View` with the `empty` id is used automatically when the `ListAdapter` has no data for the `ListView`. __The `ListAdapter` knows to look for this name by default.__ Alternatively, you could change the default empty view by using `setEmptyView(View)` on the `ListView`.

More broadly, the `android.R` class is a set of predefined resources provided for you by the platform, while your project's `R` class is the set of resources your project has defined. __'''Resources found in the `android.R` resource class can be used in the XML files by using the `android:` name space prefix'''__ (as we see here).

=== Step 5 ===

 {{{#!wiki note
'''Resources and the `R` class'''

The folders under `res/` in the Eclipse project are for resources. There is a specific structure to the folders and files under `res/`.

__Resources defined in these folders and files will have corresponding entries in the `R` class allowing them to be easily accessed and used from your application.__ The `R` class is automatically generated using the contents of the `res/` folder by the eclipse plugin (or by `aapt` if you use the command line tools). Furthermore, they will be bundled and deployed for you as part of the application.
 }}}

To make the list of notes in the `ListView`, we also need to define a `View` for each row:

 1. Create a new file under `res/layout` called `notes_row.xml`.

 2. Add the following contents (note: again the XML header is used, and the first node defines the Android XML namespace)

    {{{
<?xml version="1.0" encoding="utf-8"?>
<TextView android:id="@+id/text1"
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"/>
    }}}

     . This is the `View` that will be used for each notes title row — it has only one text field in it.

     . In this case we ''create'' a new id called `text1`. __The `+` after the `@` in the `id` string indicates that the `id` should be automatically created ''as a resource'' if it does not already exist, so we are defining `text1` ''on the fly'' and then using it. '''(這個 ID 即將用在 `findViewById()` 裡)'''__

 3. Save the file.

Open the `R.java` class in the project and look at it, you should see new definitions for `notes_row` and `text1` (our new definitions) meaning we can now gain access to these from the our code.

=== Step 6 ===

Next, open the `Notepadv1` class in the source. In the following steps, we are going to alter this class to become a ''list adapter'' and display our notes, and also allow us to add new notes.

`Notepadv1` will inherit from a subclass of `Activity` called a `ListActivity`, which has extra functionality to accommodate the kinds of things you might want to do with a list, for example: displaying an arbitrary number of list items in rows on the screen, moving through the list items, and allowing them to be selected.

Take a look through the existing code in `Notepadv1` class. There is a currently an unused private field called `mNoteNumber` that we will use to create numbered note titles. (計數器, 避免不同 Notes 有一樣的 Title)

There are also three override methods defined: `onCreate`, `onCreateOptionsMenu` and `onOptionsItemSelected`; we need to fill these out:

 * `onCreate()` is called when the activity is started — it is a little like the "main" method for an `Activity`. We use this to set up resources and state for the activity when it is running.

 * `onCreateOptionsMenu()` is used to populate the menu for the `Activity`. __This is shown when the user hits the menu button, and has a list of options they can select (like "Create Note").__

 * `onOptionsItemSelected()` is the other half of the menu equation(等式?), it is used to handle events generated from the menu (e.g., when the user selects the "Create Note" item).

=== Step 7 ===

Change the inheritance of `Notepadv1` from `Activity` to `ListActivity`:

 {{{
public class Notepadv1 extends ListActivity
 }}}

Note: you will have to import `ListActivity` into the `Notepadv1` class using Eclipse, ctrl-shift-O on Windows or Linux, or cmd-shift-O on the Mac (organize imports) will do this for you after you've written the above change.

=== Step 8 ===

Fill out the body of the `onCreate()` method.

Here we will set the title for the `Activity` (shown at the top of the screen), use the `notepad_list` layout we created in XML, set up the `NotesDbAdapter` instance that will access notes data, and populate the list with the available note titles:

 1. In the `onCreate` method, call `super.onCreate()` with the `savedInstanceState` parameter that's passed in.

 2. Call `setContentView()` and pass `R.layout.notepad_list`.

 3. At the top of the class, create a new private class field called `mDbHelper` of class `NotesDbAdapter`.

 4. Back in the `onCreate` method, construct a new `NotesDbAdapter` instance and assign it to the `mDbHelper` field (pass this into the constructor for `DBHelper`)

 5. Call the `open()` method on `mDbHelper` to open (or create) the database.

 6. Finally, call a new method `fillData()`, which will get the data and populate the `ListView` using the helper — we haven't defined this method yet.

`onCreate()` should now look like this:

 {{{
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.notepad_list);
    mDbHelper = new NotesDbAdapter(this);
    mDbHelper.open();
    fillData();
}
 }}}

And be sure you have the `mDbHelper` field definition (right under the `mNoteNumber` definition):

 {{{
private NotesDbAdapter mDbHelper;
 }}}

=== Step 9 ===

 {{{#!wiki note
'''More on menus'''

The notepad application we are constructing only scratches the surface with menus.

__You can also add ''shortcut keys'' for menu items, create ''submenus'' and even add menu items ''to other applications''!.__
 }}}

Fill out the body of the `onCreateOptionsMenu()` method.

We will now create the "Add Item" button that can be accessed by pressing the menu button on the device. We'll specify that it occupy the first position in the menu.

 1. In `strings.xml` resource (under `res/values`), add a new string named `"menu_insert"` with its value set to `Add Item`:

 {{{
<string name="menu_insert">Add Item</string>
 }}}

 Then save the file and return to `Notepadv1`.

2. Create a ''menu position constant'' at the top of the class:

 {{{
public static final int INSERT_ID = Menu.FIRST;
 }}}

 3. __In the `onCreateOptionsMenu()` method, change the super call so we capture the `boolean` return as result. We'll return this value at the end. (由上層來決定要傳回的布林值?)__

 4. Then add the menu item with `menu.add()`.

The whole method should now look like this:

 {{{
@Override
public boolean onCreateOptionsMenu(Menu menu) {
  boolean result = super.onCreateOptionsMenu(menu);
  menu.add(0, INSERT_ID, 0, R.string.menu_insert);
  return result;
}
 }}}

__The arguments passed to `add()` indicate: a ''group identifier'' for this menu (none, in this case), a unique ID (defined above), the ''order'' of the item (zero indicates no preference; 用 `Menu.NONE` 會比較好), and the resource of the string to use for the item.__

=== Step 10 ===

Fill out the body of the `onOptionsItemSelected()` method:

This is going to handle our new "Add Note" menu item. When this is selected, the `onOptionsItemSelected()` method will be called with the `item.getId()` set to `INSERT_ID` (the constant we used to identify the menu item). We can detect this, and take the appropriate actions:

 1. __The `super.onOptionsItemSelected(item)` method call goes at the end of this method — we want to catch our events first! (搞不清楚)__

 2. __Write a switch statement on `item.getItemId()`. In the case of `INSERT_ID`, call a new method, `createNote()`, and return `true`, '''because we have handled this event and do not want to propagate it through the system.'''__

 3. Return the result of the superclass' `onOptionsItemSelected()` method at the end.

The whole `onOptionsItemSelect()` method should now look like this:

 {{{
@Override
public boolean onOptionsItemSelected(MenuItem item) {
  switch (item.getItemId()) {
    case INSERT_ID:
      createNote();
      return true;
  }

  return super.onOptionsItemSelected(item);
}
 }}}

=== Step 11 ===

Add a new `createNote()` method:

In this first version of our application, `createNote()` is not going to be very useful. We will simply create a new note with a title assigned to it based on a counter ("Note 1", "Note 2"...) and with an empty body. At present we have no way of editing the contents of a note, so for now we will have to be content making one with some default values:

 1. Construct the name using "Note" and the counter we defined in the class: `String noteName = "Note " + mNoteNumber++`
 2. Call `mDbHelper.createNote()` using `noteName` as the title and `""` for the body
 3. Call `fillData()` to populate the list of notes (inefficient but simple) — we'll create this method next.

The whole `createNote()` method should look like this:

 {{{
private void createNote() {
  String noteName = "Note " + mNoteNumber++;
  mDbHelper.createNote(noteName, "");
  fillData();
}
 }}}

=== Step 12 ===

 {{{#!wiki note
'''List adapters'''

Our example uses a `SimpleCursorAdapter` to bind a database `Cursor` into a `ListView`, and this is a common way to use a `ListAdapter`. __Other options exist like `ArrayAdapter` which can be used to take a `List` or `Array` of ''in-memory data'' and bind it in to a list as well.__
 }}}

Define the `fillData()` method:

This method uses `SimpleCursorAdapter`, which takes a database `Cursor` and binds it to fields provided in the layout. These fields define the ''row elements'' of our list (in this case we use the `text1` field in our `notes_row.xml` layout), so this allows us to easily populate the list with entries from our database.

__To do this we have to provide a ''mapping'' from the title field in the returned `Cursor`, to our `text1` `TextView`, which is done by defining two arrays: the first a string array with the list of columns to map from (just `"title"` in this case, from the constant `NotesDbAdapter.KEY_TITLE`) and, the second, an `int` array containing references to the views that we'll bind the data into (the `R.id.text1` `TextView`).__

This is a bigger chunk of code, so let's first take a look at it:

 {{{
private void fillData() {
  // Get all of the notes from the database and create the item list
  Cursor c = mDbHelper.fetchAllNotes();
  startManagingCursor(c);

  String[] from = new String[] { NotesDbAdapter.KEY_TITLE };
  int[] to = new int[] { R.id.text1 };

  // Now create an array adapter and set it to display using our row
  SimpleCursorAdapter notes =
  new SimpleCursorAdapter(this, R.layout.notes_row, c, from, to);
  setListAdapter(notes);
}
 }}}

Here's what we've done:

 1. After obtaining the `Cursor` from `mDbHelper.fetchAllNotes()`, __we use an `Activity` method called `startManagingCursor()` that allows Android to take care of the `Cursor` lifecycle instead of us needing to worry about it.__ (We will cover the implications(蘊涵式?) of the lifecycle in exercise 3, but for now just know that this allows Android to do some of our ''resource management'' work for us.)

 2. Then we create a string array in which we declare the column(s) we want (just the `title`, in this case), and an `int` array that defines the `View`(s) to which we'd like to bind the columns (these should be in order, respective to the string array, but here we only have one for each).

 3. Next is the `SimpleCursorAdapter` instantiation. Like many classes in Android, the `SimpleCursorAdapter` needs a `Context` in order to do its work, so we pass in this for the context (since subclasses of `Activity` implement `Context`). We pass the `notes_row` `View` we created as the receptacle(容器) for the data, the `Cursor` we just created, and then our arrays.

In the future, remember that the mapping between the from columns and to resources is done using the respective ordering of the two arrays. If we had more columns we wanted to bind, and more `View`s to bind them in to, we would specify them in order, for example we might use `{ NotesDbAdapter.KEY_TITLE, NotesDbAdapter.KEY_BODY }` and `{ R.id.text1, R.id.text2 }` to bind two fields into the row (and we would also need to define `text2` in the `notes_row.xml`, for the body text). This is how you can bind multiple fields into a single row (and get a custom row layout as well).

If you get compiler errors about classes not being found, ctrl-shift-O or (cmd-shift-O on the mac) to organize imports.

=== Step 13 ===

Run it!

 1. Right click on the `Notepadv1` project.

 2. From the popup menu, select Run As > Android Application.

 3. If you see a dialog come up, select Android Launcher as the way of running the application (you can also use the link near the top of the dialog to set this as your default for the workspace; this is recommended as it will stop the plugin from asking you this every time).

 4. Add new notes by hitting the menu button and selecting Add Item from the menu.

=== Solution and Next Steps ===

You can see the solution to this class in `Notepadv1Solution` from the zip file to compare with your own.

Once you are ready, move on to Tutorial Exercise 2 to add the ability to create, edit and delete notes.

