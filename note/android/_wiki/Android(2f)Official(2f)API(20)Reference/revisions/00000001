= Android / Official / API Reference =
http://developer.android.com/reference/packages.html
<<TableOfContents>>

'''舊文件請參考 00000002'''

= android =
http://developer.android.com/reference/android/package-summary.html @2010/09/22
http://developer.android.com/reference/android/package-descr.html @2010/09/22

Contains the resource classes used by standard Android applications.

__This package contains the resource classes that Android defines to be used in Android applications. Third party developers can use many of them also for their applications.__ To learn more about how to use these classes, and what a resource is, see Resources and Assets.

== R.attr ==
http://developer.android.com/reference/android/R.attr.html @2010/09/22

=== id ===

 {{{
public static final int id
 }}}

__Supply an identifier name for this view, to later retrieve it with `View.findViewById()` or `Activity.findViewById()`. This must be a ''resource reference''; typically you set this using the `@+` syntax to create a new ID resources.__ For example: `android:id="@+id/my_id"` which allows you to later retrieve the view with `findViewById(R.id.my_id)`.

Must be a reference to another resource, in the form "`@[+][package:]type:name`" or to a theme attribute in the form "`?[package:][type:]name`".

=== layout_height ===

 {{{
public static final int  layout_height
 }}}

__Specifies the ''basic height'' of the view. This is a required attribute for any view inside of a containing layout manager.__ Its value may be a dimension (such as "`12dip`") for a constant height or one of the special constants.

__May be a dimension value, which is a floating point number appended with a unit such as "`14.5sp`". Available units are: `px` (pixels), `dp` (density-independent pixels), `sp` (scaled pixels based on preferred font size), `in` (inches), `mm` (millimeters).__

This may also be a reference to a resource (in the form "@[package:]type:name") or theme attribute (in the form "?[package:][type:]name") containing a value of this type.

May be one of the following constant values.

|| Constant || Value || Description ||
|| `fill_parent` || `-1` || __The view should be as big as its parent (minus padding). This constant is deprecated starting from API Level 8 and is replaced by `match_parent`.__ ||
|| `match_parent` || `-1` || __The view should be as big as its parent (minus padding). Introduced in API Level 8.__ ||
|| `wrap_content` || `-2` || __The view should be only big enough to enclose its content (plus padding).__ ||

=== layout_width ===

 {{{
public static final int
 }}}

__Specifies the ''basic width'' of the view. This is a required attribute for any view inside of a containing layout manager.__ Its value may be a dimension (such as "`12dip`") for a constant width or one of the special constants.

__May be a dimension value, which is a floating point number appended with a unit such as "`14.5sp`". Available units are: `px` (pixels), `dp` (density-independent pixels), `sp` (scaled pixels based on preferred font size), `in` (inches), `mm` (millimeters).__

This may also be a reference to a resource (in the form "`@[package:]type:name`") or theme attribute (in the form "`?[package:][type:]name`") containing a value of this type.

May be one of the following constant values.

|| Constant || Value || Description ||
|| `fill_parent` || `-1` || __The view should be as big as its parent (minus padding). This constant is deprecated starting from API Level 8 and is replaced by `match_parent`.__ ||
|| `match_parent` || `-1` || __The view should be as big as its parent (minus padding). Introduced in API Level 8.__ ||
|| `wrap_content` || `-2` || __The view should be only big enough to enclose its content (plus padding).__ ||

=== onClick ===

 {{{
public static final int onClick
 }}}

__Name of the method in this `View`'s context to invoke when the view is clicked. This name must correspond to a public method that takes exactly one parameter of type `View`. For instance, if you specify `android:onClick="sayHello"`, you must declare a `public void sayHello(View v)` method of your context (typically, your `Activity`).__

Must be a string value, using '`\\;`' to escape characters such as '`\\n`' or '`\\uxxxx`' for a unicode character.

This may also be a reference to a resource (in the form "`@[package:]type:name`") or theme attribute (in the form "`?[package:][type:]name`") containing a value of this type.

=== text ===

 {{{
public static final int text
 }}}

Text to display.

Must be a string value, using '`\\`' to escape characters such as '`\\n`' or '`\\uxxxx`' for a unicode character.

This may also be a reference to a resource (in the form "`@[package:]type:name`") or theme attribute (in the form "`?[package:][type:]name`") containing a value of this type.

== R.styleable ==
http://developer.android.com/reference/android/R.styleable.html @2010/09/22

...

= android.app =
http://developer.android.com/reference/android/app/package-summary.html @2010/09/22
http://developer.android.com/reference/android/app/package-descr.html @2010/09/22

__High-level classes encapsulating the overall Android application model.__

== Activity Class ==
http://developer.android.com/reference/android/app/Activity.html @2010/09/22

 {{{
public class Activity
extends ContextThemeWrapper
implements ComponentCallbacks, KeyEvent.Callback, LayoutInflater.Factory,
           View.OnCreateContextMenuListener, Window.Callback

java.lang.Object
  ↳ android.content.Context
      ↳ android.content.ContextWrapper
          ↳ android.view.ContextThemeWrapper
              ↳ android.app.Activity
 }}}

=== Class Overview ===

__An activity is a single, focused thing that the user can do. Almost all activities interact with the user, so the `Activity` class takes care of creating a window for you in which you can place your UI with `setContentView(View)`. While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating windows (via a theme with `windowIsFloating` set) or embedded inside of another activity (using `ActivityGroup`).__ There are two methods almost all subclasses of `Activity` will implement:

:::

=== findViewById(int id) ===

 {{{
public View findViewById(int id)
 }}}

__Finds a view that was identified by the id attribute from the XML that was processed in `onCreate(Bundle)`.__

Returns: The view if found or `null` otherwise.

=== onCreate(Bundle savedInstanceState) ===

 {{{
protected void onCreate(Bundle savedInstanceState)
 }}}

__Called when the activity is starting. This is where most initialization should go: calling `setContentView(int)` to inflate the activity's UI, using `findViewById(int)` to programmatically interact with widgets in the UI, calling `managedQuery(android.net.Uri, String[], String, String[], String)` to retrieve cursors for data being displayed, etc.__

__You can call `finish()` from within this function, in which case `onDestroy()` will be immediately called without any of the rest of the activity lifecycle (`onStart()`, `onResume()`, `onPause()`, etc) executing.__

__Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.__

Parameters:

 * `savedInstanceState` - __If the activity is being re-initialized after previously being shut down then this `Bundle` contains the data it most recently supplied in `onSaveInstanceState(Bundle)`. Note: Otherwise it is `null`.__

=== setContentView(int layoutResID) ===

 {{{
public void setContentView(int layoutResID)
 }}}

__Set the activity content from a layout resource. The resource will be inflated, adding all top-level views to the activity.__

Parameters:

 * `layoutResID` - Resource ID to be inflated.

=== setContentView(View view) ===

 {{{
public void setContentView(View view)
 }}}

__Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarhcy.__

Parameters:

 * `view` - The desired content to display.

= andriod.view =
http://developer.android.com/reference/android/view/package-summary.html @2010/09/22

__Provides classes that expose basic user interface classes that handle screen layout and interaction with the user.__

== View Class ==
http://developer.android.com/reference/android/view/View.html @2010/09/22

 {{{
public class View
extends Object
implements Drawable.Callback, KeyEvent.Callback, AccessibilityEventSource

java.lang.Object
  ↳ android.view.View
 }}}

=== Class Overview ===

__This class represents the basic building block for user interface components. A View occupies a ''rectangular area'' on the screen and is responsible for drawing and event handling. `View` is the base class for widgets, which are used to create interactive UI components (buttons, text fields, etc.). The `ViewGroup` subclass is the base class for layouts, which are invisible containers that hold other `View`s (or other `ViewGroup`s) and define their layout properties.__

:::

=== setOnClickListener(View.OnClickListener l) ===

 {{{
public void setOnClickListener(View.OnClickListener l)
 }}}

__Register a callback to be invoked when this view is clicked. If this view is not clickable, it becomes clickable.__

Parameters:

 * `l` - The callback that will run

== View.OnClickListener Interface ==
http://developer.android.com/reference/android/view/View.OnClickListener.html @2010/09/22

 {{{
public static interface View.OnClickListener
 }}}

__Interface definition for a callback to be invoked when a view is clicked.__

=== onClick(View v) ===

 {{{
public abstract void onClick(View v)
 }}}

Called when a view has been clicked.

Parameters:

 * `v` - The view that was clicked. 

= android.widget =
http://developer.android.com/reference/android/widget/package-summary.html @2010/09/22
http://developer.android.com/reference/android/widget/package-descr.html @2010/09/22

__The widget package contains (mostly visual) UI elements to use on your Application screen.__ You can design your own

:::

== Button Class ==
http://developer.android.com/reference/android/widget/Button.html @2010/09/22

 {{{
public class Button
extends TextView

java.lang.Object
  ↳ android.view.View
      ↳ android.widget.TextView
          ↳ android.widget.Button
 }}}

__`Button` represents a push-button widget. Push-buttons can be pressed, or clicked, by the user to perform an action.__ A typical use of a push-button in an activity would be the following:

 {{{
public class MyActivity extends Activity {
  protected void onCreate(Bundle icicle) {
    super.onCreate(icicle);

    setContentView(R.layout.content_layout_id);

    final Button button = (Button) findViewById(R.id.button_id);
    button.setOnClickListener(new View.OnClickListener() {
      public void onClick(View v) {
         // Perform action on click
      }
    });
  }
}
 }}} 

=== Button(Context context) ===

 {{{
public Button(Context context)
 }}}

== TextView Class ==
http://developer.android.com/reference/android/widget/TextView.html @2010/09/22

 {{{
public class TextView
extends View
implements ViewTreeObserver.OnPreDrawListener

java.lang.Object
  ↳ android.view.View
      ↳ android.widget.TextView
 }}}

__Displays text to the user and optionally allows them to edit it. A `TextView` is a complete text editor, however the basic class is configured to not allow editing; see `EditText` for a subclass that configures the text view for editing.__

=== setText(CharSequence text) ===

 {{{
public final void setText(CharSequence text)
 }}}

__Sets the string value of the `TextView`. `TextView` does not accept HTML-like formatting, which you can do with text strings in XML resource files.__ To style your strings, attach `android.text.style.*` objects to a `SpannableString`, or see the Available Resource Types documentation for an example of setting formatted text in the XML resource file.

Related XML Attributes:

 * `android:text`


