= [Android][ADB] Remote Shell =

`adb shell` 可以開啟 ADB remote shell，在這裡可以下的指令都稱做 (remote) shell command。

--------------------------------------------------------------------------------
$ adb -e shell
# ls /system/bin
date
run-as
mv
am
netstat
mkdir
ls
ps
...
# foobar
foobar: permission denied <1>
# netstat
Proto Recv-Q Send-Q Local Address          Foreign Address        State
 tcp       0      0 127.0.0.1:5037         0.0.0.0:*              LISTEN
 tcp       0      0 0.0.0.0:5555           0.0.0.0:*              LISTEN
 tcp       0      0 10.0.2.15:5555         10.0.2.2:38608         ESTABLISHED
--------------------------------------------------------------------------------
<1> 指令不存在時還是回應 "permission denied"，不要被誤導了。

包括最基本的 `mkdir`、`ls` 等。這些 command 也可以直接從 command line 帶進來：

--------------------------------------------------------------------------------
$ adb shell pwd
/
$ adb shell cd /mnt/sdcard
$ adb shell pwd
/
--------------------------------------------------------------------------------

每一次的 shell command 都執行在不同的 session，所以上一個 `cd` 的結果，並不會反應在下一個 session。如果要在同一個 session 裡連續執行多個指令，可以用分號隔開：（commands 兩側的引號很重要，否則會被 console 視為不同的 command，不會全部送給 `adb shell` 執行）

--------------------------------------------------------------------------------
$ adb shell "pwd; cd /mnt/sdcard; pwd"
/
/mnt/sdcard
--------------------------------------------------------------------------------

使用者當下的登入身份可以用 `id` 來查詢：

--------------------------------------------------------------------------------
$ adb -e shell <1>
# id
uid=0(root) gid=0(root)

$ adb -d shell <2>
$ id
uid=2000(shell) gid=2000(shell) groups=1003(graphics),1004(input),1007(log),1009(mount),1011(adb),1015(sdcard_rw),3001(net_bt_admin),3002(net_bt),3003(inet)
--------------------------------------------------------------------------------
<1> Emulator 預設是以 `root` 的身份登入。
<2> Device 預設是以 `shell` 的身份登入。

登入之後，可以用 `run-as` 來切換身份

 run-as <package-name> [<command> [<args>]]

以 Ankidroid (`com.ichi2.anki`) 為例：

--------------------------------------------------------------------------------
$ id <1>
uid=2000(shell) gid=2000(shell) groups=1003(graphics),1004(input),1007(log),1009(mount),1011(adb),1015(sdcard_rw),3001(net_bt_admin),3002(net_bt),3003(inet)
$ pwd
/
$ ls /data/data/com.ichi2.anki/databases
opendir failed, Permission denied
$
$ run-as com.android.systemui <2>
run-as: Package 'com.android.systemui' is unknown
$
$ run-as com.ichi2.anki <3>
$ id
uid=10170(app_170) gid=10170(app_170) groups=1003(graphics),1004(input),1007(log),1009(mount),1011(adb),1015(sdcard_rw),3001(net_bt_admin),3002(net_bt),3003(inet)
$ pwd
/data/data/com.ichi2.anki
$ ls databases
webview.db
webviewCache.db
webview.db-wal
webview.db-shm
webviewCache.db-wal
webviewCache.db-shm
ankidroid.db
ankidroid.db-wal
ankidroid.db-shm
$ exit <4>
$ id
uid=2000(shell) gid=2000(shell) groups=1003(graphics),1004(input),1007(log),1009(mount),1011(adb),1015(sdcard_rw),3001(net_bt_admin),3002(net_bt),3003(inet)
$ pwd
/
--------------------------------------------------------------------------------
<1> 一開始的身份是 `shell`，沒有權限存取該 package 的資料。
<2> 透過 `run-as` 可以切換成某個 package 的身份。
+
NOTE: 這個動作要成功，必須搭配 `AndroidManifest.xml` 的 `android:debuggable` 設定為 `true` 才行，否則會遇到 "run-as: Package '...' is not debuggable" 之類的錯誤。
+
<3> 成功切換身份之後，透過 `id` 確認當下的身份真的變了，另外也會自動被帶到該 package 的 data folder。
<4> 顯然 `run-as` 會進入另一層 shell，因為按 Ctrl+D 並沒有離開 ADB shell。

延伸上面 Ankidroid 的例子，如果想把 `/data/data/com.ichi2.anki/databases/ankidroid.db` 取出來，可以透過幾個步驟完成：

--------------------------------------------------------------------------------
$ adb shell
$ run-as com.ichi2.anki cat databases/ankidroid.db > /mnt/sdcard/ankidroid.db <1>
$ exit
$ adb pull /mnt/sdcard/ankidroid.db /tmp <2>
$
$ sqlite3 /tmp/ankidroid.db
--------------------------------------------------------------------------------
<1> 這裡用 `cat` 外加 I/O redirection 的手法來達成複製檔案內容的目的，因為 `cp` 這個 shell command 並不存在。另外由於 `run-as` 會切換 CWD，所以可以用相對路徑表示要複製的來源。
<2> 檔案送到 SD card 後，再搭配 `adb pull` 取出檔案到開發機器。

當然也可以一個步驟完成：

 adb shell "run-as com.ichi2.anki cat databases/ankidroid.db > /mnt/sdcard/ankidroid.db"; adb pull /mnt/sdcard/ankidroid.db /tmp

--------------------------------------------------------------------------------
def pull_file(remote_file, runas=None):
    ltmpdir = tempfile.mkdtemp(prefix='adbpull-')
    rtmpdir = '/mnt/sdcard/' + path.basename(ltmpdir)
    filename = path.basename(remote_file)

    _adb_shell('mkdir ' + rtmpdir)
    try:
        rtmpfile = rtmpdir + '/' + filename

        cmd = 'cat %s > %s' % (remote_file, rtmpfile)
        if runas is not None: cmd = ('run-as %s ' % runas) + cmd

        _adb_shell(cmd) # copy remote file to SD card
        subprocess.check_call(['adb', 'pull', rtmpfile, ltmpdir]) # copy file from SD card to local
        return path.join(ltmpdir, filename)
    finally:
        _adb_shell('rm -r ' + rtmpdir)
--------------------------------------------------------------------------------
 
== 參考資料 ==

 * http://developer.android.com/guide/topics/manifest/application-element.html#debug[AndroidManifest.xml <application>]
 * http://stackoverflow.com/questions/1043322/why-do-i-get-access-denied-to-data-folder-when-using-adb[android - Why do I get access denied to data folder when using adb? - Stack Overflow] (2009-06-25)

