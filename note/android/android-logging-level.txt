= [Android] Log Priority Level =

 * `isLoggable()` 跟 `setprop log.tag.TAG LEVEL` 的關聯。
 * 如何徹底避開

從 `android.util.Log` 的原始碼一路往下追...

.http://androidxref.com/source/xref/frameworks/base/core/java/android/util/Log.java#137[Cross Reference: /frameworks/base/core/java/android/util/Log.java]
--------------------------------------------------------------------------------
137    public static int d(String tag, String msg) {
138        return println_native(LOG_ID_MAIN, DEBUG, tag, msg); <1>
139    }
...
148    public static int d(String tag, String msg, Throwable tr) {
149        return println_native(LOG_ID_MAIN, DEBUG, tag, msg + '\n' + getStackTraceString(tr));
150    }
...
212    public static native boolean isLoggable(String tag, int level);
...
335    /** @hide */ public static final int LOG_ID_MAIN = 0;
336    /** @hide */ public static final int LOG_ID_RADIO = 1;
337    /** @hide */ public static final int LOG_ID_EVENTS = 2;
338    /** @hide */ public static final int LOG_ID_SYSTEM = 3;
339
340    /** @hide */ public static native int println_native(int bufID,
341            int priority, String tag, String msg);
--------------------------------------------------------------------------------
<1> 從 `LOG_ID_MAIN` 可以得知，`Log.x()` 固定將 log 寫到 link:android-logging-buffer.html[main buffer]。

.http://androidxref.com/source/xref/frameworks/base/core/jni/android_util_Log.cpp#105[Cross Reference: /frameworks/base/core/jni/android_util_Log.cpp]
--------------------------------------------------------------------------------
18#define LOG_NAMESPACE "log.tag."
...
46static int toLevel(const char* value)
47{
48    switch (value[0]) { <2>
49        case 'V': return levels.verbose;
50        case 'D': return levels.debug;
51        case 'I': return levels.info;
52        case 'W': return levels.warn;
53        case 'E': return levels.error;
54        case 'A': return levels.assert;
55        case 'S': return -1; // SUPPRESS
56    }
57    return levels.info;
58}
59
60static jboolean isLoggable(const char* tag, jint level) {
61    String8 key;
62    key.append(LOG_NAMESPACE);
63    key.append(tag);
64
65    char buf[PROPERTY_VALUE_MAX];
66    if (property_get(key.string(), buf, "") <= 0) { <1>
67        buf[0] = '\0';
68    }
69
70    int logLevel = toLevel(buf);                    <2>
71    return logLevel >= 0 && level >= logLevel;      <3>
72}
73
74static jboolean android_util_Log_isLoggable(JNIEnv* env, jobject clazz, jstring tag, jint level)
75{
76    if (tag == NULL) {
77        return false;
78    }
79
80    const char* chars = env->GetStringUTFChars(tag, NULL);
81    if (!chars) {
82        return false;
83    }
84
85    jboolean result = false;
86    if ((strlen(chars)+sizeof(LOG_NAMESPACE)) > PROPERTY_KEY_MAX) {
87        char buf2[200];
88        snprintf(buf2, sizeof(buf2), "Log tag \"%s\" exceeds limit of %d characters\n",
89                chars, PROPERTY_KEY_MAX - sizeof(LOG_NAMESPACE));
90
91        jniThrowException(env, "java/lang/IllegalArgumentException", buf2);
92    } else {
93        result = isLoggable(chars, level);
94    }
95
96    env->ReleaseStringUTFChars(tag, chars);
97    return result;
98}
...
105 * In class android.util.Log:
106 *  public static native int println_native(int buffer, int priority, String tag, String msg)
107 */
108static jint android_util_Log_println_native(JNIEnv* env, jobject clazz,
109        jint bufID, jint priority, jstring tagObj, jstring msgObj)
110{
111    const char* tag = NULL;
112    const char* msg = NULL;
113
114    if (msgObj == NULL) {
115        jniThrowNullPointerException(env, "println needs a message");
116        return -1;
117    }
118
119    if (bufID < 0 || bufID >= LOG_ID_MAX) {
120        jniThrowNullPointerException(env, "bad bufID");
121        return -1;
122    }
123
124    if (tagObj != NULL)
125        tag = env->GetStringUTFChars(tagObj, NULL);
126    msg = env->GetStringUTFChars(msgObj, NULL);
127
128    int res = __android_log_buf_write(bufID, (android_LogPriority)priority, tag, msg);
129
130    if (tag != NULL)
131        env->ReleaseStringUTFChars(tagObj, tag);
132    env->ReleaseStringUTFChars(msgObj, msg);
133
134    return res;
135}
--------------------------------------------------------------------------------
<1> `LOG_NAMESPACE` 的值是 `log.tag.`，準備要到 link:android-property.html[system property] 裡找看看有沒有
<2> 利用 `log.tag.<tag>` 的第一個字元，找出對應的 priority level，預設是 info。
<3> 送到 `isLoggable()` 檢查的 level 必須高於等於 `log.tag.<tag>` 或 info 才行。

看起來，`Log.x()` 本身並不會去做 `isLoggable()` 的過濾。也就是說，如果原始程式在呼叫 `Log.x()` 前沒有明確做 `isLoggable()` 的檢查，log message 就會直接寫到 main buffer，完全不受 `log.tag.<tag>` 設定的影響。

== 參考資料 ==

 * http://stackoverflow.com/questions/2018263/android-logging/2019002#2019002[Android logging - Stack Overflow] (2010-01-07) - 提到 `adb shell setprop log.tag.TAG LEVEL` 的用法。
 * https://groups.google.com/forum/?fromgroups=#!topic/android-developers/whKP1L_5EmE[Logging in Android - Google Groups] (2009-10-17) - Lance Nanek 提到 verbose/debug 在 non-debuggable build 也會輸出，因為 `Log.x()` 內部並不會去檢查 `isLoggable()`。

