= Android Emulator: 如何讓一個 AVD 有多個 Snapshots =

link:emulator.html[emulator] 內建支援多個 link:snapshots.html[snapshots] 的功能，我們先從 link:console.html[Console] 的 `avd snapshot` 看起：

--------------------------------------------------------------------------------
$ telnet localhost 5554
...
OK
help avd snapshot
allows you to save and restore the virtual device state in snapshots

available sub-commands:
   avd snapshot list             list available state snapshots
   avd snapshot save             save state snapshot
   avd snapshot load             load state snapshot
   avd snapshot del              delete state snapshot

OK
help avd snapshot list
'avd snapshot list' will show a list of all state snapshots that can be loaded
OK
help avd snapshot save
'avd snapshot save <name>' will save the current (run-time) state to a snapshot with the given name
OK
help avd snapshot load
'avd snapshot load <name>' will load the state snapshot of the given name
OK
help avd snapshot del
'avd snapshot del <name>' will delete the state snapshot with the given name
OK
--------------------------------------------------------------------------------

從上面所有 `avd snapshot` 的說明可以看出， Emulator 對 Snapshot 的支援其實相當完整；可以隨時在 emulator 運行的過程中拍多個 snapshots，也可以隨時回到之前拍下的某個 snapshot。

TIP: 這也就是為什麼 `~/android/<avd_name>.avd/snapshots.img` 的主檔名後面多了個 "s" 的關係。

另外 `emulator` 的 `-snapshot-list` 也可以用來列出 `snapshots.img` 裡所有的 snapshots，即便在 AVD 沒有啟動的情況下也可以查詢：

 $ emulator @<avd_name> -snapshot-list

以下就拿一個做過一次 snapshot 的 link:snapshots.html#myphone[MyPhone] 繼續往下做測試；先從單一個 snapshot 開始：

--------------------------------------------------------------------------------
$ ls -1sh snapshots.img
227M snapshots.img
$ emulator @MyPhone -snapshot-list <1>
Snapshots in file '/home/<user>/.android/avd/MyPhone.avd/snapshots.img':
 ID        TAG                 VM SIZE                DATE       VM CLOCK
 1         default-boot           226M 2012-07-14 23:31:44   00:03:29.315
$
$ emulator @MyPhone -no-snapshot-save &
$ telnet localhost 5554
avd snapshot list <2>
Snapshot devices: ide0-hd1
Snapshot list (from ide0-hd1):
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         default-boot           226M 2012-07-14 23:31:44   00:03:29.315
OK
avd snapshot save <3>
KO: argument missing, try 'avd snapshot save <name>'
avd snapshot save default-boot
OK
avd snapshot list
Snapshot devices: ide0-hd1
Snapshot list (from ide0-hd1):
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         default-boot           226M 2012-07-14 23:33:47   00:04:25.274
OK
exit
$ ls -1sh snapshots.img
454M snapshots.img
$
$ telnet localhost 5554
avd snapshot load <4>
KO: argument missing, try 'avd snapshot load <name>'
avd snapshot load default-boot
OK
avd snapshot save before-install <5>
OK
avd snapshot list
Snapshot devices: ide0-hd1
Snapshot list (from ide0-hd1):
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         default-boot           226M 2012-07-14 23:33:47   00:04:25.274
2         before-install         227M 2012-07-14 23:35:50   00:06:26.578
OK
exit
$ ls -1sh snapshots.img
455M snapshots.img
$
$ telnet localhost 5554
avd snapshot save after-install <6>
OK
avd snapshot list
Snapshot devices: ide0-hd1
Snapshot list (from ide0-hd1):
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         default-boot           226M 2012-07-14 23:33:47   00:04:25.274
2         before-install         227M 2012-07-14 23:35:50   00:06:26.578
3         after-install          231M 2012-07-14 23:38:31   00:09:06.587
OK
exit
$ ls -1sh snapshots.img
686M snapshots.img
$
$ telnet localhost 5554
avd snapshot del before-install <7>
OK
avd snapshot list
Snapshot devices: ide0-hd1
Snapshot list (from ide0-hd1):
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         default-boot           226M 2012-07-14 23:33:47   00:04:25.274
3         after-install          231M 2012-07-14 23:38:31   00:09:06.587
OK
exit
$ ls -1sh snapshots.img
686M snapshots.img
--------------------------------------------------------------------------------
<1> 在還沒啟動 AVD 之前，先用 `emulator` 看一下 `snapshots.img` 的內容。原來 AVD 關閉時預設會將狀態寫回一個名叫 `default-root` 的 snapshot。
<2> 啟動 AVD 後，從 console 也可以看 snapshot 清單。
<3> 什麼都不做，重新寫回 `default-boot`，結果 `snapshots.img` 的大小變成原來的兩倍。
<4> 操作 emulator 一段時間後，隨時可以用回到起點。
<5> 可以拍更多的 snapshots，只要給 snapshot 不同的名稱即可；但這次 `snapshots.img` 的大小卻沒什麼增加？
<6> 幾乎每增加一個 snapshot 就會成長一個單位，也就是第一個 snapshot 大小，在這個例子是 227M。
<7> 直接把中間的 snapshot 砍了，並不會影響到後面其他的 snapshots，顯然 snapshots 間是相互獨立的，這也難怪 `snapshots.img` 的檔案大小會成長得這麼快。另外就是 snaphost 砍掉後 `snapshots.img` 並不會變小，要把 VM 交給其他人恐怕會有困難...

AVD 啟動時預設會去載一個名叫 `default-boot` 的 snapshot，如果要直接載入其他 snapshot 的話，可以用 `-snapshot <name>` 來指定。例如：

--------------------------------------------------------------------------------
$ emulator @MyPhone -snapshot-list
Snapshots in file '/home/<user>/.android/avd/MyPhone.avd/snapshots.img':
 ID        TAG                 VM SIZE                DATE       VM CLOCK
 1         default-boot           226M 2012-07-14 23:33:47   00:04:25.274
 3         after-install          231M 2012-07-14 23:38:31   00:09:06.587
$
$ emulator @MyPhone -snapshot after-install -no-snapshot-save
--------------------------------------------------------------------------------

== 參考資料 ==

 * http://archive.cnblogs.com/a/2479750/[命令行启动Android虚拟机快照 - 博客文库 - 博客园] (2012-05-02)

