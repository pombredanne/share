= Singleton Pattern =

這個 pattern 已確定被認定為 anti-pattern, 多數人建議用 link:../ioc/ioc.html[IoC Container] 來取代。

在 http://search.cpan.org/~stevan/IOC-0.28/lib/IOC.pm[CPAN IOC] 裡有提到:

________________________________________________________________________________
Do you have more than a few Singletons in your code? If so, you are a likely candidate for IOC. Singletons can be very useful tools, but when they are overused, they quickly start to take on all the same problems of global variables that they were meant to solve. With the IOC framework, you can reduce several singletons down to one, the `IOC::Registry` singleton, and allow for more fine grained control over their life-cycles.
________________________________________________________________________________

我想全部的 IoC Container 裡面至少都會用到一個 singleton 吧?

== 延伸閱讀 ==

 * link:../java/java-singleton.html[用 Java 實現 Singleton Pattern]

== 參考資料 ==

 * http://en.wikipedia.org/wiki/Singleton_pattern[Singleton pattern - Wikipedia, the free encyclopedia]

////////////////////////////////////////////////////////////////////////////////

 * 在C語言得到普遍應用的雙重檢查成例（Double Check Idiom）對多數的JVM並不成立。一般而言，雙重檢查成例對Java語言是不成立的（詳細分析請參見《Java與模式》230頁，這裡不重複贅述）。雙重檢查應該作為Java語言的一個 anti-pattern
 * 另外從設計上的角度來考慮，Singleton模式的引入會給程序帶來以下不好的影響：
   1. 該模式結合了靜態方法，由於靜態方法一般由類定義，而不是接口，導致系統中其他程序過分依賴該類本身（對該類的引用被硬編碼到其他類中），增加了系統的耦合度；
   2. 由於靜態方法和變量沒有「繼承」的概念,使該模式不利於擴展。
   3. 由於singleton的創建完全在本類中完成，對外界封閉，每個不同的singleton必須擁有完全獨立的初始化過程，需要獨立處理自己的配置。在一個大的系統中，越來越多的singleton導致系統越來越難維護。
 * 請在使用 Singleton 的模式時，結合目標系統的具體情況，來決定是否使用Singleton模式以及如何有效使用。可以參考Flyweight模式和IoC，反正我在項目裡會儘量避免使用Singleton的。
 * singleton確實不推薦使用，用IoC要比singleton好得多

////////////////////////////////////////////////////////////////////////////////

