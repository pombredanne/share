= link:api.html[Selenium RC / API] / 操作表單控制項 - 選擇清單（Select） =
:title: [Selenium][RC] 操作表單控制項 - 選擇清單（Select）

跟 drop-down list 或 list box 操作相關的 API 有：

 * `select(locator, option_locator)` - 選取單一個項目。可以想成使用者沒有按下 Ctrl 做選取的動作，所以原來選取的項目會被取消。
 * `is_something_selected(locator)` - 判斷目前是否有任何項目被選取，主要用於呼叫 `get_selected_xxx()` 前的檢查，避免 "No option selected" 的錯誤。
 * `get_selected_value(locator)` - 取得被選取項目的 `value` 屬性值。如果沒有項目或多於一個項目被選取，會丟出 "No option selected" 或 "More than one selected option!" 的錯誤。
 * `get_selected_values(locator)` - 取得多個被選取項目的 `value` 屬性值（同選項的順序）。如果沒有項目被選取，會丟出 "No option selected" 的錯誤。
 * `add_selection(locator, option_ocator)` - 加選一個項目，可以想成按著 Ctrl 做選取的動作，只能用在多選的 list。
 * `remove_all_selections(locator)` - 取消所有選取，只能用在多選的 list。
 * `remove_selection(locator, option_locator)` - 取消某個項目的選取，只能用在多選的 list。
 * `get_select_options(locator)` - 取得所有項目的 label。

其中 'locator' 用來定位 list 本身，而 'option locator' 則是用來定位 list 裡的某個 option，有 4 種不同的形式（form）：

 * `[label=]<label>` - 以文字內容做為判斷的依據，沒有加 prefix 時預設採用 `label=`。
 * `value=<value>` - 以 `value` 屬性值做為判斷的依據。
 * `id=<id>` - 以 `id` 屬性值做為判斷的依據。
 * `index=<index>` - 以 option 的順位（以零為啟始）做為判斷的依據。

TIP: 雖然 option locator 提供有 4 種 prefix，但最建議使用的還是 `value=`，因為 `value` 屬性值是要傳回後端的，變動的可能性相對比較小，也不會有 L10N 的問題。

直接拿 link:../../html/html-select.html[HTML <select> Tag] 例子來做說明，首先來看 "單選下拉清單"：

.link:../../html/html-select/select-single-drop.html[`select-single-drop.html`]
--------------------------------------------------------------------------------
<select name="select">
  <option value="opt1">Option 1</option>
  <option value="opt2">Option 2</option>
  <option value="opt3">Option 3</option>
  <option value="opt4">Option 4</option>
  <option value="opt5">Option 5</option>
</select>
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
>>> select = 'name=select'
>>> sel.get_selected_value(select) <1>
u'opt1'
>>> sel.get_selected_values(select)
[u'opt1']
>>>
>>> sel.select(select, 'value=opt2')
>>> sel.get_selected_value(select)
u'opt2'
>>> sel.get_selected_values(select)
[u'opt2']
>>>
>>> sel.remove_all_selections(select) <2>
Traceback (most recent call last):
...
Exception: ERROR: Not a multi-select
>>> sel.remove_selection(select, 'value=opt2')
...
Exception: ERROR: Not a multi-select
>>> sel.add_selection(select, 'value=opt1')
...
Exception: ERROR: Not a multi-select
--------------------------------------------------------------------------------
<1> 即便 HTML 原始碼沒有用 `selected` 預選任何項目，但 `get_selected_value()` 跟 `get_selected_values()` 都可以取得畫面上顯示的項目（通常是第一個選項）。
<2> `add_selection()`、`remove_selection()` 跟 `remove_all_selections()` 都只能用在多選的 list。

接著來看 "單選捲動清單" 有什麼不同：

.link:../../html/html-select/select-list-single.html[`select-list-single.html`]
--------------------------------------------------------------------------------
<select name="select" size="3">
  <option value="opt1">Option 1</option>
  <option value="opt2">Option 2</option>
  <option value="opt3">Option 3</option>
  <option value="opt4">Option 4</option>
  <option value="opt5">Option 5</option>
</select>
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
>>> sel.get_selected_value(select) <1>
...
Exception: ERROR: No option selected
>>> sel.get_selected_values(select)
...
Exception: ERROR: No option selected
>>> sel.add_selection(select, 'value=opt2')
...
Exception: ERROR: Not a multi-select
>>>
>>> sel.select(select, 'value=opt2')
>>> sel.get_selected_value(select)
u'opt2'
>>> sel.get_selected_values(select)
[u'opt2']
--------------------------------------------------------------------------------
<1> 跟上面 "單選下拉清單" 的行為不太一樣，如果 HTML 原始碼沒有用 `selected` 預選任何項目，畫面上就不會有任何項目被選取。

最後是 "多選捲動清單"：

.link:../../html/html-select/select-list-multiple.html[`select-list-multiple.html`]
--------------------------------------------------------------------------------
<select name="select" multiple>
  <option value="opt1" selected>Option 1</option>
  <option value="opt2">Option 2</option>
  <option value="opt3" selected>Option 3</option>
  <option value="opt4">Option 4</option>
  <option value="opt5">Option 5</option>
</select>
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
>>> sel.get_selected_value(select) <1>
...
Exception: ERROR: More than one selected option!
>>> sel.get_selected_values(select)
[u'opt1', u'opt3']
>>>
>>> sel.remove_selection(select, 'value=opt1') <2>
>>> sel.remove_selection(select, 'value=opt2')
>>> sel.get_selected_value(select)
u'opt3'
>>> sel.get_selected_values(select)
[u'opt3']
>>>
>>> sel.remove_all_selections(select)
>>> sel.is_something_selected(select)
False
>>> sel.get_selected_value(select)
...
Exception: ERROR: No option selected
>>> sel.get_selected_values(select)
...
Exception: ERROR: No option selected
>>>
>>> sel.select(select, 'value=opt1') <3>
>>> sel.select(select, 'value=opt3')
>>> sel.get_selected_values(select)
>>> sel.get_selected_values(select)
[u'opt3']
>>>
>>> sel.add_selection(select, 'value=opt1')
>>> sel.get_selected_values(select)
[u'opt1', u'opt3']
--------------------------------------------------------------------------------
<1> `get_selected_value()` 只能用在有 "一個" 項目被選取時。
<2> `remove_selection()` 可以取消某個項目的選取，如果該項目本來沒有被選取也不會出錯。
<3> `select()` 會單選一個項目，如果要加選的話要改用 `add_selection()`。

到目前為止，這裡所舉的例子都是 "選項固定" 的狀況，如果事先不知道選項有哪些，要如何動態取得 value/label 的對照表呢？這一點 `get_select_options()` 的幫助有限。

[source,python]
--------------------------------------------------------------------------------
def get_select_options(sel, name):
    xloc = "//select[@name='%s']/option" % name
    options = []
    for idx in range(1, sel.get_xpath_count(xloc) + 1):
        opt = xloc + '[%s]' % idx
        value = sel.get_attribute(opt + '@value')
        label = sel.get_text(opt)
        options.append((value, label))
    return options
--------------------------------------------------------------------------------

其他相關的 API 還有：

 * `get_selected_id(locator)`
 * `get_selected_ids(locator)`
 * `get_selected_index(locator)`
 * `get_selected_indexes(locator)`
 * `get_selected_label(locator)`
 * `get_selected_labels(locator)`

== L10N Automation ==

另外如果要link:../../l10n/l10n-automation-screenshot.html[透過畫面截圖來實現 L10N Automation]，對於 "捲動清單"（單選／多選） 都不會是問題，但如果是 "單選下拉清單"，就會遭遇 `capture_entire_page_screenshot()` 拍不到下拉清單的問題，因為清單是 "浮在" 網頁上方的控制項：

image::select/drop-native-widget.png[]

一個可行的辦法是用 JavaScript 暫時為 `<select>` 加上 `size` 屬性，讓原來的 drop-down list 變成 list box，拍完圖之後再將 `size` 屬性拿掉，就可以回復到 drop-down list。

[source,pycon]
--------------------------------------------------------------------------------
>>> sel.get_eval("list = window.document.getElementById('your_dropdown_id'); list.size = list.length")
>>>
>>> sel.get_eval("list = window.document.getElementById('win-dc-permission'); list.removeAttribute('size')")
u'null'
--------------------------------------------------------------------------------

== 延伸閱讀 ==

 * link:../../html/html-select.html[[HTML&#93; 選擇清單（Select）]

== 參考資料 ==

.手冊
--
 * http://selenium.googlecode.com/svn/trunk/docs/api/py/selenium/selenium.selenium.html[selenium.selenium — Selenium 2.0 documentation]
--

.文件
--
 * http://stackoverflow.com/questions/11716063/selenium-ide-how-to-make-select-options-visible-on-click[Selenium IDE how to make select options visible on click - Stack Overflow] (2012-07-30) - 用 JavaScript 給定 `size`，就會由 drop-down list 變成 list box。
 * http://code.google.com/p/chromium/issues/detail?id=73349[Issue 73349 - chromium - No way to expand a dropdown (HTML select box) via the keyboard - An open-source browser project to help move the web forward. - Google Project Hosting] (2011-02-17) - Alt-Down 可以展開 drop-down list （當然要先取得 focus）。
--

