= link:csharp.html[C#] / Learning =
:title: [C#] Learning

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

[source,c#]
.`helloworld.cs`
--------------------------------------------------------------------------------
using System;

namespace HelloWorldApplication {

  class HelloWorld {

    static void Main(string[] args) { // <1>
      Console.WriteLine("Hello, World!");
      string who = Console.ReadLine();
      if (who == "") {
        Console.WriteLine("Hello, {0}", who); // <2>
      }
    }

  }

}
--------------------------------------------------------------------------------
<1> `static void Main(string[] args)` 是程式的入口，注意前面不用加 `public`，還有 `string` 的大小寫。
<2> 變數代換用 `{n}` 來表示。

[source,c#]
.`rectangle.cs`
--------------------------------------------------------------------------------
using System;

namespace RectangleApplication {

  class Rectangle {

    double length;
    double width;

    public void AcceptDefaults() {
      length = 4.5;
      width = 3.5;
    }

    public double GetArea() {
      return length * width;
    }

    public void Display() {
        Console.WriteLine("Length: {0}", length);
        Console.WriteLine("Width: {0}", width);
        Console.WriteLine("Area: {0}, GetArea());
    }

  }

  class Program { // <1>

    static void Main(string[] args) {
      Rectangle rectangle = new Rectangle();
      rectangle.AcceptDefaults();
      rectangle.Display();
      Console.ReadLine();
    }    

  }

}
--------------------------------------------------------------------------------
<1> 把帶有 `Main()` 的 class 命名成 `Program` 還滿直覺的...

寫起來真的太像 Java 了!!

[source,c#]
.`types.cs`
--------------------------------------------------------------------------------
using System;

namespace TypesApplication {

  class Types {

    static void Main(string[] args) {
      Console.WriteLine("size of int = {0}", sizeof(int));
      Console.WriteLine("type of int = {0}", typeof(int)); // <1>
      Console.WriteLine("size of System.Int32 = {0}", sizeof(Int32));

      int num = 168;
      string str = num.ToString();
      Console.WriteLine("type of num = {0}", num.GetType());
      Console.WriteLine("type of str = {0}", str.GetType());

      Console.WriteLine(Convert.ToDateTime("2013/10/10"));
    }

  }

}
--------------------------------------------------------------------------------
<1> 感覺 `typeof(type)` 的用法，好像是 Java 裡的 `type.class`??

== 參考資料 ==

.手冊
--
 * http://msdn.microsoft.com/en-us/library/618ayhy6.aspx[C# Reference]
 * http://msdn.microsoft.com/en-us/library/67ef8sbd.aspx[C# Programming Guide]
--

.文件
--
 * http://msdn.microsoft.com/en-us/library/vstudio/78f4aasd.aspx[Command-line Building With csc.exe] ??

 * http://www.tutorialspoint.com/csharp/index.htm[C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** C# programming is very much based on C and C++ programming languages, so if you have basic understanding on C or C++ programming then it will be a fun to learn C# programming language. 跟 Java 比較像吧??
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_overview.htm[C# Overview - C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** C# is a modern, general-purpose, object-oriented programming language developed by Microsoft and approved by Ecma and ISO. C# was developed by Anders Hejlsberg and his team during the development of .Net Framework.
** C# is designed for Common Language Infrastructure (CLI), which consists of the executable code and runtime environment that allows use of various high-level languages to be used on different computer platforms and architectures.
** Component oriented?? Assembly Versioning?? 跟模組化好像不太一樣??
** Although C# constructs closely follow traditional high-level languages C and C++ and being an object-oriented programming language, it has strong resemblance with Java, it has numerous strong programming features that make it endearing to multitude of programmers worldwide. 刻意拉攏為數甚多的 Java 開發人員
** Properties and Events?? Delegates and Events Management?? Indexers?? LINQ and Lambda Expressions??
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_environment_setup.htm[C# Environment - C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** The .Net framework applications are multi-platform applications. The framework has been designed in such a way that it can be used from any of the following languages: C#, C++, Visual Basic, Jscript, COBOL (古老的語言!!), etc. All these languages can access the framework as well as communicate with each other.
** Windows Forms, Windows Presentation Foundation = WPF?? 這兩個都是 .NET 才有的?? 為什麼有兩個很像的東西??
** You can also write C# source code files using a basic text editor, like Notepad, and compile the code into assemblies using the command-line compiler, which is again a part of the .NET Framework.
** Although the.NET Framework runs on the Windows operating system, there are some alternative versions that work on other operating systems. Mono is an open-source version of the .NET Framework which includes a C# compiler and runs on several operating systems, including various flavors of Linux and Mac OS. Kindly check Go Mono.
** The stated purpose of Mono is not only to be able to run Microsoft .NET applications cross-platform, but also to bring better development tools to Linux developers. Mono can be run on many operating systems including Android, BSD, iOS, Linux, OS X, Windows, Solaris and UNIX. 連 Android 都有，之前太小看它了!!
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_program_structure.htm[C# Program Structure - C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** A C# program basically consists of the following parts: Namespace declaration, A class, Class methods, Class attributes, A `Main` method, Statements & Expressions, Comments
+
--------------------------------------------------------------------------------
using System;
namespace HelloWorldApplication
{
   class HelloWorld
   {
      static void Main(string[] args)
      {
         /* my first program in C# */
         Console.WriteLine("Hello World");
         Console.ReadKey();
      }
   }
}
--------------------------------------------------------------------------------
+
** The first line of the program `using System;` - the `using` keyword is used to include the `System` namespace in the program. A program generally has multiple `using` statements.
** The next line has the namespace declaration. A namespace is a collection of classes. The `HelloWorldApplication` namespace contains the class `HelloWorld`. 跟 application 的關係是什麼?? 又這裡的 namespace 是否一定必要??
** The next line has a class declaration, the class `HelloWorld` contains the data and method definitions that your program uses. Classes generally would contain more than one method. Methods define the behavior of the class.
** The next line defines the `Main` method, which is the entry point for all C# programs. The `Main` method states what the class will do when executed 怎知道要執行哪個 class 的 `Main()`??
** The next line `/*...*/` will be ignored by the compiler and it has been put to add additional comments in the program.
** `WriteLine` is a method of the `Console` class defined in the `System` namespace. This statement causes the message "Hello, World!" to be displayed on the screen. 看來用 `using` 將某個 namespace 引進來，底下的 classes 就可以直接調用了??
** The last line `Console.ReadKey();` is for the VS.NET Users. This makes the program wait for a key press and it prevents the screen from running and closing quickly when the program is launched from Visual Studio .NET.
** C# is case sensitive. All statements and expression must end with a semicolon (`;`). The program execution starts at the `Main` method.
** Unlike Java, file name could be different from the class name. 有什麼命名慣例嗎??
** 在 Visual Studio 下可以 New Project > Templates > Visual C# > Console Application
** Type `csc helloworld.cs` and press enter to compile your code. 會得到 `helloworld.exe`。
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_basic_syntax.htm[C# Basic Syntax - C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** For example, let us consider a `Rectangle` object. It has attributes like `length` and `width`. Depending upon the design, it may need ways for accepting the values of these attributes, calculating area and display details.
** The `using` keyword is used for including the namespaces in the program. A program can include multiple using statements.
** The `class` keyword is used for declaring a class.
** Comments are used for explaining code. Compilers ignore the comment entries. The multiline comments in C# programs start with `/*` and terminates with the characters `*/`
** Keywords are reserved words predefined to the C# compiler. These keywords cannot be used as identifiers; however, if you want to use these keywords as identifiers, you may prefix the keyword with the `@` character. 儘量少用，但 C# 的慣例是什麼??
** In C#, some identifiers have special meaning in context of code, such as `get` and `set`, these are called "contextual keywords"??.
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_data_types.htm[C# Data Types - C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** CTS (Common Type System) 有個 hierarchy，應該用 dot 畫張圖?? 在 C# 裡也是單一繼承嗎??
** In C#, variables are categorized into the following types: Value types, Reference types, Pointer types 其中 reference 是承襲自 C/C++
** Value type variables can be assigned a value directly. They are derived from the class `System.ValueType`. 看來 C# 並沒有像 Java 裡 primitive types 那種東西??
** The value types directly contain data. Some examples are `int` (`System.Int32`), `char`, `float`, which stores numbers, alphabets, floating point numbers, respectively. When you declare an `int` type, the system allocates memory to store the value.
** `bool` - `Boolean` value - `True` or `False` 
** `char` - 16-bit Unicode character, `U +0000` to `U +ffff`，表示法是 `\uxxxx`??
** To get the exact size of a type OR a variable on a particular platform (已經是 CLR VM，為什麼 type size 還要因 platform 而不同??), you can use the `sizeof` method (正確地說，是 operator). The expression `sizeof(type)` yields the storage size of the object OR type in bytes. 實驗發現 `size(variable)` 好像行不通??
** The reference types do not contain the actual data stored in a variable, but they contain a reference to the variables.
** In other words, they refer to a memory location. Using more than one variable, the reference types can refer to a memory location. 串不起來 "more than one variable" 跟 "memory location"?? If the data in the memory location is changed by one of the variables, the other variable automatically reflects this change in value.
** Example of built-in reference types are: `object`, `dynamic` and `string`.
** The `object` Type is the ultimate base class for all data types in C# Common Type System (CTS). `object` is an alias for `System.Object` class. 原來這些都是 alias，慣例 class name 應該是 camel case 才對
** So `object` types can be assigned values of any other types, value types, reference types, predefined or user-defined types. However, before assigning values, it needs type conversion. 更精確的說是 "implicit type conversion"。
** When a value type is converted to `object` type, it is called boxing and on the other hand, when an object type is converted to a value type, it is called unboxing. 簡單地說，變為 generic 時是 boxing (裝箱，看不到細節)，變為 specific 時是 unboxing (開箱，看到細節）。
** You can store any type of value in the `dynamic` data type variable. Type checking for these types of variables takes place at run-time. `dynamic <variable_name> = value;` 指有沒有某個 member 的檢查會發生在 run-time?? 這一點讓 C# 可以像 scripting language 一樣使用??
** Dynamic types are similar to `object` types except that type checking for `object` type variables takes place at compile time, whereas that for the `dynamic` type variables take place at run time.
** The String Type allows you to assign any string values to a variable. The string type is an alias for the System.String class. It is derived from `object` type.
** The value for a `string` type can be assigned using string literals in two forms: quoted and @quoted. `String str = "Tutorials Point";` or `@"Tutorials Point";`  這兩者有什麼差別?? 
** The user-defined reference types are: `class`, `interface`, or `delegate`. 什麼是 delegate??
** Pointer type variables store the memory address of another type. Pointers in C# have the same capabilities as in C or C++. `type* identifier;` 在 C# 裡常用嗎??
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_type_conversion.htm[C# Type Conversion - C# Tutorial - tutorialspoint]

////////////////////////////////////////////////////////////////////////////////
** Implicit type conversion - these conversions are performed by C# in a type-safe manner. Examples are conversions from smaller to larger integral types and conversions from derived classes to base classes.
** Explicit type conversion - these conversions are done explicitly by users using the pre-defined functions. Explicit conversions require a "cast operator". `i = (int)d;` 跟 Java 的用法一樣，在括號裡面寫上 type。
** C# provides the following built-in type conversion methods: 例如 `Console.WriteLine(i.ToString());`
   *** `ToDateTime` - Converts a type (integer or string type) to date-time structures.
   *** `ToString` - Converts a type to a string.
   *** `ToType` Converts a type to a specified type. ??
   *** 好像大家都有 `ToString()`，但其他 `ToXXX()` 其實都定義在 `System.Convert` 底下?? 這也就是為什麼 `"2013/10/10".ToDateTime()` 會丟出 `string` 沒有 `ToDateTime()` 的錯誤
////////////////////////////////////////////////////////////////////////////////

 * http://www.tutorialspoint.com/csharp/csharp_variables.htm[C# Variables - C# Tutorial - tutorialspoint] 

////////////////////////////////////////////////////////////////////////////////
** Each variable in C# has a specific type, which determines the size and layout of the variable's memory
** Nullable types 跟 reference type 一嗎??
** C# also allows defining other value types of variable like `enum` and reference types of variables like `class` 注意 `enum` 也是 value types
** Syntax for variable definition in C# is: `<data_type> <variable_list>;`. `variable_list` may consist of one or more identifier names separated by commas.
** You can initialize a variable at the time of definition as: `int i = 100;`
** Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as: `<data_type> <variable_name> = value;`
** The `Console` class in the `System` namespace provides a function `ReadLine()` for accepting input from the user and store it into a variable.
** `num = Convert.ToInt32(Console.ReadLIne());` The function `Convert.ToInt32()` converts the data entered by the user to `int` data type, because `Console.ReadLine()` accepts the data in `string` format. 到這裡才說明 `ToXXX` 其實在 `System.Convert` 身上。
** Variables are lvalues and so may appear on the left-hand side of an assignment. Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side. 本來就是，為此還搞了個 lvalues 跟 rvalues...
////////////////////////////////////////////////////////////////////////////////
--

