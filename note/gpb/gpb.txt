= GPB (Google Protocol Buffers) =

== 參考資料 ==

.網站
--
 * https://developers.google.com/protocol-buffers/[Protocol Buffers — Google Developers] ^https://diigo.com/0xvgp[閱讀]^
 * http://code.google.com/p/protobuf/[protobuf - Protocol Buffers - Google's data interchange format - Google Project Hosting]
--

.文件
--
 * https://developers.google.com/protocol-buffers/docs/overview[Developer Guide - Protocol Buffers — Google Developers]
   ** https://developers.google.com/protocol-buffers/docs/proto[Language Guide]
   ** https://developers.google.com/protocol-buffers/docs/encoding[Encoding]
   ** https://developers.google.com/protocol-buffers/docs/style[Style Guide]
--

////////////////////////////////////////////////////////////////////////////////

 * 這些 API 讀寫的對象稱作 Message、Buffer 或 Protocol Buffer (有別於專案名稱 Protocol Buffers, 後面沒有 's')
 * why?
   ** You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages – Java, C++, or Python.
   ** a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more.
   ** the protocol buffer format supports the idea of "extending the format over time" (schema evolution) in such a way that the code can still read data encoded with the old format.
   ** think XML, but smaller, faster, and simpler.
      *** 為什麼不用 XML? 因為 XML 非常吃空間, Encode/Decode 吃資源, 操作 XML DOM Tree 不比 Class Fields 來得直覺
      *** XML, can be very attractive since XML is (sort of) human readable and there are binding libraries for lots of languages. This can be a good choice if you want to share data with other applications/projects. 
      *** XML is notoriously space intensive, and encoding/decoding it can impose a huge performance penalty on applications. Also, navigating an XML DOM tree is considerably more complicated than navigating simple fields in a class normally would be.
 * define message/protocol formats (.proto) -> compile (protocol buffer compiler) -> read/write messages via protocol buffer API
 * define
   ** you add a message for each data structure you want to serialize, then specify a name and a type for each field in the message. A message is just an aggregate containing a set of "typed fields".
   ** Many standard simple data types are available as field types, including `bool`, `int32`, `float`, `double`, and `string`.
   ** You can also add further structure to your messages by using other message types as field types
   ** don't go looking for facilities similar to class inheritance, though – protocol buffers don't do that.
 * Each field MUST be annotated with one of the following "modifiers"
   ** required: a value for the field must be provided, otherwise the message will be considered "uninitialized".
      *** Serializing an uninitialized message will raise an exception. Parsing an uninitialized message will fail.
      *** Other than this, a required field behaves exactly like an optional field.
      *** Required Is Forever - You should be very careful about marking fields as required. If at some point you wish to stop writing or sending a required field, it will be problematic to change the field to an optional field – old readers will consider messages without this field to be incomplete and may reject or drop them unintentionally. You should consider writing application-specific custom validation routines for your buffers instead. Some engineers at Google have come to the conclusion that using required does more harm than good; they prefer to use only optional and repeated. However, this view is not universal.
      *** required 在使用上要特別謹慎, 因為從 required 轉成 optional 時, 舊的 reader 讀取新產生的 message 時可能會發生錯誤 (Message 通常在不同的兩端做交換, 有時候無法同時更新雙方所採用的 Protocol Format, 甚至還要考慮向下相容的問題)
      *** Google 內部一些工程師甚至建議少用 required, 可以搭配 optional/repeated 與 application-specific custom validation routines 來達到類似 required 的效果
   ** optional: the field may or may not be set. 
      *** if an optional field value isn't set, a default value is used. For simple types, you can specify your own default value, as we've done for the phone number type in the example. Otherwise, a system default is used: zero for numeric types, the empty string for strings, false for bools. 
      *** for embedded messages, the default value is always the "default instance" or "prototype" of the message, which has none of its fields set??
      *** calling the accessor to get the value of an optional (or required) field which has not been explicitly set always returns that field's default value. (模糊地帶：沒有設定才傳回預設值，還是明確給定了跟預設值相同的值)
   ** `repeated`: the field may be repeated any number of times (including zero). The order of the repeated values will be preserved in the protocol buffer. Think of repeated fields as dynamically sized arrays.
 * compile (protocol buffer compiler `protoc`)
+
--
--------------------------------------------------------------------------------
package tutorial; <1>

message Person {
  required string name = 1; <4>
  required int32 id = 2;
  optional string email = 3;

  enum PhoneType { <2>
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber { <3>
    required string number = 1;
    optional PhoneType type = 2 [default = HOME];
  }

  repeated PhoneNumber phone = 4;
}

message AddressBook {
  repeated Person person = 1;
}
--------------------------------------------------------------------------------
<1> package declaration, which helps to prevent naming conflicts between different projects. 
+
In Python, packages are normally determined by directory structure, so the package you define in your .proto file will have no effect on the generated code. However, you should still declare one to avoid name collisions in the Protocol Buffers name space as well as in non-Python languages.
+
<2> You can also define enum types if you want one of your fields to have one of a predefined list of values
<3> You can even define message types nested inside other messages
<4> The " = 1", " = 2" markers on each element identify the unique "tag" that field uses in the binary encoding.
+
Tag numbers 1-15 require one less byte to encode than higher numbers, so as an optimization you can decide to use those tags for the commonly used or repeated elements, leaving tags 16 and higher for less-commonly used optional elements. Each element in a repeated field requires re-encoding the tag number, so repeated fields are particularly good candidates for this optimization.
--
+
 * Protocol Buffers and O-O Design
   ** Protocol buffer classes are basically dumb data holders (like structs in C++); they don't make good first class citizens in an object model. If you want to add richer behaviour to a generated class, the best way to do this is to wrap the generated protocol buffer class in an application-specific class.
   ** Wrapping protocol buffers is also a good idea if you don't have control over the design of the .proto file (if, say, you're reusing one from another project). In that case, you can use the wrapper class to craft an interface better suited to the unique environment of your application: hiding some data and methods, exposing convenience functions, etc.
   ** You should never add behaviour to the generated classes by inheriting from them. This will break internal mechanisms and is not good object-oriented practice anyway.
 * forward/backward-compatible
   ** Sooner or later after you release the code that uses your protocol buffer, you will undoubtedly want to "improve" the protocol buffer's definition. If you want your new buffers to be backwards-compatible, and your old buffers to be forward-compatible. some rules you need to follow in the new version of the protocol buffer:
      *** you must not change the tag numbers of any existing fields.
      *** you must not add or delete any required fields.
      *** you may delete optional or repeated fields.
      *** you may add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).
   ** If you follow these rules, old code will happily read new messages and simply ignore any new fields. To the old code, optional fields (of new messages) that were deleted will simply have their default value, and deleted repeated fields will be empty. New code will also transparently read old messages.
   ** (Python) However, keep in mind that new optional fields will not be present in old messages, so you will need to either check explicitly whether they're set with `has_`, or provide a reasonable default value in your .proto file with [default = value] after the tag number. (例如不知道是明確設定成空字串，還是因為沒設定才傳回預設的空字串。這樣的區別重要嗎？不知道有沒有 null 的概念??)
   ** (Python) Note also that if you added a new repeated field, your new code will not be able to tell whether it was left empty (by new code) or never set at all (by old code) since there is no `has_` flag for it.
 * One key feature provided by protocol message classes is reflection. You can iterate over the fields of a message and manipulate their values without writing your code against any specific message type.

 * 擅於對 Structured Data 做編碼 (Serialize), Google 內部大量用在 RPC Call 中傳遞複雜的資料結構, 又或者做為儲存複雜資料結構的檔案格式; 編碼的結果是 Binary, 需要以純文字的方式交換資料時, 通常會用 Base64 處理過
 * 用專用的 DSL (Protocol Buffer Language) 定義 .proto 檔 (Message Format), 再用 Protocol Buffer Compiler (protoc) 編出不同語言專用的 API, 目前支援 C++, Java, Python, 也就是說它可以跨平台、語言交換資料

////////////////////////////////////////////////////////////////////////////////

